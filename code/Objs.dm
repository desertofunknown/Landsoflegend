atom
	MouseDrag(var/obj/Over_Object,var/turf/Turf_Start,var/obj/Over_Loc)
		if(ismob(src))
			var/mob/M = src
			if(usr.CanUseTK && usr.Function == "Interact" && usr.client.eye == usr && M.Sleeping == 0 && usr.Sleeping == 0 && usr.Sleep >= 0 && usr.Dead == 0 && usr.Fainted == 0)
				M.LastLoc = M.loc
				var/CanLift = 0
				var/CanResist = 0
				CanLift = prob(100 - M.Weight / 3)
				CanResist = prob(10 + M.Intelligence)
				usr.Sleep -= 0.1
				usr.Intelligence += 0.001
				if(CanLift && CanResist == 0)
					if(Over_Loc in range(1,M.LastLoc))
						M.UnderTK = usr
						M.overlays += /obj/Misc/SpellEffects/Dispel
						usr.overlays += /obj/Misc/SpellEffects/Dispel
						spawn(10)
							if(usr)
								usr.overlays -= /obj/Misc/SpellEffects/Dispel
							if(M)
								M.overlays -= /obj/Misc/SpellEffects/Dispel
						M.Move(Over_Loc,SOUTH)
						if(M)
							M.UnderTK = null
					else
						M.loc = M.LastLoc
		if(isobj(src))
			var/obj/O = src
			if(usr.CanUseTK && usr.Function == "Interact" && O.Type != "Sleep" && usr.Sleeping == 0 && usr.Sleep >= 0 && O.suffix == null && usr.Dead == 0 && usr.Fainted == 0)
				if(Over_Loc)
					if(Over_Loc.density == 0)
						O.LastLoc = O.loc
						var/CanLift = 0
						CanLift = prob(100 - O.Weight / 3)
						usr.Sleep -= 0.05
						usr.Intelligence += 0.001
						if(usr.client.eye != usr)
							usr.Sleep -= 0.05
						if(CanLift)
							if(Over_Loc in range(1,O.LastLoc))
								O.overlays += /obj/Misc/SpellEffects/Dispel
								usr.overlays += /obj/Misc/SpellEffects/Dispel
								spawn(10)
									if(usr)
										usr.overlays -= /obj/Misc/SpellEffects/Dispel
									if(O)
										O.overlays -= /obj/Misc/SpellEffects/Dispel
								O.Move(Over_Loc)
								for(var/atom/a in range(0,O))
									if(a.density)
										O.loc = O.LastLoc
									if(isobj(a))
										var/obj/Z = a
										if(Z.Type == "Hole" && Z.GoesTo)
											view(6,O) << "<font color = yellow>[O] falls down the Hole!<br>"
											O.loc = Z.GoesTo
							else
								O.loc = O.LastLoc
obj
	MouseEntered()
		if(src in usr)
			if(src.suffix)
				if(usr.InvenUp)
					usr.MouseLocationX = src.Xloc
					usr.MouseLocationY = src.Yloc
					usr.Box()
	MouseExited()
		usr.MouseLocationX = null
		usr.MouseLocationY = null
		usr.Delete("ScrollMiddle","BoxDelete")
	proc
		DemonicSwordMagic()
			var/mob/L = null
			if(ismob(src.loc))
				L = src.loc
			if(src.suffix == "Equip")
				var/WillSpeak = prob(10)
				if(WillSpeak)
					var/Speaks = rand(1,10)
					if(Speaks == 1)
						Speaks = "Kill everything..."
					if(Speaks == 2)
						Speaks = "Release me..."
					if(Speaks == 3)
						Speaks = "Feed the swords hunger..."
					if(Speaks == 4)
						Speaks = "Give in to your emotions..."
					if(Speaks == 5)
						Speaks = "Allow me to enter your world through you..."
					if(Speaks == 6)
						Speaks = "I can make you powerful..."
					if(Speaks == 7)
						Speaks = "Can you feel the power?!..."
					if(Speaks == 8)
						Speaks = "Embrace the darkness..."
					if(Speaks == 9)
						Speaks = "Ha...ha...ha..."
					if(Speaks == 10)
						Speaks = "Crush...Kill...Destroy ..."
					for(var/mob/M in src)
						if(L)
							M.loc = L.loc
							M.Speak(Speaks,0)
							M.loc = src
				if(L)
					for(var/mob/M in orange(1,L))
						if(M.client)
							var/Attack = prob(25)
							if(Attack)
								view(6,L) << "<font color = yellow>[src] flares furiously as [L]'s eyes seem to glaze over. [L] attempts to strike out towards [M], having been temporarily possessed by the strange Blade.<br>"
								L.Target = M
					var/BreakOut = prob(1 - L.Strength / 100 - L.Intelligence / 100)
					if(src.Dura <= 1)
						BreakOut = 1
					if(BreakOut)
						view(6,L) << "<font color = purple>[src] begins to ignite furiously with Demonic Flame. Having used [L]'s blood energy, the Demon within the Blade breaks loose!<br>"
						for(var/mob/M in src)
							M.loc = L.loc
							M.CancelDefaultProc = 0
							M.NormalAI()
							M.Target = L
						L.Weight -= src.Weight
						L.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
						L.DeleteInventoryMenu()
						if(L.InvenUp)
							L.InvenUp = 0
						del(src)
						return
			else
				var/WillSpeak = prob(10)
				if(WillSpeak)
					var/Speaks = rand(1,5)
					if(Speaks == 1)
						Speaks = "Use the sword..."
					if(Speaks == 2)
						Speaks = "Only through using the sword will you become mighty..."
					if(Speaks == 3)
						Speaks = "The sword will make you powerful..."
					if(Speaks == 4)
						Speaks = "You must use the sword, it is the only way to save your world..."
					if(Speaks == 5)
						Speaks = "Only in using the sword can you hope to save everything you love..."
					for(var/mob/M in src)
						if(L)
							M.loc = L.loc
							M.Speak(Speaks,0)
							M.loc = src
			spawn(100)
				if(src)
					src.DemonicSwordMagic()
		CoinAdjust()
			if(src.Type >= 5)
				src.icon_state = "gold coin >5"
			if(src.Type >= 10)
				src.icon_state = "gold coin >10"
			if(src.Type >= 50)
				src.icon_state = "gold coin >50"
			if(src.Type >= 100)
				src.icon_state = "gold coin >100"
		CreateLeather()
			spawn(rand(1000,3000))
				if(src)
					if(src.icon_state != "Dry Leather Hide")
						src.icon_state = "Dry Leather Hide"
						src.name = "Dry [src.name]"
						src.Type = "Dry"
		AddBodyWounds(var/mob/m)
			src.WoundLeftArm = m.WoundLeftArm
			src.WoundRightArm = m.WoundRightArm
			src.WoundLeftLeg = m.WoundLeftLeg
			src.WoundRightLeg = m.WoundRightLeg
			src.WoundHead = m.WoundHead
			src.WoundTorso = m.WoundTorso
			if(src.WoundLeftLeg)
				var/obj/W = src.WoundLeftLeg
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
			if(src.WoundRightLeg)
				var/obj/W = src.WoundRightLeg
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
			if(src.WoundLeftArm)
				var/obj/W = src.WoundLeftArm
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
			if(src.WoundRightArm)
				var/obj/W = src.WoundRightArm
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
			if(src.WoundTorso)
				var/obj/W = src.WoundTorso
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
			if(src.WoundHead)
				var/obj/W = src.WoundHead
				var/icon/I = new(W.icon)
				I.Turn(90)
				W.icon = I
				src.overlays += W
		BodyKeyCheck()
			for(var/mob/M in range(1,src))
				if(M.Dead == 0 && M.client && M.key == src.BodysKey)
					var/Kick = 0
					if(M.Function == "PickUp")
						Kick = 1
					if(M.Function == "Pull")
						Kick = 1
					if(Kick)
						M.loc = M.LastLoc
						world << "<font color = teal><b>[M] was kicked for interacting with their previous body!<br>"
						del(M)
			spawn(1) src.BodyKeyCheck()
		RandomItem()
			var/MadeItem = 1
			if(src.Type == "RandomResource")
				var/R = rand(1,3)
				var/Num = rand(15,33)
				if(R == 1)
					while(Num)
						Num -= 1
						var/obj/Items/Resources/Plank/P = new
						P.loc = src.loc
				if(R == 2)
					while(Num)
						Num -= 1
						var/obj/Items/Resources/LargeBrick/B = new
						B.loc = src.loc
				if(R == 3)
					var/Mat = rand(1,4)
					if(Mat == 1)
						Mat = "Iron"
					if(Mat == 2)
						Mat = "Copper"
					if(Mat == 3)
						Mat = "Gold"
					if(Mat == 4)
						Mat = "Silver"
					while(Num)
						Num -= 1
						var/obj/Items/Resources/Ingot/I = new
						I.Material = Mat
						I.icon_state = "[I.Material] ingot"
						I.name = "[I.Material] ingot"
						I.Weight = 10
						I.CraftPotential = rand(1,100)
						I.loc = src.loc
			if(src.Type == "RandomBone")
				var/obj/Items/Armour/UpperBody/BoneChestPlate/U = new
				U.icon_state = U.CarryState
				U.pixel_y = 12
				U.loc = src.loc
				U.Defence += rand(3,10)
				var/obj/Items/Armour/Shoulders/SkullPauldrons/PS = new
				PS.icon_state = PS.CarryState
				PS.pixel_y = 12
				PS.loc = src.loc
				PS.Defence += rand(3,10)
				var/obj/Items/Armour/Head/SkullHelmet/H = new
				H.icon_state = H.CarryState
				H.pixel_y = 12
				H.loc = src.loc
				H.Defence += rand(3,10)
				var/obj/Items/Armour/LeftArm/BoneLeftGauntlet/PGL = new
				PGL.icon_state = PGL.CarryState
				PGL.pixel_y = 12
				PGL.loc = src.loc
				PGL.Defence += rand(3,10)
				var/obj/Items/Armour/RightArm/BoneRightGauntlet/PGR = new
				PGR.icon_state = PGR.CarryState
				PGR.pixel_y = 12
				PGR.loc = src.loc
				PGR.Defence += rand(3,10)
				var/obj/Items/Armour/LeftFoot/BoneBootLeft/PBL = new
				PBL.icon_state = PBL.CarryState
				PBL.pixel_y = 12
				PBL.loc = src.loc
				PBL.Defence += rand(3,10)
				var/obj/Items/Armour/RightFoot/BoneBootRight/PBR = new
				PBR.icon_state = PBR.CarryState
				PBR.pixel_y = 12
				PBR.loc = src.loc
				PBR.Defence += rand(3,10)
			if(src.Type == "RandomPlateStahlite")
				var/Mat = rand(1,3)
				if(Mat == 1)
					Mat = "Iron"
				if(Mat == 2)
					Mat = "Copper"
				if(Mat == 3)
					Mat = "Gold"
				var/obj/Items/Armour/Chest/SmallChainShirt/C = new
				C.Material = Mat
				C.RandomItemQuality()
				C.name = "[C.Material] [C]"
				C.icon_state = C.CarryState
				C.pixel_y = 12
				C.loc = src.loc
				if(Mat == "Iron")
					C.Defence += rand(3,5)
				if(Mat == "Copper")
					C.Defence += rand(2,4)
				if(Mat == "Gold")
					C.Defence += rand(1,2)
				var/obj/Items/Armour/UpperBody/SmallChestPlate/U = new
				U.Material = Mat
				U.RandomItemQuality()
				U.name = "[U.Material] [U]"
				U.icon_state = U.CarryState
				U.pixel_y = 12
				U.loc = src.loc
				if(Mat == "Iron")
					U.Defence += rand(3,5)
				if(Mat == "Copper")
					U.Defence += rand(2,4)
				if(Mat == "Gold")
					U.Defence += rand(1,2)
				var/obj/Items/Armour/Shoulders/SmallPlatePauldrons/PS = new
				PS.Material = Mat
				PS.RandomItemQuality()
				PS.name = "[PS.Material] [PS]"
				PS.icon_state = PS.CarryState
				PS.pixel_y = 12
				PS.loc = src.loc
				if(Mat == "Iron")
					PS.Defence += rand(3,5)
				if(Mat == "Copper")
					PS.Defence += rand(2,4)
				if(Mat == "Gold")
					PS.Defence += rand(1,2)
				var/obj/Items/Armour/Head/SmallDwarvenHelmet/H = new
				var/HelmNum = rand(1,3)
				H.icon_state = "small stahlite helm[HelmNum]"
				H.EquipState = "small stahlite helm[HelmNum]"
				H.CarryState = "small stahlite helm[HelmNum]"
				H.Material = Mat
				H.RandomItemQuality()
				H.name = "[H.Material] [H]"
				H.icon_state = H.CarryState
				H.pixel_y = 12
				H.loc = src.loc
				if(Mat == "Iron")
					H.Defence += rand(3,5)
				if(Mat == "Copper")
					H.Defence += rand(2,4)
				if(Mat == "Gold")
					H.Defence += rand(1,2)
				var/obj/Items/Armour/LeftArm/SmallPlateGauntletLeft/PGL = new
				PGL.Material = Mat
				PGL.RandomItemQuality()
				PGL.name = "[PGL.Material] [PGL]"
				PGL.icon_state = PGL.CarryState
				PGL.pixel_y = 12
				PGL.loc = src.loc
				if(Mat == "Iron")
					PGL.Defence += rand(3,5)
				if(Mat == "Copper")
					PGL.Defence += rand(2,4)
				if(Mat == "Gold")
					PGL.Defence += rand(1,2)
				var/obj/Items/Armour/RightArm/SmallPlateGauntletRight/PGR = new
				PGR.Material = Mat
				PGR.RandomItemQuality()
				PGR.name = "[PGR.Material] [PGR]"
				PGR.icon_state = PGR.CarryState
				PGR.pixel_y = 12
				PGR.loc = src.loc
				if(Mat == "Iron")
					PGR.Defence += rand(3,5)
				if(Mat == "Copper")
					PGR.Defence += rand(2,4)
				if(Mat == "Gold")
					PGR.Defence += rand(1,2)
				var/obj/Items/Armour/Legs/SmallChainLeggings/CL = new
				CL.Material = Mat
				CL.RandomItemQuality()
				CL.name = "[CL.Material] [CL]"
				CL.icon_state = CL.CarryState
				CL.pixel_y = 12
				CL.loc = src.loc
				if(Mat == "Iron")
					CL.Defence += rand(3,5)
				if(Mat == "Copper")
					CL.Defence += rand(2,4)
				if(Mat == "Gold")
					CL.Defence += rand(1,2)
				var/obj/Items/Armour/Shields/Shield/S = new
				S.Material = Mat
				S.RandomItemQuality()
				S.name = "[S.Material] [S]"
				S.icon_state = S.CarryState
				S.pixel_y = 12
				S.loc = src.loc
				if(Mat == "Iron")
					S.Defence += rand(3,5)
				if(Mat == "Copper")
					S.Defence += rand(2,4)
				if(Mat == "Gold")
					S.Defence += rand(1,2)
				var/obj/Items/Armour/LeftFoot/SmallPlateBootLeft/PBL = new
				PBL.Material = Mat
				PBL.RandomItemQuality()
				PBL.name = "[PBL.Material] [PBL]"
				PBL.icon_state = PBL.CarryState
				PBL.pixel_y = 12
				PBL.loc = src.loc
				if(Mat == "Iron")
					PBL.Defence += rand(3,5)
				if(Mat == "Copper")
					PBL.Defence += rand(2,4)
				if(Mat == "Gold")
					PBL.Defence += rand(1,2)

				var/obj/Items/Armour/RightFoot/SmallPlateBootRight/PBR = new
				PBR.Material = Mat
				PBR.RandomItemQuality()
				PBR.name = "[PBR.Material] [PBR]"
				PBR.icon_state = PBR.CarryState
				PBR.pixel_y = 12
				PBR.loc = src.loc
				if(Mat == "Iron")
					PBR.Defence += rand(3,5)
				if(Mat == "Copper")
					PBR.Defence += rand(2,4)
				if(Mat == "Gold")
					PBR.Defence += rand(1,2)
			if(src.Type == "RandomPlate")
				var/Mat = rand(1,3)
				if(Mat == 1)
					Mat = "Iron"
				if(Mat == 2)
					Mat = "Copper"
				if(Mat == 3)
					Mat = "Gold"
				var/obj/Items/Armour/Chest/ChainShirt/C = new
				C.Material = Mat
				C.RandomItemQuality()
				C.name = "[C.Material] [C]"
				C.icon_state = C.CarryState
				C.pixel_y = 12
				C.loc = src.loc
				if(Mat == "Iron")
					C.Defence += rand(3,5)
				if(Mat == "Copper")
					C.Defence += rand(2,4)
				if(Mat == "Gold")
					C.Defence += rand(1,2)
				var/obj/Items/Armour/UpperBody/ChestPlate/U = new
				U.Material = Mat
				U.RandomItemQuality()
				U.name = "[U.Material] [U]"
				U.icon_state = U.CarryState
				U.pixel_y = 12
				U.loc = src.loc
				if(Mat == "Iron")
					U.Defence += rand(3,5)
				if(Mat == "Copper")
					U.Defence += rand(2,4)
				if(Mat == "Gold")
					U.Defence += rand(1,2)
				var/obj/Items/Armour/Shoulders/PlatePauldrons/PS = new
				PS.Material = Mat
				PS.RandomItemQuality()
				PS.name = "[PS.Material] [PS]"
				PS.icon_state = PS.CarryState
				PS.pixel_y = 12
				PS.loc = src.loc
				if(Mat == "Iron")
					PS.Defence += rand(3,5)
				if(Mat == "Copper")
					PS.Defence += rand(2,4)
				if(Mat == "Gold")
					PS.Defence += rand(1,2)
				var/obj/Items/Armour/Head/PlateHelmet/H = new
				var/HelmNum = rand(1,5)
				H.icon_state = "plate helm[HelmNum]"
				H.EquipState = "plate helm[HelmNum]"
				H.CarryState = "plate helm[HelmNum]"
				H.Material = Mat
				H.RandomItemQuality()
				H.name = "[H.Material] [H]"
				H.icon_state = H.CarryState
				H.pixel_y = 12
				H.loc = src.loc
				if(Mat == "Iron")
					H.Defence += rand(3,5)
				if(Mat == "Copper")
					H.Defence += rand(2,4)
				if(Mat == "Gold")
					H.Defence += rand(1,2)
				var/obj/Items/Armour/LeftArm/PlateGauntletLeft/PGL = new
				PGL.Material = Mat
				PGL.RandomItemQuality()
				PGL.name = "[PGL.Material] [PGL]"
				PGL.icon_state = PGL.CarryState
				PGL.pixel_y = 12
				PGL.loc = src.loc
				if(Mat == "Iron")
					PGL.Defence += rand(3,5)
				if(Mat == "Copper")
					PGL.Defence += rand(2,4)
				if(Mat == "Gold")
					PGL.Defence += rand(1,2)
				var/obj/Items/Armour/RightArm/PlateGauntletRight/PGR = new
				PGR.Material = Mat
				PGR.RandomItemQuality()
				PGR.name = "[PGR.Material] [PGR]"
				PGR.icon_state = PGR.CarryState
				PGR.pixel_y = 12
				PGR.loc = src.loc
				if(Mat == "Iron")
					PGR.Defence += rand(3,5)
				if(Mat == "Copper")
					PGR.Defence += rand(2,4)
				if(Mat == "Gold")
					PGR.Defence += rand(1,2)
				var/obj/Items/Armour/Legs/ChainLeggings/CL = new
				CL.Material = Mat
				CL.RandomItemQuality()
				CL.name = "[CL.Material] [CL]"
				CL.icon_state = CL.CarryState
				CL.pixel_y = 12
				CL.loc = src.loc
				if(Mat == "Iron")
					CL.Defence += rand(3,5)
				if(Mat == "Copper")
					CL.Defence += rand(2,4)
				if(Mat == "Gold")
					CL.Defence += rand(1,2)
				var/obj/Items/Armour/Shields/Shield/S = new
				S.Material = Mat
				S.RandomItemQuality()
				S.name = "[S.Material] [S]"
				S.icon_state = S.CarryState
				S.pixel_y = 12
				S.loc = src.loc
				if(Mat == "Iron")
					S.Defence += rand(3,5)
				if(Mat == "Copper")
					S.Defence += rand(2,4)
				if(Mat == "Gold")
					S.Defence += rand(1,2)
				var/obj/Items/Armour/LeftFoot/PlateBootLeft/PBL = new
				PBL.Material = Mat
				PBL.RandomItemQuality()
				PBL.name = "[PBL.Material] [PBL]"
				PBL.icon_state = PBL.CarryState
				PBL.pixel_y = 12
				PBL.loc = src.loc
				if(Mat == "Iron")
					PBL.Defence += rand(3,5)
				if(Mat == "Copper")
					PBL.Defence += rand(2,4)
				if(Mat == "Gold")
					PBL.Defence += rand(1,2)

				var/obj/Items/Armour/RightFoot/PlateBootRight/PBR = new
				PBR.Material = Mat
				PBR.RandomItemQuality()
				PBR.name = "[PBR.Material] [PBR]"
				PBR.icon_state = PBR.CarryState
				PBR.pixel_y = 12
				PBR.loc = src.loc
				if(Mat == "Iron")
					PBR.Defence += rand(3,5)
				if(Mat == "Copper")
					PBR.Defence += rand(2,4)
				if(Mat == "Gold")
					PBR.Defence += rand(1,2)
			if(src.Type == "RandomWeapon")
				MadeItem = 0
				var/ItemType = 0
				ItemType = rand(1,6)
				if(ItemType == 1)
					var/Swords = list()
					Swords += typesof(/obj/Items/Weapons/Swords/)
					for(var/O in Swords)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(25)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
				if(ItemType == 2)
					var/Axes = list()
					Axes += typesof(/obj/Items/Weapons/Axes/)
					for(var/O in Axes)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(33)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
				if(ItemType == 3)
					var/Blunts = list()
					Blunts += typesof(/obj/Items/Weapons/Blunts/)
					for(var/O in Blunts)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(25)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
				if(ItemType == 4)
					var/Spears = list()
					Spears += typesof(/obj/Items/Weapons/Spears/)
					for(var/O in Spears)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(100)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
				if(ItemType == 5)
					var/Daggers = list()
					Daggers += typesof(/obj/Items/Weapons/Daggers/)
					for(var/O in Daggers)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(50)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
				if(ItemType == 6)
					var/Bows = list()
					Bows += typesof(/obj/Items/Weapons/Ranged/)
					for(var/O in Bows)
						var/obj/I = new O()
						if(I.CanBeCrafted)
							var/Choose = prob(50)
							if(Choose)
								var/obj/A = new I.type()
								var/Make = rand(1,3)
								var/Mat = null
								if(Make == 1)
									Mat = "Iron"
									A.Quality += rand(4,7)
								if(Make == 2)
									Mat = "Copper"
									A.Quality += rand(3,5)
								if(Make == 3)
									Mat = "Silver"
									A.Quality += rand(3,5)
								A.Material = Mat
								A.RandomItemQuality()
								A.name = "[A.Material] [A]"
								A.icon_state = A.CarryState
								A.pixel_y = 12
								A.loc = src.loc
								A.CanBeCrafted = 0
								MadeItem = 1
								break
							else
								del(I)
						else
							del(I)
			if(MadeItem == 0)
				src.RandomItem()
			else
				del(src)
			return
		TreasureChest()
			if(src.Type == "HasTreasure")
				var/obj/Items/Currency/GoldCoin/G = new
				G.loc = src
				G.suffix = "Carried"
				G.Type = rand(1,20)
				G.name = "[G.Type] Gold Coins"
				G.CoinAdjust()
				G.overlays+=image(/obj/HUD/C/)
				var/Items = rand(0,3)
				while(Items)
					Items -= 1
					var/ItemType = rand(1,2)
					if(ItemType == 1)
						ItemType = 0
						ItemType = rand(1,10)
						if(ItemType == 1)
							var/Chest = list()
							Chest += typesof(/obj/Items/Armour/Chest/)
							for(var/O in Chest)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 2)
							var/LeftArm = list()
							LeftArm += typesof(/obj/Items/Armour/LeftArm/)
							for(var/O in LeftArm)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 3)
							var/RightArm = list()
							RightArm += typesof(/obj/Items/Armour/RightArm/)
							for(var/O in RightArm)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 4)
							var/LeftFoot = list()
							LeftFoot += typesof(/obj/Items/Armour/LeftFoot/)
							for(var/O in LeftFoot)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 5)
							var/RightFoot = list()
							RightFoot += typesof(/obj/Items/Armour/RightFoot/)
							for(var/O in RightFoot)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 6)
							var/Legs = list()
							Legs += typesof(/obj/Items/Armour/Legs/)
							for(var/O in Legs)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(50)
										if(Choose)
											var/Make = rand(1,3)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											if(Make == 3)
												Mat = "Gold"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
						if(ItemType == 7)
							var/Shields = list()
							Shields += typesof(/obj/Items/Armour/Shields/)
							for(var/O in Shields)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Metal = 0
									if(I.BaseMaterial == "Metal")
										Metal = 1
									if(Metal)
										var/Choose = prob(100)
										if(Choose)
											var/Make = rand(1,2)
											var/Mat = null
											if(Make == 1)
												Mat = "Iron"
											if(Make == 2)
												Mat = "Copper"
											var/obj/A = new I.type()
											A.suffix = "Carried"
											A.layer = 100
											A.Material = Mat
											A.RandomItemQuality()
											A.name = "[A.Material] [A]"
											A.icon_state = A.CarryState
											A.overlays += image(/obj/HUD/C/)
											A.loc = src
											break
										else
											del(I)
									else
										del(I)
					if(ItemType == 2)
						ItemType = 0
						ItemType = rand(1,5)
						if(ItemType == 1)
							var/Swords = list()
							Swords += typesof(/obj/Items/Weapons/Swords/)
							for(var/O in Swords)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Choose = prob(25)
									if(Choose)
										var/Make = rand(1,3)
										var/Mat = null
										if(Make == 1)
											Mat = "Iron"
										if(Make == 2)
											Mat = "Copper"
										if(Make == 3)
											Mat = "Silver"
										var/obj/A = new I.type()
										A.suffix = "Carried"
										A.layer = 100
										A.Material = Mat
										A.RandomItemQuality()
										A.name = "[A.Material] [A]"
										A.icon_state = A.CarryState
										A.overlays += image(/obj/HUD/C/)
										A.loc = src
										break
									else
										del(I)
						if(ItemType == 2)
							var/Axes = list()
							Axes += typesof(/obj/Items/Weapons/Axes/)
							for(var/O in Axes)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Choose = prob(50)
									if(Choose)
										var/Make = rand(1,3)
										var/Mat = null
										if(Make == 1)
											Mat = "Iron"
										if(Make == 2)
											Mat = "Copper"
										if(Make == 3)
											Mat = "Silver"
										var/obj/A = new I.type()
										A.suffix = "Carried"
										A.layer = 100
										A.Material = Mat
										A.RandomItemQuality()
										A.name = "[A.Material] [A]"
										A.icon_state = A.CarryState
										A.overlays += image(/obj/HUD/C/)
										A.loc = src
										break
									else
										del(I)
						if(ItemType == 3)
							var/Blunts = list()
							Blunts += typesof(/obj/Items/Weapons/Blunts/)
							for(var/O in Blunts)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Choose = prob(25)
									if(Choose)
										var/Make = rand(1,3)
										var/Mat = null
										if(Make == 1)
											Mat = "Iron"
										if(Make == 2)
											Mat = "Copper"
										if(Make == 3)
											Mat = "Silver"
										var/obj/A = new I.type()
										A.suffix = "Carried"
										A.layer = 100
										A.Material = Mat
										A.RandomItemQuality()
										A.name = "[A.Material] [A]"
										A.icon_state = A.CarryState
										A.overlays += image(/obj/HUD/C/)
										A.loc = src
										break
									else
										del(I)
						if(ItemType == 4)
							var/Spears = list()
							Spears += typesof(/obj/Items/Weapons/Spears/)
							for(var/O in Spears)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Choose = prob(100)
									if(Choose)
										var/Make = rand(1,3)
										var/Mat = null
										if(Make == 1)
											Mat = "Iron"
										if(Make == 2)
											Mat = "Copper"
										if(Make == 3)
											Mat = "Silver"
										var/obj/A = new I.type()
										A.suffix = "Carried"
										A.layer = 100
										A.Material = Mat
										A.RandomItemQuality()
										A.name = "[A.Material] [A]"
										A.icon_state = A.CarryState
										A.overlays += image(/obj/HUD/C/)
										A.loc = src
										break
									else
										del(I)
						if(ItemType == 5)
							var/Daggers = list()
							Daggers += typesof(/obj/Items/Weapons/Daggers/)
							for(var/O in Daggers)
								var/obj/I = new O()
								if(I.CanBeCrafted)
									var/Choose = prob(50)
									if(Choose)
										var/Make = rand(1,3)
										var/Mat = null
										if(Make == 1)
											Mat = "Iron"
										if(Make == 2)
											Mat = "Copper"
										if(Make == 3)
											Mat = "Silver"
										var/obj/A = new I.type()
										A.suffix = "Carried"
										A.layer = 100
										A.Material = Mat
										A.RandomItemQuality()
										A.name = "[A.Material] [A]"
										A.icon_state = A.CarryState
										A.overlays += image(/obj/HUD/C/)
										A.loc = src
										break
									else
										del(I)
		Cook(var/Loc,var/obj/Fire,var/mob/DroppedBy,var/Cooked,var/WillBurn,)
			if(src.icon == 'Skeleton.dmi')
				return
			spawn(rand(100,300))
				if(Fire && src)
					if(Fire in range(1,src))
						if(src && src.suffix == null && src.loc == Loc && Fire.OnFire)
							if(WillBurn)
								view(2,src.loc) << "<font color = yellow>The [src] burns to ash!<br>"
								var/obj/Items/Resources/Ash/A = new
								A.loc = src.loc
								del(src)
								return
							if(src.CookingFood != 2)
								if(Cooked == 2)
									view(2,src.loc) << "<font color = yellow>The [src] seems to be done cooking!<br>"
									src.CookingFood = 2
									if(src.icon != 'food.dmi')
										src.icon = 'food.dmi'
									if(src.tag == "Limb")
										src.CookedState = "cooked meat2"
									src.icon_state = src.CookedState
									if(DroppedBy)
										if(DroppedBy in view(4,src))
											DroppedBy.CookingSkill += DroppedBy.CookingSkillMulti
									src.Cook(Loc,Fire,DroppedBy,Cooked,WillBurn)
									return
								else
									view(2,src.loc) << "<font color = yellow>The [src] seems to be cooking nicely!<br>"
									Cooked += 1
									if(DroppedBy)
										if(DroppedBy in view(4,src))
											DroppedBy.CookingSkill += DroppedBy.CookingSkillMulti / 4
											src.Type += DroppedBy.CookingSkill / 4
									src.Cook(Loc,Fire,DroppedBy,Cooked,WillBurn)
									return
							if(Cooked == 3)
								view(2,src.loc) << "<font color = yellow>The [src] seems to be burning!<br>"
								src.Cook(Loc,Fire,DroppedBy,Cooked,1)
								return

		LightProc(var/mob/M)
			if(src && src.Type == "Torch Lit")
				src.Dura -= 0.5
				if(M && src in M)
					M.luminosity = 5
					if(M.InWater)
						M.luminosity = 0
						M.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
						M.overlays-=image(src.icon,"[src.icon_state] left",src.ItemLayer)
						src.Type = "Torch"
						src.CarryState = "torch"
						src.EquipState = "torch equip"
						src.icon_state = src.EquipState
						if(src == M.Weapon)
							M.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
						if(src == M.Weapon2)
							M.overlays+=image(src.icon,"[src.icon_state] left",src.ItemLayer)
				else
					if(M)
						M.luminosity = 0
						src.luminosity = 5
						M = null
				if(src.Dura <= 1)
					view(2,src.loc) << "<font color = yellow>[src] burns out!<br>"
					if(M && src in M)
						M.Weight -= src.Weight
						M.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
						M.overlays-=image(src.icon,"[src.icon_state] left",src.ItemLayer)
						M.luminosity = 1
					del(src)
					return
			else
				if(M)
					M.luminosity = 0
				return
			spawn(10) LightProc(M)
		ChaosGate()
			spawn(rand(5000,10000))
				if(src)
					var/mob/NPC/Evil/Chaos/Chaos_Entity/C = new
					C.loc = src.loc
					view(src) << "<font color = purple>The [src] swirls and crackles with chaotic energy, suddenly the [src] flares violently and expells a strange dark mist of pure energy!<br>"
					ChaosGate()
		PressurePlateTrap()
			for(var/mob/M in range(0,src))
				view(src) << "<font color = red>You hear a loud grinding noise...<br>"
				if(src.Ref)
					var/obj/O = src.Ref
					if(O.Type == "Spiked Ball")
						return
			spawn(5) PressurePlateTrap()
		GateFunctions(var/J)
			if(J == "Open")
				for(var/obj/Items/Furniture/Doors/IronGate/G in range(1,src))
					if(G.Type != "Busy")
						G.Type = "Busy"
						G.GateFunctions("Open")
						flick("gate opening",G)
						spawn(12)
							if(G)
								G.icon_state = "gate open"
								G.density = 0
								G.Type = null
				spawn(100)
					for(var/obj/Items/Furniture/Doors/IronGate/G in range(1,src))
						if(G.Type != "Busy" && G.icon_state != "gate")
							G.Type = "Busy"
							G.GateFunctions("Close")
							flick("gate closing",G)
							spawn(12)
								if(G)
									G.icon_state = "gate"
									G.density = 1
									G.Type = null
				return
			if(J == "Close")
				for(var/obj/Items/Furniture/Doors/IronGate/G in range(1,src))
					if(G.Type != "Busy")
						G.Type = "Busy"
						G.GateFunctions("Close")
						flick("gate closing",G)
						spawn(12)
							if(G)
								G.icon_state = "gate"
								G.density = 1
								G.Type = null
				return
		ForgeBurn(var/Time)
			spawn(Time)
				if(src)
					view(src) << "<font color = yellow>The [src] begins to run out of fuel!<br>"
					src.desc = "This Stone Forge seems to be very low on fuel!<br>"
					spawn(500)
						if(src)
							var/Burn = 0
							for(var/obj/Items/Resources/Coal/C in src)
								Burn += 2000
								del(C)
							for(var/obj/Items/Resources/Charcoal/Ch in src)
								Burn += 500
								del(Ch)
							if(Burn >= 1)
								src.ForgeBurn(Burn)
							else
								view(src) << "<font color = red>The [src] burns out!<br>"
								src.desc = "This Stone Forge seems to have been lit recently, but ran out of fuel!<br>"
								src.icon_state = "forge"
								src.Type = "Not Lit"
								return
		RangedMove()
			if(src)
				if(src.Target)
					var/turf/T = src.Target
					step_towards(src,T)
					for(var/atom/A in range(0,src))
						if(ismob(A) && A != src.Owner)
							var/mob/M = A
							if(M.Dead == 0)
								var/mob/Own = src.Owner
								if(M.Target == null)
									M.Target = Own
								if(M.Weapon)
									var/obj/S = M.Weapon
									if(S.Type == "Shield")
										var/Block = 0 + M.Agility / 3 + M.ShieldSkill / 3
										var/Blocks = prob(Block)
										if(Blocks)
											view(6,src) << "<font color = red>[M] blocks the [src] using their [S]!<br>"
											Own.CombatSkillTransfer(M)
											if(M && M.Target == null)
												M.Target = src.Owner
											del(src)
											return
								if(M.Weapon2)
									var/obj/S = M.Weapon2
									if(S.Type == "Shield")
										var/Block = 0 + M.Agility / 3 + M.ShieldSkill / 3
										var/Blocks = prob(Block)
										if(Blocks)
											view(6,src) << "<font color = red>[M] blocks the [src] using their [S]!<br>"
											Own.CombatSkillTransfer(M)
											if(M && M.Target == null)
												M.Target = src.Owner
											del(src)
											return
								var/Dodge = 0 + M.Agility / 2
								var/DodgeMath = 0
								for(var/obj/Items/Armour/Ar in M)
									if(Ar.suffix == "Equip")
										DodgeMath += Ar.Weight / 3
								if(M.Strength <= DodgeMath)
									Dodge -= DodgeMath
								var/Dodges = prob(Dodge)
								if(Dodges && M.Fainted == 0 && M.Stunned == 0)
									view(6,src) << "<font color = red>[M] dodges the [src]!<br>"
									src.suffix = null
									src.Target = null
									Own.CombatSkillTransfer(M)
									if(M && M.Target == null)
										M.Target = src.Owner
									src.Owner = null
									return
								var/Bat = 0 + M.CurrentSkillLevel / 5 + M.Agility / 2.5
								var/BatMath = 0
								for(var/obj/Items/Armour/Ar in M)
									if(Ar.suffix == "Equip")
										BatMath += Ar.Weight / 3
								if(M.Strength <= BatMath)
									Bat -= BatMath
								var/Bats = prob(Bat)
								if(Bats && M.Fainted == 0 && M.Stunned == 0)
									view(6,src) << "<font color = red>[M] bats [src] away!<br>"
									src.suffix = null
									src.Target = null
									Own.CombatSkillTransfer(M)
									if(M && M.Target == null)
										M.Target = src.Owner
									src.Owner = null
									return
								var/Miss = 60 - Own.RangedSkill * 2
								if(Miss <= 5)
									Miss = 5
								var/Misses = prob(Miss)
								if(Misses)
									view(6,src) << "<font color = red>[src] misses its target!<br>"
									src.suffix = null
									src.Target = null
									Own.CombatSkillTransfer(M)
									if(M && M.Target == null)
										M.Target = src.Owner
									src.Owner = null
									return
								view(6,src) << "<font color = red>[src] flies into [M]!<br>"
								src.suffix = null
								if(src.Type >= 1)
									M.ArrowDamage(src.Type,src)
								if(M && M.Target == null)
									M.Target = src.Owner
								var/Gain = 25 - Own.RangedSkill / 3
								if(Gain <= 2)
									Gain = 2
								var/Gains = prob(Gain)
								if(Gains)
									if(Own.RangedSkill <= Own.SkillCap && Own.RangedSkill <= WorldSkillsCap)
										Own.RangedSkill += Own.RangedSkillMulti
								Own.CombatSkillTransfer(M)
								src.Owner = null
								return
						if(isturf(A))
							if(A.density && A.opacity)
								view(6,src) << "<font color = red>[src] hits [A] and breaks!<br>"
								del(src)
								return
					if(src && src.Target in range(0,src))
						src.suffix = null
						src.Owner = null
						return
				else
					src.suffix = null
					src.Owner = null
					return
			spawn(1) src.RangedMove()

		Rot()
			spawn(2000)
				if(src)
					view(src) << "<font color = yellow>The stump rots and falls apart!<br>"
					src.icon = null
					src.Fuel = 0
		SkeletonRaise()
			spawn(rand(300,600))
				if(src)
					var/Rise = 0
					Rise = prob(50)
					if(Rise == 0)
						return
					if(Rise)
						var/HasBones = null
						for(var/obj/Items/Misc/Bones/B in range(0,src))
							if(B.suffix == null)
								HasBones = B
								break
						if(HasBones)
							view(src) << "<font color =purple>[src] begins to shake violently for a moment. Suddenly all the bones around it begin to animate and turn into an undead skeleton!<br>"
							var/mob/NPC/Evil/Undead/Undead_Skeleton/S = new
							S.loc = src.loc
							S.PickUpObjects()
							del(HasBones)
							del(src)
							return
		MoveRand()
			step_rand(src)
			spawn(5) MoveRand()
	Misc
		Night
			icon = 'fx.dmi'
			icon_state = "night"
			layer = 99
		ContainerOverlays
			icon = 'containers.dmi'
			BowlOverlay
				icon_state = "bowl liquid"
		Layer
		MetalLadderUp
			name = "Metal Ladder"
			icon = 'terrain.dmi'
			icon_state = "metal ladder"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 1)
					if(src.z == 3)
						src.GoesTo = locate(src.x,src.y,src.z - 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						view(usr) << "<font color = yellow>[usr] climbs up [src]!<br>"
						usr.loc = src.GoesTo
		SandStoneStairsUp
			name = "Stairs"
			icon = 'terrain.dmi'
			icon_state = "sand stairs up"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 1)
					if(src.z == 3)
						src.GoesTo = locate(src.x,src.y,src.z - 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null)
					if(usr in range(1,src))
						if(usr.CantDoTask)
							usr << "<font color = red>Cant attack that for a while!<br>"
							return
						view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
						usr.Job = "SmashStair"
						usr.CanMove = 0
						usr.CantDoTask = 1
						spawn(150)
							if(usr)
								usr.CantDoTask = 0
						var/LOC = usr.loc
						var/Time = 300 - usr.Agility / 2
						if(Time <= 50)
							Time = 50
						spawn(Time)
							if(usr && src && usr.loc == LOC && usr.Job == "SmashStair" && src.suffix == "Stuck")
								var/DMG = usr.Strength
								var/Holding = 0
								if(usr.Weapon)
									Holding += 1
									var/obj/W = usr.Weapon
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon2 == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(usr.Weapon2)
									Holding += 2
									var/obj/W = usr.Weapon2
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(Holding == 2)
									DMG = DMG / 1.5
								usr.DetermineWeaponSkill()
								if(usr.CurrentSkillLevel)
									DMG = DMG + usr.CurrentSkillLevel / 4
								usr.Job = null
								usr.MovementCheck()
								var/WontDamage = 75 - DMG
								var/CantDamage = prob(WontDamage)
								if(DMG >= 0 && CantDamage != 1)
									src.Dura -= DMG
									if(src.Dura <= 0)
										range(src) << "<font color = red>[src] begins to crumble and fall away as [usr] smashes it!<br>"
										var/obj/Z = new
										if(src.z == 1)
											Z.loc = locate(src.x,src.y,2)
										if(src.z == 3)
											Z.loc = locate(src.x,src.y,1)
										for(var/obj/Misc/StairsDown/S in range(0,Z))
											var/obj/Misc/Hole/H = new
											H.loc = S.loc
											del(S)
										del(Z)
										del(src)
									else
										range(src) << "<font color = red>[src] makes a loud noise as [usr] damages it!<br>"
									return
								else
									range(src) << "<font color = red>[src] makes a loud noise as [usr] tried to damage it!<br>"
									return
							else
								if(usr)
									usr.MovementCheck()
						return
		StairsUp
			name = "Stairs"
			icon = 'terrain.dmi'
			icon_state = "stairs up"
			suffix = "Stuck"
			Dura = 300
			New()
				spawn(1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 1)
					if(src.z == 3)
						src.GoesTo = locate(src.x,src.y,src.z - 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null)
					if(usr in range(1,src))
						if(usr.CantDoTask)
							usr << "<font color = red>Cant attack that for a while!<br>"
							return
						view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
						usr.Job = "SmashStair"
						usr.CanMove = 0
						usr.CantDoTask = 1
						spawn(150)
							if(usr)
								usr.CantDoTask = 0
						var/LOC = usr.loc
						var/Time = 300 - usr.Agility / 2
						if(Time <= 50)
							Time = 50
						spawn(Time)
							if(usr && src && usr.loc == LOC && usr.Job == "SmashStair" && src.suffix == "Stuck")
								var/DMG = usr.Strength
								var/Holding = 0
								if(usr.Weapon)
									Holding += 1
									var/obj/W = usr.Weapon
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon2 == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(usr.Weapon2)
									Holding += 2
									var/obj/W = usr.Weapon2
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(Holding == 2)
									DMG = DMG / 1.5
								usr.DetermineWeaponSkill()
								if(usr.CurrentSkillLevel)
									DMG = DMG + usr.CurrentSkillLevel / 4
								usr.Job = null
								usr.MovementCheck()
								var/WontDamage = 75 - DMG
								var/CantDamage = prob(WontDamage)
								if(DMG >= 0 && CantDamage != 1)
									src.Dura -= DMG
									if(src.Dura <= 0)
										range(src) << "<font color = red>[src] begins to crumble and fall away as [usr] smashes it!<br>"
										var/obj/Z = new
										if(src.z == 1)
											Z.loc = locate(src.x,src.y,2)
										if(src.z == 3)
											Z.loc = locate(src.x,src.y,1)
										for(var/obj/Misc/StairsDown/S in range(0,Z))
											var/obj/Misc/Hole/H = new
											H.loc = S.loc
											del(S)
										del(Z)
										del(src)
									else
										range(src) << "<font color = red>[src] makes a loud noise as [usr] damages it!<br>"
									return
								else
									range(src) << "<font color = red>[src] makes a loud noise as [usr] tried to damage it!<br>"
									return
							else
								if(usr)
									usr.MovementCheck()
						return
		SewerGrate
			name = "Sewer Grate"
			icon = 'terrain.dmi'
			icon_state = "sewer entrance"
			Type = "Sewer"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 2)
						src.GoesTo = locate(src.x,src.y,src.z - 1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						view(usr) << "<font color = yellow>[usr] lifts up the [src] and climbs down!<br>"
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
		RailTracks
			icon = 'tools.dmi'
			icon_state = "tracks"
			suffix = "Stuck"
		HoleUp
			name = "Hole"
			icon = 'terrain.dmi'
			icon_state = "hole2"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 1)
					if(src.z == 3)
						src.GoesTo = locate(src.x,src.y,src.z - 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
		HoleDown
			name = "Hole"
			icon = 'terrain.dmi'
			icon_state = "hole"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 2)
						src.GoesTo = locate(src.x,src.y,src.z - 1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
		Marker
			icon = 'misc.dmi'
			icon_state = "marker"
			New()
				spawn(9)
					src.RandomItem()
		Hole
			name = "Hole"
			icon = 'Hole.dmi'
			icon_state = "hole"
			suffix = "Stuck"
			density = 1
			Type = "Hole"
			New()
				spawn(1)
					if(src.z == 2)
						src.GoesTo = locate(src.x,src.y,src.z - 1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 2)
			Click()
				if(src in range(1,usr))
					if(usr.Dead)
						if(src in range(1,usr))
							usr.loc = src.GoesTo
					if(usr.Function == "Interact" && usr.Job == null)
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "Shovel")
								if(O.Type != "LargeBrick")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Four Large Bricks in order to create stone stairs!<br>"
									return
								var/BrickNum = 0
								var/Bricks = list()
								for(var/obj/Items/Resources/LargeBrick/B in usr)
									if(BrickNum != 4)
										BrickNum += 1
										Bricks += B
								if(BrickNum != 4)
									usr << "<font color = red>You need Four Large Bricks in order to create stone stairs!<br>"
									return
								if(BrickNum == 4 && O.Type == "LargeBrick")
									var/LOC = usr.loc
									usr.Job = "CreateStoneStair"
									usr.CanMove = 0
									var/Time = 300 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a stone stairs!<br>"
									spawn(Time)
										if(usr)
											if(Bricks && usr.loc == LOC)
												BrickNum = 0
												Bricks = null
												Bricks = list()
												for(var/obj/Items/Resources/LargeBrick/B in usr)
													if(BrickNum != 4)
														BrickNum += 1
														Bricks += B
												if(BrickNum == 4 && O && usr.Job == "CreateStoneStair")
													var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a stone stairs!<br>"
														for(var/obj/I in Bricks)
															if(BrickNum != 0)
																BrickNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.MasonarySkill += usr.MasonarySkillMulti / 2
														usr.BuildingSkill += usr.BuildingSkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/Misc/StairsDown/S = new
													S.loc = src.loc
													S.Dura += usr.BuildingSkill
													S.Dura += usr.MasonarySkill
													var/obj/X = new
													if(S.z == 1)
														X.loc = locate(S.x,S.y,3)
													if(S.z == 2)
														X.loc = locate(S.x,S.y,1)
													var/CanPlace = 1
													for(var/obj/Q in X.loc)
														if(Q.GoesTo)
															CanPlace = 0
													if(CanPlace)
														var/obj/Misc/StairsUp/D = new
														D.loc = X.loc
													del(X)
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating a stone stairs!<br>"
													del(src)
													return
												else
													usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
													usr.Job = null
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
									return
					if(usr.Function == "Interact")
						switch(alert("Climb down Hole or Fill in?",,"Cancel","Climb Down","Fill"))
							if("Climb Down")
								if(src in range(1,usr))
									if(usr.Fainted == 0 && usr.Stunned == 0)
										view(6,usr) << "<font color = yellow>[usr] climbs down the Hole carefully.<br>"
										usr.loc = src.GoesTo
									return
							if("Fill")
								if(usr.Job == "Fill")
									return
								var/obj/O = null
								if(usr.Ref)
									O = usr.Ref
								var/Dig = 0
								if(O)
									if(O.Type == "Shovel")
										Dig = 1
								if(usr.Race == "Ratling")
									Dig = 1
								if(Dig)
									if(src in range(1,usr))
										view() << "<font color=yellow>[usr] begins to fill in the Hole!<br>"
										usr.Job = "Fill"
										usr.CanMove = 0
										var/Time = 300 - usr.MiningSkill * 2
										if(Time <= 50)
											Time = 50
										spawn(Time)
											if(usr)
												if(src in range(1,usr))
													if(usr.Job == "Fill" && usr.CantDoTask == 0)
														usr.Job = null
														usr.MiningSkill += usr.MiningSkillMulti / 2
														usr.GainStats(3)
														view() << "<font color=yellow>[usr] finishes filling in the Hole!<br>"
														usr.MovementCheck()
														if(O)
															O.Dura -= rand(0.5,1)
															usr.CheckWeaponDura(O)
														usr.CheckHole(src,"Fill")
														del(src)
								else
									usr << "<font color = red>You'll need to Interact with a Shovel to fill this Hole in!<br>"
									return
		SandStoneStairsDown
			name = "Stairs"
			icon = 'terrain.dmi'
			icon_state = "sand stairs down"
			suffix = "Stuck"
			New()
				spawn(1)
					if(src.z == 2)
						src.GoesTo = locate(src.x,src.y,src.z - 1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null)
					if(usr in range(1,src))
						if(usr.CantDoTask)
							usr << "<font color = red>Cant attack that for a while!<br>"
							return
						view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
						usr.Job = "SmashStair"
						usr.CanMove = 0
						usr.CantDoTask = 1
						spawn(150)
							if(usr)
								usr.CantDoTask = 0
						var/LOC = usr.loc
						var/Time = 300 - usr.Agility / 2
						if(Time <= 50)
							Time = 50
						spawn(Time)
							if(usr && src && usr.loc == LOC && usr.Job == "SmashStair" && src.suffix == "Stuck")
								var/DMG = usr.Strength
								var/Holding = 0
								if(usr.Weapon)
									Holding += 1
									var/obj/W = usr.Weapon
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon2 == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(usr.Weapon2)
									Holding += 2
									var/obj/W = usr.Weapon2
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(Holding == 2)
									DMG = DMG / 1.5
								usr.DetermineWeaponSkill()
								if(usr.CurrentSkillLevel)
									DMG = DMG + usr.CurrentSkillLevel / 4
								usr.Job = null
								usr.MovementCheck()
								var/WontDamage = 75 - DMG
								var/CantDamage = prob(WontDamage)
								if(DMG >= 0 && CantDamage != 1)
									src.Dura -= DMG
									if(src.Dura <= 0)
										range(src) << "<font color = red>[src] begins to crumble and fall away as [usr] smashes it!<br>"
										var/obj/Z = new
										if(src.z == 1)
											Z.loc = locate(src.x,src.y,2)
										if(src.z == 3)
											Z.loc = locate(src.x,src.y,1)
										for(var/obj/Misc/StairsDown/S in range(0,Z))
											var/obj/Misc/Hole/H = new
											H.loc = S.loc
											del(S)
										del(Z)
										del(src)
									else
										range(src) << "<font color = red>[src] makes a loud noise as [usr] damages it!<br>"
									return
								else
									range(src) << "<font color = red>[src] makes a loud noise as [usr] tried to damage it!<br>"
									return
							else
								if(usr)
									usr.MovementCheck()
						return
		StairsDown
			name = "Stairs"
			icon = 'terrain.dmi'
			icon_state = "stairs down"
			suffix = "Stuck"
			Dura = 300
			New()
				spawn(1)
					if(src.z == 2)
						src.GoesTo = locate(src.x,src.y,src.z - 1)
					if(src.z == 1)
						src.GoesTo = locate(src.x,src.y,src.z + 2)
			Click()
				if(usr.Dead)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
				if(usr.Function == "Interact" && usr.Fainted == 0)
					if(src in range(1,usr))
						usr.loc = src.GoesTo
						usr.overlays -= /obj/Misc/Bubbles/
						usr.overlays -= /obj/Misc/Swim/
						usr.InWater = 0
				if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null)
					if(usr in range(1,src))
						if(usr.CantDoTask)
							usr << "<font color = red>Cant attack that for a while!<br>"
							return
						view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
						usr.Job = "SmashStair"
						usr.CanMove = 0
						usr.CantDoTask = 1
						spawn(150)
							if(usr)
								usr.CantDoTask = 0
						var/LOC = usr.loc
						var/Time = 300 - usr.Agility / 2
						if(Time <= 50)
							Time = 50
						spawn(Time)
							if(usr && src && usr.loc == LOC && usr.Job == "SmashStair" && src.suffix == "Stuck")
								var/DMG = usr.Strength
								var/Holding = 0
								if(usr.Weapon)
									Holding += 1
									var/obj/W = usr.Weapon
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon2 == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(usr.Weapon2)
									Holding += 2
									var/obj/W = usr.Weapon2
									if(W.ObjectTag == "Weapon")
										DMG += W.Weight / 2
										DMG += rand(W.Dura / 2,W.Dura)
										W.Dura -= rand(0.1,2)
										if(W.ObjectType == "Blunt")
											DMG += 10
										if(W.TwoHander && usr.Weapon == null)
											DMG += W.Weight / 2
										usr.CheckWeaponDura(W)
								if(Holding == 2)
									DMG = DMG / 1.5
								usr.DetermineWeaponSkill()
								if(usr.CurrentSkillLevel)
									DMG = DMG + usr.CurrentSkillLevel / 4
								usr.Job = null
								usr.MovementCheck()
								var/WontDamage = 75 - DMG
								var/CantDamage = prob(WontDamage)
								if(DMG >= 0 && CantDamage != 1)
									src.Dura -= DMG
									if(src.Dura <= 0)
										range(src) << "<font color = red>[src] begins to crumble and fall away as [usr] smashes it!<br>"
										var/obj/Z = new
										if(src.z == 1)
											Z.loc = locate(src.x,src.y,3)
										if(src.z == 3)
											Z.loc = locate(src.x,src.y,2)
										for(var/obj/Misc/StairsUp/S in range(0,Z))
											del(S)
										var/obj/Misc/Hole/H = new
										H.loc = src.loc
										del(Z)
										del(src)
									else
										range(src) << "<font color = red>[src] makes a loud noise as [usr] damages it!<br>"
									return
								else
									range(src) << "<font color = red>[src] makes a loud noise as [usr] tried to damage it!<br>"
									return
							else
								if(usr)
									usr.MovementCheck()
						return
		SpellEffects
			icon = 'fx.dmi'
			AstralShield
				icon_state = "astral shield"
				layer = 7
			Dispel
				icon_state = "dispel"
			Evil
				icon_state = "evil"
		SpellText
			layer = 101
			icon = 'books.dmi'
		Spells
			icon = 'books.dmi'
			layer = 101
			SoulEnslavement
				icon_state = "soul enslavement"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			InflictVampirism
				icon_state = "vampirism"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			EverDark
				icon_state = "everdark"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			CreatePlague
				icon_state = "plague"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			DeadRising
				icon_state = "dead rising"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			RaiseDead
				icon_state = "undead"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			LichCraft
				icon_state = "lichcraft"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
			RaiseSkeleton
				icon_state = "skeleton"
				WrittenIn = "DarkTongue"
				MagicUsed = "Necromancy"
				SpellEffect = "Raise Skeleton"
				desc = ".:<u>To Raise a Skeleton</u>:.<p>In order to raise a Skelatal Minion, One set of Bones and One Skull is required. Once you have both of these, a Pentagram is needed. Place the Bones into the middle and speak the words,"
				New()
					var/First = list("Ni'","Rak'","Vark'","Na'","Blek'","Vod'","Gra'","Qul'","Thal'","Tra'","Wes'","Dra'","Fru'","Nar'")
					var/Second = list("tar","thos","palk","ekk","ukk","ektus","tius","urk","dar","pak","tras","rakka","tor","drel")
					var/Third = list("Ni'","Thar'","Lark'","Ra'","Vlek'","Bod'","Pra'","Aul'","Ahal'","Era'","Tes'","Bra'","Uru'","Qar'")
					var/Forth = list("mar","phos","valk","ukk","ekk","ektus","vius","urk","par","wak","pras","takka","mor","brel")
					var/Word = null
					for(var/T in First)
						var/Choose = prob(20)
						if(Choose)
							Word = "[T]"
							break
					for(var/T in Second)
						var/Choose = prob(20)
						if(Choose)
							Word = "[Word][T]"
							break
					for(var/T in Third)
						var/Choose = prob(20)
						if(Choose)
							Word = "[Word] [T]"
							break
					for(var/T in Forth)
						var/Choose = prob(20)
						if(Choose)
							Word = "[Word][T]"
							break
					src.SpellWords = "[Word]"
					src.desc = "[src.desc][src.SpellWords]"
				Click()
					if(usr.Function == "Examine" && usr.CanSee && usr.UsingBook && usr.Fainted == 0 && usr.Stunned == 0 && src in usr.client.screen)
						usr << "<font color = teal>You begin to Examine the [src] spell...<br>"
						spawn(100)
							if(src && usr.CanSee && usr.UsingBook && src in usr.client.screen)
								var/obj/Know = null
								for(var/obj/Misc/Languages/L in usr.LangKnow)
									if(L.name == src.WrittenIn && L.WritePercent >= 0)
										Know = L
								if(Know)
									usr << "<font color = teal>This Spell seems to be written in [src.WrittenIn]. You are able to understand [Know.WritePercent]% Written [src.WrittenIn] currently.<br>"
								else
									usr << "<font color = teal>You have no idea what Language it is written in.<br>"
								var/TextLength = lentext(src.desc)
								var/Text = null
								var/NewText = null
								while(TextLength >= 1)
									Text ="[copytext(src.desc,(lentext(src.desc)-TextLength)+1,(lentext(src.desc)-TextLength)+2)]"
									var/Change = 0
									var/Changes = 0
									if(Know)
										Changes += Know.WritePercent + usr.Intelligence / 10
										if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
											usr.Intelligence += usr.IntelligenceMulti / 4
									Change = prob(100 - Changes)
									if(Change)
										usr.CheckText(Text)
										NewText+="[usr.TextOutput]"
										usr.TextOutput = null
									if(Change == 0)
										NewText+="[copytext(src.desc,(lentext(src.desc)-TextLength)+1,(lentext(src.desc)-TextLength)+2)]"
									TextLength--
								usr << "<font color = teal>You attempt to read the spell in your head.<p>[NewText]<br>"
								return
			AfterLife
				icon_state = "afterlife"
				WrittenIn = "DarkTongue"
			SummonWraith
				icon_state = "wraith"
				WrittenIn = "DarkTongue"
			SummonGhost
				icon_state = "ghost"
				WrittenIn = "DarkTongue"
			CreateCorpseDevourer
				icon_state = "corpse devourer"
				WrittenIn = "DarkTongue"
		OtherWorldly
			AstralStrand
				icon = 'terrain.dmi'
				icon_state = "astral strand"
				New()
					var/D = rand(1,4)
					if(D == 1)
						src.dir = NORTH
					if(D == 2)
						src.dir = SOUTH
					if(D == 3)
						src.dir = EAST
					if(D == 4)
						src.dir = WEST
			AstralStrands
				icon = 'terrain.dmi'
				icon_state = "astral strands"
				New()
					var/D = rand(1,8)
					if(D == 1)
						src.dir = NORTH
					if(D == 2)
						src.dir = SOUTH
					if(D == 3)
						src.dir = EAST
					if(D == 4)
						src.dir = WEST
					if(D == 5)
						src.dir = NORTHWEST
					if(D == 6)
						src.dir = NORTHEAST
					if(D == 7)
						src.dir = SOUTHWEST
					if(D == 8)
						src.dir = SOUTHEAST
			ChaosEnergy
				icon = 'fx.dmi'
				icon_state = "chaos energy"
				layer = 5
				New()
					MoveRand()
					spawn(30)
						if(src)
							del(src)
		Smoke
			icon = 'fx.dmi'
			icon_state = "smoke"
			layer = 7
			New()
				src.dir = NORTH
				MoveRand()
				spawn(30)
					if(src)
						del(src)
		Gates
			AstralGate
				icon = 'fx.dmi'
				icon_state = "astral gate"
				luminosity = 3
				suffix = "Stuck"
				New()
					spawn(300)
						if(src)
							view(6,src) << "<font color = yellow>[src] slams shut and vanishes!<br>"
							del(src)
				Click()
					if(usr.Function == "Interact")
						if(src.GoesTo && usr.Fainted == 0)
							view(6,usr) << "<font color = yellow>[usr] enters the [src]!<br>"
							usr.loc = src.GoesTo
							view(6,usr) << "<font color = yellow>[usr] appears from the [src]!<br>"
							usr.overlays -= /obj/Misc/Bubbles/
							usr.overlays -= /obj/Misc/Swim/
							usr.InWater = 0
							return
			ChaosGate
				icon = 'fx.dmi'
				icon_state = "chaos gate"
				suffix = "Stuck"
				New()
					spawn(1)
						src.ChaosGate()
						src.CreateChaos()
			BloodGate
				icon = 'fx.dmi'
				icon_state = "blood portal"
				suffix = "Stuck"
		Target
			icon = 'Target.dmi'
			pixel_y = 32
			layer = 10
		Target
			icon = 'target.dmi'
			layer = 10
		Swim
			icon = 'terrain.dmi'
			icon_state = "swim"
			layer = 10
		Bubbles
			icon = 'terrain.dmi'
			icon_state = "bubbles"
			layer = 10
			pixel_y = 32
		Fire
			icon = 'fx.dmi'
			icon_state = "burning"
			layer = 5
		FireLarge
			icon = 'fx.dmi'
			icon_state = "fire"
			layer = 4
		LiquidSplatter
			icon = 'ingredients.dmi'
			icon_state = "liquid splatter"
			layer = 4
			New()
				spawn(3000)
					if(src)
						del(src)
		Sleeping
			icon = 'misc.dmi'
			icon_state = "sleep"
			layer = 5
		Gore
			icon = 'gore.dmi'
			FleshBeastCorpse
				icon = 'corpses.dmi'
				icon_state = "flesh beast corpse right"
				pixel_x = 32
			DrakeCorpse
				icon = 'corpses.dmi'
				icon_state = "drake corpse right"
				pixel_x = 32
			TrollCorpse
				icon = 'corpses.dmi'
				icon_state = "troll corpse right"
				pixel_x = 32
			YetiCorpse
				icon = 'corpses.dmi'
				icon_state = "yeti corpse right"
				pixel_x = 32
			GiantSnakeCorpse
				icon = 'corpses.dmi'
				icon_state = "giant snake corpse right"
				pixel_x = 32
			HeadWound
				icon_state = "damage head"
				layer = 4
			TorsoWound
				icon_state = "damage torso"
				layer = 4
			RightArmWound
				icon_state = "damage rarm"
				layer = 4
			LeftArmWound
				icon_state = "damage larm"
				layer = 4
			RightLegWound
				icon_state = "damage rleg"
				layer = 4
			LeftLegWound
				icon_state = "damage lleg"
				layer = 4
			BloodSplat
				icon_state = "floor small1"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					var/I = rand(1,5)
					src.icon_state = "floor small[I]"
					spawn(10000)
						if(src)
							del(src)
			GreenBloodSplat
				icon_state = "green floor1"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					var/I = rand(1,5)
					src.icon_state = "green floor[I]"
					spawn(10000)
						if(src)
							del(src)
			BloodTrail
				icon_state = "blood trail"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					spawn(2000)
						if(src)
							del(src)
			BloodPuddle
				icon_state = "floor puddle"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					spawn(10000)
						if(src)
							del(src)
			Puke
				icon_state = "Puke"
				suffix = "Stuck"
				New()
					spawn(10000)
						if(src)
							del(src)
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some sick!<br>"
							del(src)
							return
			GreenWallBloodSplat
				icon_state = "green wall1"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					var/I = rand(1,5)
					src.icon_state = "green wall[I]"
					spawn(10000)
						if(src)
							del(src)
			WallBloodSplat
				icon_state = "wall small1"
				suffix = "Stuck"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							view(usr) << "<b>[usr] wipes away some blood!<br>"
							del(src)
							return
				New()
					var/I = rand(1,5)
					src.icon_state = "wall small[I]"
					spawn(10000)
						if(src)
							del(src)
			WallBloodSplatLarge
				suffix = "Stuck"
				icon_state = "wall"
		Weather
			icon = 'fx.dmi'
			Night
				layer = 10
				icon_state = "night"
			Rain
				layer = 10
				icon_state = "rain"
			Snow
				layer = 10
				icon_state = "snow"
			LighteningBolt
				layer = 10
				icon_state = "lighteningbolt"
			LighteningHit
				layer = 10
				icon_state = "lighteninghit"
				luminosity = 5
				New()
					var/obj/Misc/Weather/LighteningBolt/LB = new
					LB.pixel_y = 32
					src.overlays += LB

					var/obj/Misc/Weather/LighteningBolt/LB2 = new
					LB2.pixel_y = 64
					src.overlays += LB2
					spawn(10)
						if(src)
							del(src)
		Contact
		Admins
		Languages
			Common
				name = "Common"
			Ancient
				name = "Ancient"
			Demonic
				name = "Demonic"
			DarkTongue
				name = "DarkTongue"
			Human
				name = "Human"
			Altherian
				name = "Altherian"
			Stahliteian
				name = "Stahliteian"
			Slithus
				name = "Slithus"
			Wolfen
				name = "Wolfen"
			Scutter
				name = "Scutter"
			Ribbitus
				name = "Ribbitus"
		Beards
			icon = 'hair.dmi'
			layer = 4.9
			StahliteBeard
				icon_state = "dwarf beard 1"
			HumanoidBeard
				icon_state = "beard 1"
		Hairs
			icon = 'hair.dmi'
			layer = 4.8
			HairLeft
				icon_state = "side L 1"
			HairRight
				icon_state = "side R 1"
			Middle
				icon_state = "middle 1"
			PotHead
				icon_state = "pot head 1"
			Long
				icon_state = "long hair 1"
			GiantHairMale
				icon_state = "giant hair male 1"
			GiantHairFemale
				icon_state = "giant hair female 1"
			SmallHairFemale
				icon_state = "small hair female 1"
		CombatOverlays
			icon = 'fx.dmi'
			pixel_y = 32
			Hit
				icon_state = "Hit"
				layer = 8
			Block
				icon_state = "Block"
				layer = 8
			Dodge
				icon_state = "Dodge"
				layer = 8
			Head
				icon_state = "Head"
				layer = 8
			Torso
				icon_state = "Torso"
				layer = 8
			LeftLeg
				icon_state = "L Leg"
				layer = 8
			RightLeg
				icon_state = "R Leg"
				layer = 8
			RightArm
				icon_state = "R Arm"
				layer = 8
			LeftArm
				icon_state = "L Arm"
				layer = 8
	Items
		Traps
			icon = 'traps.dmi'
			SpikedBall
				icon_state = "spiked ball"
				Type = "Spiked Ball"
			SandStonePressurePlate
				name = ""
				Type = "Pressure Plate"
				icon_state = "pressure plate2"
				New()
					spawn(1)
						for(var/obj/Items/Traps/T in orange(4,src))
							if(src.Ref == null)
								src.Ref = T
					src.PressurePlateTrap()
		Weapons
			layer = 5
			ObjectTag = "Weapon"
			BaseMaterial = "Metal"
			ItemLayer = 7
			Ranged
				ObjectType = "Ranged"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 300 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.CurrentHand == "Right")
									if(usr.RightArm <= 25)
										usr << "<font color = red>Your right arm is damaged!<br>"
										return
									if(usr.Weapon2)
										var/obj/W = usr.Weapon2
										if(W.ObjectType == "Ranged")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
										if(W.Type == "Shield")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
									if(usr.Weapon == null)
										src.layer = 5
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.Weapon = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
								if(usr.CurrentHand == "Left")
									if(usr.LeftArm <= 25)
										usr << "<font color = red>Your left arm is damaged!<br>"
										return
									if(usr.Weapon)
										var/obj/W = usr.Weapon
										if(W.ObjectType == "Ranged")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
										if(W.Type == "Shield")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
									if(usr.Weapon2 == null)
										src.layer = 5
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = "[src.EquipState] left"
										usr.Weapon2 = src
										usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									src.overlays+=image(/obj/HUD/C/)
									usr.Weight += src.Weight
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				WoodenBow
					icon = 'weapons.dmi'
					icon_state = "bow equip"
					EquipState = "bow equip"
					CarryState = "bow"
					DamageType = "Blunt"
					Weight = 4
					ItemLayer = 7
					Dura = 100
					Quality = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				Bow
					icon = 'weapons.dmi'
					icon_state = "bow"
					EquipState = "bow"
					CarryState = "bow"
					DamageType = "Blunt"
					ItemLayer = 7
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Spears
				ObjectType = "Spear"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.Weapon == null)
										if(usr.Weapon2)
											var/HasShield = 0
											if(istype(usr.Weapon2,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.RightArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = src.EquipState
											usr.Weapon = src
											usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
								if(usr.CurrentHand == "Left")
									if(usr.Weapon2 == null)
										if(usr.Weapon)
											var/HasShield = 0
											if(istype(usr.Weapon,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.LeftArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = "[src.EquipState] left"
											usr.Weapon2 = src
											usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									src.overlays+=image(/obj/HUD/C/)
									usr.Weight += src.Weight
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				Trident
					icon = 'weapons.dmi'
					icon_state = "Iron trident equip"
					EquipState = "Iron trident equip"
					CarryState = "Iron trident"
					DamageType = "Slash"
					Weight = 5
					Dura = 1000
					Quality = 10
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Spear
					icon = 'weapons.dmi'
					icon_state = "spear"
					EquipState = "spear"
					CarryState = "spear"
					CanBeCrafted = 1
					TwoHander = 1
					Weight = 4
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Blunts
				ObjectType = "Blunt"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
						return
					if(usr.Function == "Interact" && usr.Ref)
						if(isobj(usr.Ref))
							var/obj/O = usr.Ref
							if(O.Material == "Stone")
								if(src.suffix != "Equip")
									usr << "<font color = red>Equip the Hammer before continuing!<br>"
									return
								if(src.Dura <= 1)
									usr << "<font color = red>The Hammer is Broken, you can not do this job!<br>"
									return
								usr.MovementCheck()
								if(usr.CanMove)
									usr.CreateMasonaryMenu(O)
								return
							if(O.Type == "Ingot")
								if(src.suffix != "Equip")
									usr << "<font color = red>Equip the Hammer before continuing!<br>"
									return
								if(src.Dura <= 1)
									usr << "<font color = red>The Hammer is broken!<br>"
									return
								var/NearForge = null
								var/NearAnvil = null
								for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
									if(NearForge == null)
										if(F.Type == "Lit")
											NearForge = F
											break
										else
											usr << "<font color = red>The near by Forge is not lit!<br>"
								for(var/obj/Items/Misc/Anvil/A in range(1,usr))
									NearAnvil = A
								if(NearForge && NearAnvil && usr.Job == null)
									usr.MovementCheck()
									if(usr.CanMove)
										usr.CreateForgeMenu(O)
									return
								else
									usr << "<font color = red>Need to be near both a Forge and Anvil!<br>"
							else
								if(O.Dura <= 33 && O.Material)
									if(src.suffix != "Equip")
										usr << "<font color = red>Equip the Hammer before continuing!<br>"
										return
									if(src.Dura <= 1)
										usr << "<font color = red>The Hammer is broken!<br>"
										return
									var/CanRepair = 0
									if(O.ObjectTag == "Weapon")
										CanRepair = 1
									if(O.ObjectTag == "Armour")
										CanRepair = 1
									if(CanRepair)
										var/NearForge = null
										var/NearAnvil = null
										for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
											if(NearForge == null)
												if(F.Type == "Lit")
													NearForge = F
													break
												else
													usr << "<font color = red>The near by Forge is not lit!<br>"
										for(var/obj/Items/Misc/Anvil/A in range(1,usr))
											NearAnvil = A
										if(NearForge && NearAnvil && usr.Job == null)
											view(usr) << "<font color = yellow>[usr] begins to repair the [O]!<br>"
											usr.Job = "Repair"
											var/LOC = usr.loc
											var/Time = 250 - usr.ForgingSkill * 2 + usr.Strength / 2
											spawn(Time)
												if(usr)
													if(O && usr.Job == "Repair" && usr.loc == LOC)
														if(O in usr)
															var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 2 - usr.Agility / 2)
															var/NF = 0
															var/NA = 0
															for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
																if(F.Type == "Lit")
																	NF = 1
															for(var/obj/Items/Misc/Anvil/A in range(1,usr))
																NA = 1
															if(NF)
																if(NA)
																	usr.Job = null
																	usr.MovementCheck()
																	if(Fail)
																		var/DMG = prob(50)
																		if(DMG)
																			DMG = "They damage it slightly"
																		view(usr) << "<font color = yellow>[usr] fails at repairing the [O]! [DMG] Quality removed.<br>"
																		if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																			usr.ForgingSkill += usr.ForgingSkillMulti / 4
																		usr.GainStats(3)
																		if(DMG)
																			if(O.ObjectTag == "Armour" && O.Defence >= 1)
																				O.Defence -= rand(1,3)
																			if(O.ObjectTag == "Weapon" && O.Quality >= 1)
																				O.Quality -= rand(1,3)
																		return
																	O.Dura += usr.ForgingSkill * 2 + usr.Strength + 2
																	if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																		usr.ForgingSkill += usr.ForgingSkillMulti
																	usr.GainStats(3)
																	view(usr) << "<font color = yellow>[usr] finishes repairing the [O] !<br>"
																	return
																else
																	usr << "<font color = red>The Anvil was moved, or you moved away from it, repair failed!<br>"
																	usr.MovementCheck()
																	return
															else
																usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, repair failed!<br>"
																usr.MovementCheck()
																return
														else
															usr.MovementCheck()
															return
													else
														usr.MovementCheck()
														return
						return
					if(usr.Function == "Interact" && usr.Ref == null)
						if(src.Type == "Shovel")
							usr << "<font color=green>Double Click turf to dig!<br>"
						else
							usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.Weapon == null)
										if(usr.Weapon2)
											var/HasShield = 0
											if(istype(usr.Weapon2,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.RightArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = src.EquipState
											usr.Weapon = src
											usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
								if(usr.CurrentHand == "Left")
									if(usr.Weapon2 == null)
										if(usr.Weapon)
											var/HasShield = 0
											if(istype(usr.Weapon,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.LeftArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = "[src.EquipState] left"
											usr.Weapon2 = src
											usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				InquisitorsMaul
					icon = 'weapons.dmi'
					icon_state = "inquisitor maul2"
					EquipState = "inquisitor maul2"
					CarryState = "inquisitor maul"
					DamageType = "Blunt"
					Weight = 25
					Type = "Hammer"
					Dura = 100
					ItemLayer = 7
					Quality = 18
					TwoHander = 1
					Delete = 1
					Material = "Silver"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsStaff
					icon = 'weapons.dmi'
					icon_state = "inquisitor staff2"
					EquipState = "inquisitor staff2"
					CarryState = "inquisitor staff"
					DamageType = "Blunt"
					Weight = 15
					ItemLayer = 7
					Dura = 100
					Quality = 15
					Delete = 1
					TwoHander = 1
					Material = "Silver"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Hammer
					icon = 'tools.dmi'
					icon_state = "hammer"
					EquipState = "hammer"
					CarryState = "hammer"
					DamageType = "Blunt"
					Type = "Hammer"
					CanBeCrafted = 1
					Quality = 5
					Weight = 5
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Shovel
					icon = 'tools.dmi'
					icon_state = "shovel"
					EquipState = "shovel"
					CarryState = "shovel"
					DamageType = "Blunt"
					Type = "Shovel"
					CanBeCrafted = 1
					TwoHander = 1
					Weight = 4
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Mace2
					name = "Mace"
					icon = 'weapons.dmi'
					icon_state = "mace2"
					EquipState = "mace2"
					CarryState = "mace2"
					DamageType = "Blunt"
					CanBeCrafted = 1
					Weight = 6
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Mace
					icon = 'weapons.dmi'
					icon_state = "mace"
					EquipState = "mace"
					CarryState = "mace"
					DamageType = "Blunt"
					CanBeCrafted = 1
					Weight = 6
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Maul
					icon = 'weapons.dmi'
					icon_state = "maul"
					EquipState = "maul"
					CarryState = "maul"
					DamageType = "Blunt"
					CanBeCrafted = 1
					TwoHander = 1
					BaseMaterial = "Metal"
					Weight = 8
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Maul2
					name = "Maul"
					icon = 'weapons.dmi'
					icon_state = "maul2"
					EquipState = "maul2"
					CarryState = "maul2"
					DamageType = "Blunt"
					CanBeCrafted = 1
					TwoHander = 1
					Weight = 8
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Axes
				ObjectType = "Axe"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 250 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.Weapon == null)
										if(usr.Weapon2)
											var/HasShield = 0
											if(istype(usr.Weapon2,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.RightArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = src.EquipState
											usr.Weapon = src
											usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
								if(usr.CurrentHand == "Left")
									if(usr.Weapon2 == null)
										if(usr.Weapon)
											var/HasShield = 0
											if(istype(usr.Weapon,/obj/Items/Armour/Shields/))
												HasShield = 1
											if(HasShield == 0)
												return
										if(usr.LeftArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = "[src.EquipState] left"
											usr.Weapon2 = src
											usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				PickAxe
					icon = 'tools.dmi'
					icon_state = "pickaxe"
					EquipState = "pickaxe"
					CarryState = "pickaxe"
					Type = "PickAxe"
					DamageType = "Blunt"
					ItemLayer = 7
					CanBeCrafted = 1
					Quality = 5
					TwoHander = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Hatchet
					icon = 'tools.dmi'
					icon_state = "hatchet"
					EquipState = "hatchet"
					CarryState = "hatchet"
					Type = "Hatchet"
					ItemLayer = 7
					CanBeCrafted = 1
					Quality = 5
					Weight = 5
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				BattleAxe
					icon = 'weapons.dmi'
					icon_state = "doubleaxe"
					EquipState = "doubleaxe"
					CarryState = "doubleaxe"
					ItemLayer = 7
					CanBeCrafted = 1
					TwoHander = 1
					Weight = 8
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Daggers
				ObjectType = "Dagger"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Interact" && usr.Ref)
						if(isobj(usr.Ref))
							var/obj/O = usr.Ref
							if(O.Material == "Leather")
								if(src.suffix != "Equip")
									usr << "<font color = red>Equip the Dagger before continuing!<br>"
									return
								if(src.Dura <= 1)
									usr << "<font color = red>The Dagger is Broken, you can not do this job!<br>"
									return
								usr.MovementCheck()
								if(usr.CanMove)
									usr.CreateLeatherMenu(O)
								return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.Weapon == null)
										if(usr.Weapon2)
											var/obj/W = usr.Weapon2
											if(W.ObjectTag == "Weapon" && W.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
										if(usr.RightArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = src.EquipState
											usr.Weapon = src
											usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
								if(usr.CurrentHand == "Left")
									if(usr.Weapon2 == null)
										if(usr.Weapon)
											var/obj/W = usr.Weapon
											if(W.ObjectTag == "Weapon" && W.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
										if(usr.LeftArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = "[src.EquipState] left"
											usr.Weapon2 = src
											usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				Dagger
					icon = 'weapons.dmi'
					icon_state = "dagger"
					EquipState = "dagger"
					CarryState = "dagger"
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Scissor
					icon = 'tools.dmi'
					icon_state = "scissors"
					EquipState = "scissors"
					CarryState = "scissors"
					Type = "CutsHair"
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Swords
				ObjectType = "Sword"
				Click()
					if(usr.Function == "Interact" && usr.Ref)
						if(isobj(usr.Ref))
							var/obj/O = usr.Ref
							var/CraftObj = 0
							if(O.Type == "Plank")
								CraftObj = 1
							if(O.Type == "Block")
								CraftObj = 1
							if(CraftObj)
								if(src.Type != "Saw")
									usr << "<font color = red>Equip A Saw before continuing!<br>"
									return
								if(src.suffix != "Equip")
									usr << "<font color = red>Equip the Saw before continuing!<br>"
									return
								if(src.Dura <= 1)
									usr << "<font color = red>The saw is Broken, you can not do this job!<br>"
									return
								usr.MovementCheck()
								if(usr.CanMove)
									usr.CreateCarpentryMenu(O)
								return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Forge")
											if(O in usr)
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.icon = src.icon
														W.EquipState = src.EquipState
														W.CarryState = src.CarryState
														W.Material = O.Material
														W.name = "[W.Material] [W.name]"
														if(W.ObjectTag == "Weapon")
															usr.CraftWeapon(O,W)
														W.icon_state = W.CarryState
														usr.Weight -= O.Weight
														del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.Weapon == null)
										if(usr.Weapon2)
											var/obj/W = usr.Weapon2
											if(W.ObjectTag == "Weapon" && W.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
											if(W.ObjectTag == "Weapon" && src.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Axe")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Spear")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Blunt")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Ranged")
												return
										if(usr.RightArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = src.EquipState
											usr.Weapon = src
											usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
								if(usr.CurrentHand == "Left")
									if(usr.Weapon2 == null)
										if(usr.Weapon)
											var/obj/W = usr.Weapon
											if(W.ObjectTag == "Weapon" && W.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
											if(W.ObjectTag == "Weapon" && src.TwoHander)
												usr << "<font color = red>You can not dual wield when using large two handed swords!<br>"
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Axe")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Spear")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Blunt")
												return
											if(W.ObjectTag == "Weapon" && W.ObjectType == "Ranged")
												return
										if(usr.LeftArm >= 25)
											src.layer = 5
											src.suffix = "Equip"
											src.overlays += image(/obj/HUD/E/)
											src.icon_state = "[src.EquipState] left"
											usr.Weapon2 = src
											usr.overlays+=image(src.icon,"[src.icon_state]",src.ItemLayer)
											src.layer = 20
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
											return
										else
											usr << "<font color =red>You cant do that with a damaged arm!<br>"
											return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = 5
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.EquipState == src.EquipState && W.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Silver")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.CarryState = "[M] [W.icon_state]"
											W.EquipState = "[M] [W.EquipState] equip"
											W.icon_state = W.CarryState
											W.layer = 100
											usr.CreateList += W
									else
										var/obj/W = new src.type()
										W.Material = src.Material
										W.icon_state = src.CarryState
										W.EquipState = src.EquipState
										W.CarryState = src.CarryState
										W.layer = 100
										usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.overlays = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				DemonicSword
					icon = 'weapons.dmi'
					icon_state = "demon sword equip"
					EquipState = "demon sword equip"
					CarryState = "demon sword"
					DamageType = "Slash"
					Weight = 1
					Dura = 1000
					Quality = 33
					Delete = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				BroadSword
					icon = 'weapons.dmi'
					icon_state = "broadsword"
					EquipState = "broadsword"
					CarryState = "broadsword"
					CanBeCrafted = 1
					TwoHander = 1
					Weight = 8
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Scimitar
					icon = 'weapons.dmi'
					icon_state = "scimitar"
					EquipState = "scimitar"
					CarryState = "scimitar"
					CanBeCrafted = 1
					Weight = 6
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Sabre
					icon = 'weapons.dmi'
					icon_state = "sabre"
					EquipState = "sabre"
					CarryState = "sabre"
					CanBeCrafted = 1
					Weight = 5
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LongSword
					icon = 'weapons.dmi'
					icon_state = "sword"
					EquipState = "sword"
					CarryState = "sword"
					DamageType = "Slash"
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 4
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Saw
					icon = 'tools.dmi'
					icon_state = "saw"
					EquipState = "saw"
					CarryState = "saw"
					Type = "Saw"
					CanBeCrafted = 1
					Quality = 5
					Weight = 3
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
		Limb
			CookingFood = 1
			Type = 40
			Weight = 4
			Fuel = 50
			New()
				src.tag = "Limb"
			Click()
				if(usr.Function == "Eat")
					if(src.icon == 'Skeleton.dmi')
						return
					if(src in usr)
						if(usr.Hunger <= src.Type)
							usr.Hunger += src.Type
						else
							usr << "<font color = yellow>You eat the [src], but you will need somthing a little better in order to sate your hunger!<br>"
							usr.Hunger += src.Type / 10
						if(usr.Hunger >= 100)
							usr.Hunger = 100
						view(usr) << "<font color =yellow>[usr] eats [src]!<br>"
						if(src.CookingFood == 1 && usr.CanEatRawMeats == 0)
							var/AlreadyIll = 0
							if("Ill" in usr.Afflictions)
								AlreadyIll = 1
							if(AlreadyIll == 0)
								usr.Afflictions += "Ill"
								usr.Illness(35)
						if(src.CookingFood == 1 && usr.CanEatRawMeats == 1)
							var/AlreadyIll = 0
							if("Ill" in usr.Afflictions)
								AlreadyIll = 1
							if(AlreadyIll == 0)
								var/GetsIll = prob(50)
								if(GetsIll)
									usr.Afflictions += "Ill"
									usr.Illness(25)
						usr.Weight -= src.Weight
						del(src)
				if(usr.Function == "Transfer")
					if(usr.Container)
						var/obj/C = usr.Container
						if(src.suffix == "Carried")
							if(src in C)
								if(C in range(1,usr))
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										usr.Weight += src.Weight
										C.Weight -= src.Weight
										usr << "You moved [src] from [C] to your inventory!<br>"
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.CreateInventory()
										usr.CreateContainerContents(C)
										return
									else
										usr << "<b>You are carrying enough already!<br>"
										return
					if(src.suffix == "Carried")
						if(src in usr)
							if(usr.Container)
								var/obj/C = usr.Container
								if(C in range(1,usr))
									if(C.Weight <= C.WeightMax)
										usr.Weight -= src.Weight
										C.Weight += src.Weight
										src.loc = C
										usr << "You moved [src] from your inventory to [C]!<br>"
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.CreateInventory()
										usr.CreateContainerContents(C)
										return
									else
										usr << "<b>[C] is carrying enough already!<br>"
										return
				if(usr.Function == "PickUp")
					if(src.suffix == "Carried" && src in usr)
						src.loc = usr.loc
						src.suffix = null
						src.overlays = null
						src.layer = 4
						usr.client.screen -= src
						usr.Weight -= src.Weight
						view() << "<b>[usr] drops [src]<br>"
						for(var/obj/HUD/Text/T in usr.client.screen)
							if(T.Type == "Weight")
								del(T)
						if(usr.InvenUp)
							usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
						usr.Delete("ScrollMiddle","BoxDelete")
						for(var/obj/Items/Resources/CampSite/CS in range(1,src))
							if(src.CookingFood == 1 && CS.OnFire)
								Cook(src.loc,CS,usr,0,0)
								view(usr) << "<font color = yellow>[usr] places down a [src] to cook!<br>"
						return
					if(usr in range(1,src))
						if(src.suffix == null)
							if(usr.Weight <= usr.WeightMax)
								src.loc = usr
								src.suffix = "Carried"
								usr.Weight += src.Weight
								src.overlays+=image(/obj/HUD/C/)
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								view() << "<b>[usr] picks up [src]<br>"
								return
							else
								usr << "<b>You cant carry too much weight!<br>"
								return
						else
							usr << "<b>You cant pick that item up!<br>"
							return
		Body
			Fuel = 90
			New()
				spawn(30000)
					if(src && src.Owner == null)
						var/obj/Items/Misc/Bones/B = new
						B.loc = src.loc
						B.name = "[src]'s Bones"
						var/obj/Items/Misc/Skull/S = new
						S.loc = src.loc
						S.name = "[src]'s Bones"
						del(src)
			Click()
				if(usr.Function == "Interact")
					if(src in range(1,usr))
						var/obj/R = null
						if(usr.Ref)
							R = usr.Ref
						if(R == null && usr.Claws <= 1)
							usr << "<font color = red>You'll need to Interact with a weapon before butchering.<br>"
							return
						var/CanSkin = 0
						if(usr.Claws)
							CanSkin = 1
						if(R)
							if(R.ObjectType == "Dagger")
								if(src.icon == 'Skeleton.dmi')
									usr << "<font color = red>Theres no skin on this corpse!<br>"
									return
								if(R.suffix != "Equip")
									usr << "<font color = red>Equip the dagger first before trying to skin anything!<br>"
									return
								if(R.Dura <= 1)
									usr << "<font color = red>This dagger is broken, you cant use it for skinning!!<br>"
									return
								CanSkin = 1
							else
								CanSkin = 0
						if(CanSkin)
							if(src.Skinned == 0)
								if(usr.Dead == 0 && usr.Job == null)
									var/Loc = usr.loc
									if(usr.Fainted == 0 && usr.Stunned == 0)
										if(R)
											view(usr) << "<font color=yellow>[usr] begins to skin [src] using a [R]!<br>"
										else
											view(usr) << "<font color=yellow>[usr] begins to skin [src] using their claws!<br>"
										usr.Job = "Skin"
										usr.CanMove = 0
										var/Time = 250
										Time -= usr.SkinningSkill * 2
										if(Time <= 25)
											Time = 25
										spawn(Time)
											if(usr)
												usr.MovementCheck()
												if(src)
													if(usr.loc == Loc)
														if(usr.Job == "Skin")
															usr.Job = null
															usr.SkinningSkill += usr.SkinningSkillMulti
															src.icon += rgb(200,0,0)
															src.Skinned = 1
															var/obj/Items/Resources/Skin/S = new
															if(src.Humanoid && src.Race)
																S.icon_state = "[src.Race] skin"
															else
																S.icon_state = "Leather Hide"
															S.name = "[src.Race] Hide"
															S.loc = src.loc
															S.CraftPotential += rand(1,10)
															S.CraftPotential += usr.SkinningSkill / 2
															if(S.CraftPotential >= 100)
																S.CraftPotential = 100
															S.CreateLeather()
															view(6,usr) << "<font color =yellow>[usr] finishes skinning [src]!<br>"
															return
													else
														usr << "<font color=red>You moved from the position you were skinning at, you failed the job!<br>"
														usr.MovementCheck()
														return
						var/CanButcher = 0
						if(usr.Claws)
							CanButcher = 1
						if(R)
							if(R.Type == "PickAxe")
								CanButcher = 0
							if(R.ObjectType == "Axe")
								CanButcher = 1
							if(R.ObjectType == "Sword")
								CanButcher = 1
						if(CanButcher && usr.Job != "Skin")
							if(src.icon == 'Skeleton.dmi')
								usr << "<font color = red>Theres no meat on this corpse!<br>"
								return
							if(R)
								if(R.suffix != "Equip")
									usr << "<font color = red>Equip a weapon first before trying to butcher anything!<br>"
									return
								if(R.Dura <= 1)
									usr << "<font color = red>This weapon is broken, you cant use it for butchery!!<br>"
									return
							if(usr.Dead == 0 && usr.Job == null)
								var/Loc = usr.loc
								if(usr.Fainted == 0 && usr.Stunned == 0)
									var/Result
									if(src.Humanoid)
										var/list/menu = new()
										if(src.RightArm)
											menu += "Right Arm"
										if(src.LeftArm)
											menu += "Left Arm"
										if(src.LeftLeg && src.Race != "Snakeman")
											menu += "Left Leg"
										if(src.RightLeg && src.Race != "Snakeman")
											menu += "Right Leg"
										if(src.Butchered == 0)
											menu += "Body"
										menu += "None"
										Result = input("Which part of the corpse do you want to butcher?", "Choose", null) in menu
									else
										Result = "Body"
									if(Result != "None")
										if(src in range(1,usr))
											if(R)
												view(usr) << "<font color=yellow>[usr] begins to butcher [src]'s [Result] using a [R]!<br>"
											else
												view(usr) << "<font color=yellow>[usr] begins to butcher [src]'s [Result] using their claws!<br>"
											usr.Job = "Butcher"
											usr.CanMove = 0
											var/Time = 250
											Time -= usr.ButcherySkill * 2
											if(Time <= 25)
												Time = 25
											spawn(Time)
												if(usr)
													usr.MovementCheck()
													if(src)
														if(usr.loc == Loc)
															if(usr.Job == "Butcher")
																usr.Job = null
																usr.ButcherySkill += usr.ButcherySkillMulti
																if(Result == "Right Arm" && src.RightArm)
																	var/obj/Items/Limb/L = new
																	L.icon = src.icon
																	L.icon_state = "limb"
																	L.name = "[src.Race]'s RightArm"
																	L.loc = src.loc
																	src.RightArm = 0
																if(Result == "Left Arm" && src.LeftArm)
																	var/obj/Items/Limb/L = new
																	L.icon = src.icon
																	L.icon_state = "limb"
																	L.name = "[src.Race]'s LeftArm"
																	L.loc = src.loc
																	src.LeftArm = 0
																if(Result == "Left Leg" && src.LeftLeg)
																	var/obj/Items/Limb/L = new
																	L.icon = src.icon
																	L.icon_state = "limb"
																	L.name = "[src.Race]'s LeftLeg"
																	L.loc = src.loc
																	src.LeftLeg = 0
																if(Result == "Right Leg" && src.RightLeg)
																	var/obj/Items/Limb/L = new
																	L.icon = src.icon
																	L.icon_state = "limb"
																	L.name = "[src.Race]'s RightLeg"
																	L.loc = src.loc
																	src.RightLeg = 0
																if(src.BloodColour == /obj/Misc/Gore/BloodSplat/)
																	var/obj/Misc/Gore/BloodPuddle/P = new
																	P.loc = src.loc
																if(src.BloodColour == /obj/Misc/Gore/GreenBloodSplat/)
																	var/obj/Misc/Gore/GreenBloodSplat/G = new
																	G.loc = src.loc
																src.LimbLoss()
																view(6,usr) << "<font color =yellow>[usr] finishes butchering [src]!<br>"
																if(Result == "Body" && src.Butchered == 0)
																	var/obj/Items/Misc/Bones/B = new
																	B.name = "[src.Race] Bones"
																	B.loc = src.loc
																	var/obj/Items/Misc/Skull/S = new
																	S.name = "[src.Race] Skull"
																	S.loc = src.loc
																	if(src.Brain)
																		var/obj/Items/Foods/Brain/Br = new
																		Br.loc = src.loc
																		Br.name = "[src.Race]'s Brain"
																	if(src.Spleen)
																		var/obj/Items/Foods/Spleen/Sp = new
																		Sp.loc = src.loc
																		Sp.name = "[src.Race]'s Spleen"
																	if(src.Intestine)
																		var/obj/Items/Foods/Intestines/I = new
																		I.loc = src.loc
																		I.name = "[src.Race]'s Intestines"
																	if(src.LeftKidney)
																		var/obj/Items/Foods/Kidney/LK = new
																		LK.loc = src.loc
																		LK.name = "[src.Race]'s LeftKidney"
																	if(src.RightKidney)
																		var/obj/Items/Foods/Kidney/RK = new
																		RK.loc = src.loc
																		RK.name = "[src.Race]'s RightKidney"
																	if(src.Heart)
																		var/obj/Items/Foods/Heart/H = new
																		H.loc = src.loc
																		H.name = "[src.Race]'s Heart"
																	var/Meat = rand(2,4)
																	while(Meat)
																		Meat -= 1
																		var/obj/Items/Foods/RawMeatChunck/M = new
																		M.loc = src.loc
																		M.name = "[src.Race] Chunk"
																	del(src)
														else
															usr << "<font color=red>You moved from the position you were butchering at, you failed the job!<br>"
															usr.MovementCheck()
															return
				if(usr.Function == "Eat")
					if(usr.Dead)
						return
					if(src in range(1,usr))
						if(usr.CanEatBodies)
							if(usr.Hunger <= 33)
								view(usr) << "<font color = purple>[usr] grabs hold of [src] and begins to pull bits off, they then start to eat the pieces until all that remains are bones...<br>"
								if(src.BloodColour == /obj/Misc/Gore/BloodSplat/)
									var/obj/Misc/Gore/BloodPuddle/P = new
									P.loc = src.loc
								if(src.BloodColour == /obj/Misc/Gore/GreenBloodSplat/)
									var/obj/Misc/Gore/GreenBloodSplat/G = new
									G.loc = src.loc
								var/obj/Items/Misc/Bones/B = new
								B.name = "[src] Bones"
								B.loc = src.loc
								var/obj/Items/Misc/Skull/S = new
								S.name = "[src] Skull"
								S.loc = src.loc
								if(usr.Faction == "Undead")
									if(src.Humanoid)
										S.SkeletonRaise()
								usr.Hunger += 47
								usr.GainStats(2)
								if(usr.Hunger >= 100)
									usr.Hunger = 100
								del(src)
								return
							else
								usr << "<font color = red>You dont feel quite hungry enough to eat an entire corpse! (33 Hunger needed.)<br>"
								return
				if(usr.Function == "Pull")
					if(src in range(1,usr))
						if(usr.Pull == src)
							usr.Pull = null
							if(src.Pull == usr)
								src.Pull = null
							view(usr) << "<b>[usr] stops pulling [src]<br>"
							return
						if(src.suffix == null)
							if(usr.Pull == null)
								usr.Pull = src
								src.Pull = usr
								usr.Pull()
								if(usr.Dead == 0)
									view(usr) << "<b>[usr] starts pulling [src]<br>"
								return
		Altars
			icon = 'altars.dmi'
			suffix = "Stuck"
			Altar_of_Wisdom
				icon_state = "wisdom altar"
			Altar_of_Crafts
				icon_state = "crafts altar"
			Altar_of_Harvest
				icon_state = "harvest altar"
			Altar_of_Beasts
				icon_state = "beast altar"
			Altar_of_Order
				icon_state = "order altar"
			Altar_of_Death
				icon_state = "death altar"
			Altar_of_Blood
				icon_state = "blood altar"
			Well_of_Destruction
				icon_state = "well of destruction"
				luminosity = 5
				Click()
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(usr.Fainted)
								usr << "<font color =red>You have fainted and cant do that!<br>"
								return
							if(usr.Stunned)
								usr << "<font color =red>You are stunned and cant do that!<br>"
								return
							if(usr.Weapon)
								var/obj/I = usr.Weapon
								if(I.Type == "Torch")
									view(usr) << "<font color = yellow>[usr] places the Torch into the Well of Destruction!<br>"
									usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
									I.CarryState = "torch lit"
									I.EquipState = "torch lit equip"
									I.icon_state = I.EquipState
									I.Type = "Torch Lit"
									I.LightProc(usr)
									usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
									return
							if(usr.Weapon2)
								var/obj/I = usr.Weapon2
								if(I.Type == "Torch")
									view(usr) << "<font color = yellow>[usr] places the Torch into the Well of Destruction!<br>"
									usr.overlays-=image(I.icon,"[I.icon_state] left",I.ItemLayer)
									I.CarryState = "torch lit"
									I.EquipState = "torch lit equip"
									I.icon_state = I.EquipState
									I.Type = "Torch Lit"
									I.LightProc(usr)
									usr.overlays+=image(I.icon,"[I.icon_state] left",I.ItemLayer)
									return
		Armour
			ObjectTag = "Armour"
			Legs
				Click()
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 4)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 4)
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 4 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 4 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/Scraps = rand(1,2)
													while(Scraps)
														Scraps -= 1
														var/obj/Items/Resources/Skin/S = new
														S.icon_state = "Dry Leather Scrap"
														S.name = "[O.name] Scrap"
														S.CraftPotential = O.CraftPotential / 2
														S.Weight = S.Weight / 2
														S.loc = usr.loc
														S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(2,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 2)
										break
								if(IngotNum != 2)
									usr << "<font color = red>You need two Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 2)
														break
										if(IngotNum == 2 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 2)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 2)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								var/HasLeg = 0
								if(usr.LeftLeg)
									HasLeg = 1
								if(usr.RightLeg)
									HasLeg = 1
								if(HasLeg)
									if(usr.WLegs == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.WLegs = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
								else
									usr << "<font color=red>You have no Legs!"
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WLegs == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WLegs = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				GiantLeatherLeggings
					icon = 'equipment.dmi'
					icon_state = "giant leather pants equip"
					EquipState = "giant leather pants equip"
					CarryState = "giant leather pants"
					DefenceType = "Leather"
					Material = "Leather"
					ItemLayer = 4.3
					CantRaces = list("Human","Ratling","Alther","Frogman","Stahlite","Wolfman","Snakeman","Illithid")
					CanBeCrafted = 1
					Dura = 100
					Fuel = 75
					Weight = 2
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherLeggings
					icon = 'equipment.dmi'
					icon_state = "leather pants equip"
					EquipState = "leather pants equip"
					CarryState = "leather pants"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman")
					ItemLayer = 4.3
					Defence = 3
					CanBeCrafted = 1
					Dura = 100
					Weight = 1
					Fuel = 75
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatChainLeggings
					icon = 'equipment.dmi'
					icon_state = "rat chainlegs"
					EquipState = "rat chainlegs"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Stahlite","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.3
					CanBeCrafted = 1
					Weight = 4
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ChainLeggings
					icon = 'equipment.dmi'
					icon_state = "chainlegs"
					EquipState = "chainlegs"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman")
					ItemLayer = 4.3
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainLeggings
					icon = 'equipment.dmi'
					icon_state = "giant chainlegs"
					EquipState = "giant chainlegs"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.3
					CanBeCrafted = 1
					Weight = 10
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallChainLeggings
					icon = 'equipment.dmi'
					icon_state = "small chainlegs"
					EquipState = "small chainlegs"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.3
					CanBeCrafted = 1
					Weight = 5
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Waist
				Click()
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(usr.Race in src.CantRaces)
								usr << "<font color = red>Your race cant wear that item!<br>"
								return
							if(src.Dura <= 0)
								usr << "<font color = red>[src] is broken, you cant use that!<br>"
								return
							if(src in usr)
								if(usr.WWaist == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WWaist = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WWaist == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WWaist = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				SmallPlateBelt
					icon = 'equipment.dmi'
					icon_state = "small platebelt"
					EquipState = "small platebelt"
					CarryState = "small platebelt"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Illithid")
					ItemLayer = 4.4
					Weight = 3
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestBelt
					icon = 'equipment.dmi'
					icon_state = "priest belt"
					EquipState = "priest belt"
					CarryState = "inquisitor priest belt"
					Weight = 3
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Snakeman","Illithid")
					DefenceType = "Plate"
					Dura = 100
					ItemLayer = 4.6
					Defence = 3
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Shoulders
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							var/Close = 0
							if(O.Material != "Bone")
								Close = 1
							if(O.Type != "Skull")
								Close = 1
							if(Close)
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two Skulls in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Skull/S in usr)
								if(BoneNum != 2)
									BoneNum += 1
									Bones += S
							if(BoneNum != 2)
								usr << "<font color = red>You need Two Skulls in order to create this item!<br>"
								return
							if(BoneNum == 2 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Skulls into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 2 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Skulls could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Skulls could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 2)
										break
								if(IngotNum != 2)
									usr << "<font color = red>You need two Ingots of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 2)
														break
										if(IngotNum == 2 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 2)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 2)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(usr.Race in src.CantRaces)
								usr << "<font color = red>Your race cant wear that item!<br>"
								return
							if(src.Dura <= 0)
								usr << "<font color = red>[src] is broken, you cant use that!<br>"
								return
							if(src in usr)
								if(usr.WShoulders == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WShoulders = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WShoulders == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WShoulders = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				PriestsPauldrons
					icon = 'equipment.dmi'
					icon_state = "priest shoulders"
					EquipState = "priest shoulders"
					CarryState = "inquisitor priest pauldrons"
					Weight = 15
					DefenceType = "Plate"
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.7
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SkullPauldrons
					icon = 'equipment.dmi'
					icon_state = "skull shoulders equip"
					EquipState = "skull shoulders equip"
					CarryState = "skull shoulders"
					Weight = 5
					DefenceType = "Chain"
					Dura = 100
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 5
					Defence = 4
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsPauldrons
					icon = 'equipment.dmi'
					icon_state = "inquisitor shoulders"
					EquipState = "inquisitor shoulders"
					CarryState = "inquisitor pauldrons"
					Weight = 20
					DefenceType = "Plate"
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.6
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallPlatePauldrons
					icon = 'equipment.dmi'
					icon_state = "small shoulders"
					EquipState = "small shoulders"
					CarryState = "small shoulders"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Illithid")
					ItemLayer = 4.7
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatPlatePauldrons
					icon = 'equipment.dmi'
					icon_state = "rat shoulders"
					EquipState = "rat shoulders"
					CarryState = "rat shoulders"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 5
					CanBeCrafted = 1
					Weight = 6
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlatePauldrons
					icon = 'equipment.dmi'
					icon_state = "shoulders"
					EquipState = "shoulders"
					CarryState = "shoulders"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman")
					ItemLayer = 4.7
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			LeftArm
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Bone")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Bones/B in usr)
								if(BoneNum != 2)
									BoneNum += 1
									Bones += B
							if(BoneNum != 2)
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							if(BoneNum == 2 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Bone piles into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 2 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Bone piles could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Bone piles could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 2)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 2)
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 2 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 2 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/obj/Items/Resources/Skin/S = new
													S.icon_state = "Dry Leather Scrap"
													S.name = "[O.name] Scrap"
													S.CraftPotential = O.CraftPotential / 2
													S.Weight = S.Weight / 2
													S.loc = usr.loc
													S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 1)
										break
								if(IngotNum != 1)
									usr << "<font color = red>You need one Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 1)
														break
										if(IngotNum == 1 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 1)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(3)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 1)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.LeftArm)
									if(usr.WLeftHand == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.WLeftHand = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WLeftHand == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WLeftHand = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				BoneLeftGauntlet
					icon = 'equipment.dmi'
					icon_state = "left bone equip"
					EquipState = "left bone equip"
					CarryState = "left bone gauntlet"
					DefenceType = "Chain"
					Weight = 1
					Dura = 100
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 3
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherGloveLeft
					icon = 'equipment.dmi'
					icon_state = "leather glove left2"
					EquipState = "leather glove left2"
					CarryState = "leather glove left"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Defence = 3
					Dura = 100
					Fuel = 75
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestsLeftGauntlet
					icon = 'equipment.dmi'
					icon_state = "priest glove L"
					EquipState = "priest glove L"
					CarryState = "priest gauntlet L"
					DefenceType = "Plate"
					Weight = 8
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					Dura = 100
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsLeftGauntlet
					icon = 'equipment.dmi'
					icon_state = "inquisitor left glove"
					EquipState = "inquisitor left glove"
					CarryState = "inqusitor gauntlets left"
					DefenceType = "Plate"
					Weight = 8
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatPlateGauntletLeft
					icon = 'equipment.dmi'
					icon_state = "rat plateglove left"
					EquipState = "rat plateglove left"
					CarryState = "rat plateglove left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallPlateGauntletLeft
					icon = 'equipment.dmi'
					icon_state = "small plateglove left"
					EquipState = "small plateglove left"
					CarryState = "small plateglove left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateGauntletLeft
					icon = 'equipment.dmi'
					icon_state = "plateglove left"
					EquipState = "plateglove left"
					CarryState = "plateglove left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainGloveLeft
					icon = 'equipment.dmi'
					icon_state = "giant chainleft glove"
					EquipState = "giant chainleft glove"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 6
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantPlateGloveLeft
					icon = 'equipment.dmi'
					icon_state = "giant plateglove left"
					EquipState = "giant plateglove left"
					CarryState = "giant plateglove left"
					DefenceType = "Plate"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			RightArm
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Bone")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Bones/B in usr)
								if(BoneNum != 2)
									BoneNum += 1
									Bones += B
							if(BoneNum != 2)
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							if(BoneNum == 2 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Bone piles into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 2 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Bone piles could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Bone piles could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 2)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 2)
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 2 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 2 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/obj/Items/Resources/Skin/S = new
													S.icon_state = "Dry Leather Scrap"
													S.name = "[O.name] Scrap"
													S.CraftPotential = O.CraftPotential / 2
													S.Weight = S.Weight / 2
													S.loc = usr.loc
													S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 1)
										break
								if(IngotNum != 1)
									usr << "<font color = red>You need one Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 1)
														break
										if(IngotNum == 1 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 1)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 1)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.RightArm)
									if(usr.WRightHand == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.WRightHand = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										if(src.Type == "Corruption")
											src.suffix = "Fused"
											usr.Afflictions += "Right Hand Corruption"
											usr << "<font color = red>You place the [src] over your right hand, as you do you feel a sharp pain run up your arm. Suddenly your hand fills with agony as the [src] begins to fuse itself to your body!<br>"
											usr.Endurance += 2
											usr.Strength += 2
											usr.Corruption()
										return
						if(src.suffix == "Fused")
							usr << "<font color = red>You try to pull the [src] off, but its no use, its fused to your body and wont budge!<br>"
							return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WRightHand == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WRightHand = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				BoneRightGauntlet
					icon = 'equipment.dmi'
					icon_state = "right bone equip"
					EquipState = "right bone equip"
					CarryState = "right bone gauntlet"
					DefenceType = "Chain"
					Weight = 1
					Dura = 100
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 3
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherGloveRight
					icon = 'equipment.dmi'
					icon_state = "leather glove right2"
					EquipState = "leather glove right2"
					CarryState = "leather glove right"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Defence = 3
					Dura = 100
					Fuel = 75
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestsRightGauntlet
					icon = 'equipment.dmi'
					icon_state = "priest glove R"
					EquipState = "priest glove R"
					CarryState = "priest gauntlet R"
					DefenceType = "Plate"
					Weight = 1
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					Dura = 100
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Glove_of_Corruption
					icon = 'equipment.dmi'
					icon_state = "Corruption1"
					EquipState = "Corruption1"
					CarryState = "Corruption1 Floor"
					DefenceType = "Plate"
					Type = "Corruption"
					Weight = 10
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman")
					ItemLayer = 4.5
					Defence = 1
					BaseMaterial = "Metal"
					Delete = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsRightGauntlet
					icon = 'equipment.dmi'
					icon_state = "inquisitor right glove"
					EquipState = "inquisitor right glove"
					CarryState = "inqusitor gauntlets right"
					DefenceType = "Plate"
					Weight = 2
					Dura = 100
					ItemLayer = 4.5
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainGloveRight
					icon = 'equipment.dmi'
					icon_state = "giant chainright glove"
					EquipState = "giant chainright glove"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 6
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantPlateGloveRight
					icon = 'equipment.dmi'
					icon_state = "giant plateglove right"
					EquipState = "giant plateglove right"
					CarryState = "giant plateglove right"
					DefenceType = "Plate"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallPlateGauntletRight
					icon = 'equipment.dmi'
					icon_state = "small plateglove right"
					EquipState = "small plateglove right"
					CarryState = "small plateglove right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatPlateGauntletRight
					icon = 'equipment.dmi'
					icon_state = "rat plateglove right"
					EquipState = "rat plateglove right"
					CarryState = "rat plateglove right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateGauntletRight
					icon = 'equipment.dmi'
					icon_state = "plateglove right"
					EquipState = "plateglove right"
					CarryState = "plateglove right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			RightFoot
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Bone")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Bones/B in usr)
								if(BoneNum != 2)
									BoneNum += 1
									Bones += B
							if(BoneNum != 2)
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							if(BoneNum == 2 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Bone piles into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 2 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Bone piles could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Bone piles could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 2)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 2)
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 2 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 2 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/obj/Items/Resources/Skin/S = new
													S.icon_state = "Dry Leather Scrap"
													S.name = "[O.name] Scrap"
													S.CraftPotential = O.CraftPotential / 2
													S.Weight = S.Weight / 2
													S.loc = usr.loc
													S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 1)
										break
								if(IngotNum != 1)
									usr << "<font color = red>You need one Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 1)
														break
										if(IngotNum == 1 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 1)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 1)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.RightLeg)
									if(usr.WRightFoot == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.WRightFoot = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WRightFoot == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WRightFoot = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				BoneBootRight
					icon = 'equipment.dmi'
					icon_state = "right bone boot"
					EquipState = "right bone boot"
					CarryState = "right bone boot"
					DefenceType = "Chain"
					Weight = 1
					Dura = 100
					ItemLayer = 4.6
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					Defence = 3
					Dura = 100
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherBootRight
					icon = 'equipment.dmi'
					icon_state = "leather boot right2"
					EquipState = "leather boot right2"
					CarryState = "leather boot right"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman")
					ItemLayer = 4.6
					Defence = 3
					CanBeCrafted = 1
					Dura = 100
					Fuel = 75
					Weight = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestsRightBoot
					icon = 'equipment.dmi'
					icon_state = "priest boot R"
					EquipState = "priest boot R"
					CarryState = "inquisitor priest boot R"
					DefenceType = "Plate"
					Weight = 8
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Snakeman","Illithid")
					Dura = 100
					ItemLayer = 4.6
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				InquisitorsRightBoot
					icon = 'equipment.dmi'
					icon_state = "inquisitor right boot"
					EquipState = "inquisitor right boot"
					CarryState = "inquisitor boots right"
					DefenceType = "Plate"
					Weight = 8
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Snakeman","Illithid")
					Dura = 100
					ItemLayer = 4.6
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				GiantChainBootRight
					icon = 'equipment.dmi'
					icon_state = "giant chainright boot"
					EquipState = "giant chainright boot"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 6
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantPlateBootRight
					icon = 'equipment.dmi'
					icon_state = "giant plateboot right"
					EquipState = "giant plateboot right"
					CarryState = "giant plateboot right"
					DefenceType = "Plate"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallPlateBootRight
					icon = 'equipment.dmi'
					icon_state = "small plateboot right"
					EquipState = "small plateboot right"
					CarryState = "small plateboot right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatPlateBootRight
					icon = 'equipment.dmi'
					icon_state = "rat plateboot right"
					EquipState = "rat plateboot right"
					CarryState = "rat plateboot right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateBootRight
					icon = 'equipment.dmi'
					icon_state = "plateboot right"
					EquipState = "plateboot right"
					CarryState = "plateboot right"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			LeftFoot
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Bone")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Bones/B in usr)
								if(BoneNum != 2)
									BoneNum += 1
									Bones += B
							if(BoneNum != 2)
								usr << "<font color = red>You need Two piles of Bones in order to create this item!<br>"
								return
							if(BoneNum == 2 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Bone piles into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 2 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Bone piles could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Bone piles could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 2)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 2)
								usr << "<font color = red>You need Two Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 2 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 2 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/obj/Items/Resources/Skin/S = new
													S.icon_state = "Dry Leather Scrap"
													S.name = "[O.name] Scrap"
													S.CraftPotential = O.CraftPotential / 2
													S.Weight = S.Weight / 2
													S.loc = usr.loc
													S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 1)
										break
								if(IngotNum != 1)
									usr << "<font color = red>You need one Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 1)
														break
										if(IngotNum == 1 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 1)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 1)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.LeftLeg)
									if(usr.WLeftFoot == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.WLeftFoot = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WLeftFoot == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WLeftFoot = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				BoneBootLeft
					icon = 'equipment.dmi'
					icon_state = "left bone boot"
					EquipState = "left bone boot"
					CarryState = "left bone boot"
					DefenceType = "Chain"
					Weight = 1
					Dura = 100
					ItemLayer = 4.6
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					Defence = 3
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherBootLeft
					icon = 'equipment.dmi'
					icon_state = "leather boot left2"
					EquipState = "leather boot left2"
					CarryState = "leather boot left"
					DefenceType = "Leather"
					Material = "Leather"
					ItemLayer = 4.6
					CanBeCrafted = 1
					Defence = 3
					Dura = 100
					Fuel = 75
					Weight = 1
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman")
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestsLeftBoot
					icon = 'equipment.dmi'
					icon_state = "priest boot L"
					EquipState = "priest boot L"
					CarryState = "inquisitor priest boot L"
					DefenceType = "Plate"
					Weight = 8
					Dura = 100
					ItemLayer = 4.6
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Snakeman","Illithid")
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsLeftBoot
					icon = 'equipment.dmi'
					icon_state = "inquisitor left boot"
					EquipState = "inquisitor left boot"
					CarryState = "inquisitor boots left"
					DefenceType = "Plate"
					Weight = 8
					Dura = 100
					ItemLayer = 4.6
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Snakeman","Illithid")
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainBootLeft
					icon = 'equipment.dmi'
					icon_state = "giant chainleft boot"
					EquipState = "giant chainleft boot"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 6
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantPlateBootLeft
					icon = 'equipment.dmi'
					icon_state = "giant plateboot left"
					EquipState = "giant plateboot left"
					CarryState = "giant plateboot left"
					DefenceType = "Plate"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatPlateBootLeft
					icon = 'equipment.dmi'
					icon_state = "rat plateboot left"
					EquipState = "rat plateboot left"
					CarryState = "rat plateboot left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallPlateBootLeft
					icon = 'equipment.dmi'
					icon_state = "small plateboot left"
					EquipState = "small plateboot left"
					CarryState = "small plateboot left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateBootLeft
					icon = 'equipment.dmi'
					icon_state = "plateboot left"
					EquipState = "plateboot left"
					CarryState = "plateboot left"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Snakeman","Illithid")
					ItemLayer = 4.6
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Shields
				Type = "Shield"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 1)
										break
								if(IngotNum != 1)
									usr << "<font color = red>You need one Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 1)
														break
										if(IngotNum == 1 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 1)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 1)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.CurrentHand == "Right")
									if(usr.RightArm <= 25)
										usr << "<font color = red>Your right arm is damaged!<br>"
										return
									if(usr.Weapon2)
										var/obj/W = usr.Weapon2
										if(W.ObjectType == "Ranged")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
									if(usr.Weapon == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = "[src.CarryState] equip"
										usr.Weapon = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
								if(usr.CurrentHand == "Left")
									if(usr.LeftArm <= 25)
										usr << "<font color = red>Your left arm is damaged!<br>"
										return
									if(usr.Weapon)
										var/obj/W = usr.Weapon
										if(W.ObjectType == "Ranged")
											usr << "<font color = red>You can not equip anything else while using a two handed weapon!<br>"
											return
									if(usr.Weapon2 == null)
										src.layer = src.ItemLayer
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = "[src.CarryState] equip left"
										usr.Weapon2 = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src && usr.CurrentHand == "Right")
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
								if(usr.Weapon2 == src && usr.CurrentHand == "Left")
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,"[src.icon_state]",src.ItemLayer)
									usr.Weapon2 = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				WoodenBuckler
					icon = 'shields.dmi'
					icon_state = "wooden buckler equip"
					EquipState = "wooden buckler equip"
					CarryState = "wooden buckler"
					DefenceType = "Chain"
					Weight = 3
					Dura = 100
					ItemLayer = 5
					Defence = 3
					Fuel = 50
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				Shield
					icon = 'shields.dmi'
					icon_state = "shield"
					EquipState = "shield"
					CarryState = "shield"
					DefenceType = "Plate"
					ItemLayer = 5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Torch
					icon = 'tools.dmi'
					icon_state = "torch equip"
					EquipState = "torch equip"
					CarryState = "torch"
					Weight = 2
					Fuel = 25
					Dura = 500
					Type = "Torch"
					ItemLayer = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Extra
				Click()
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 2)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 2)
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 2 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 2 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/obj/Items/Resources/Skin/S = new
													S.icon_state = "Dry Leather Scrap"
													S.name = "[O.name] Scrap"
													S.CraftPotential = O.CraftPotential / 2
													S.Weight = S.Weight / 2
													S.loc = usr.loc
													S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Function == "Interact")
						if(usr.Dead == 0)
							if(src.suffix)
								var/obj/I
								for(var/obj/Items/Ammo/A in src)
									I = A
									break
								if(I)
									I.loc = usr
									src.Weight -= I.Weight
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									usr << "<font color = green>You pull a [I] from your Quiver!<br>"
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.WExtra == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WExtra = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									src.icon_state = src.CarryState
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WExtra == src)
									src.icon_state = src.EquipState
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WExtra = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				LeatherQuiver
					icon = 'equipment.dmi'
					icon_state = "quiver equip"
					EquipState = "quiver equip"
					CarryState = "quiver"
					DefenceType = "Leather"
					Type = "Quiver"
					ItemLayer = 5
					CanBeCrafted = 1
					Material = "Leather"
					Dura = 100
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Back
				Click()
					if(usr.Function == "Interact")
						if(usr.Dead == 0)
							if(src.suffix)
								var/obj/I = null
								for(var/obj/Items/Ammo/A in src)
									I = A
									break
								if(I)
									I.loc = usr
									usr.Weight -= src.Weight
									src.Weight -= I.Weight
									usr.Weight += src.Weight
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									usr << "<font color = green>You pull a [I] from your Quiver!<br>"
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.WBack == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WBack = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									if(src.Type == "Conceals")
										usr.OrginalName = usr.name
										usr.name = "Unknown"
										usr.StoredFaction = usr.Faction
										usr.Faction = "None"
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WBack == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WBack = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									if(usr.OrginalName)
										usr.name = usr.OrginalName
										usr.OrginalName = null
									if(usr.StoredFaction)
										usr.Faction = usr.StoredFaction
										usr.StoredFaction = null
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				SmallClothCloak
					icon = 'clothes.dmi'
					icon_state = "small cloak equip"
					EquipState = "small cloak equip"
					CarryState = "folded cloth"
					DefenceType = "Cloth"
					Type = "Conceals"
					Weight = 1
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Wolfman","Snakeman","Illithid")
					Dura = 100
					ItemLayer = 4.9
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ClothCloak
					icon = 'clothes.dmi'
					icon_state = "cloak equip"
					EquipState = "cloak equip"
					CarryState = "folded cloth"
					DefenceType = "Cloth"
					Type = "Conceals"
					Weight = 2
					CantRaces = list("Giant","Cyclops")
					Dura = 100
					ItemLayer = 4.9
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallClothCape
					icon = 'clothes.dmi'
					icon_state = "small cape equip"
					EquipState = "small cape equip"
					CarryState = "folded cloth"
					DefenceType = "Cloth"
					Weight = 1
					CantRaces = list("Stahlite","Giant","Cyclops","Human","Frogman","Alther","Wolfman","Snakeman","Illithid")
					Dura = 100
					Fuel = 50
					ItemLayer = 4.9
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ClothCape
					icon = 'clothes.dmi'
					icon_state = "cape equip"
					EquipState = "cape equip"
					CarryState = "folded cloth"
					DefenceType = "Cloth"
					Weight = 1
					CantRaces = list("Giant","Cyclops","Stahlite")
					Dura = 100
					Fuel = 50
					ItemLayer = 4.9
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Chest
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 2)
										break
								if(IngotNum != 2)
									usr << "<font color = red>You need two Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 2)
														break
										if(IngotNum == 2 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 2)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 2)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.WChest == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WChest = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WChest == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WChest = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/A = new src.type()
									A.Material = src.Material
									A.icon_state = src.CarryState
									A.EquipState = src.EquipState
									A.CarryState = src.CarryState
									A.layer = 100
									usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				KingsRobe
					icon = 'clothes.dmi'
					icon_state = "kings robe"
					EquipState = "kings robe"
					CarryState = "folded kings robe"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					Fuel = 50
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				Robe
					icon = 'clothes.dmi'
					icon_state = "robe"
					EquipState = "robe"
					CarryState = "folded cloth"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					Fuel = 50
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				WitchHunterTrenchCoat
					icon = 'clothes.dmi'
					icon_state = "witch hunter trench"
					EquipState = "witch hunter trench"
					CarryState = "folded trench"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					Fuel = 50
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				DesertRobe
					icon = 'clothes.dmi'
					icon_state = "desert robe"
					EquipState = "desert robe"
					CarryState = "folded desert robe"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					Fuel = 50
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestRobe
					icon = 'clothes.dmi'
					icon_state = "priest robe"
					EquipState = "priest robe"
					CarryState = "folded priest robe"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					Fuel = 50
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Defence = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ChainShirt
					icon = 'equipment.dmi'
					icon_state = "chainshirt"
					EquipState = "chainshirt"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.3
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 5
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainShirt
					icon = 'equipment.dmi'
					icon_state = "giant chainshirt"
					EquipState = "giant chainshirt"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Wolfman","Snakeman")
					ItemLayer = 4.3
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatChainShirt
					icon = 'equipment.dmi'
					icon_state = "rat chainshirt"
					EquipState = "rat chainshirt"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Stahlite","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.3
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 3
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallChainShirt
					icon = 'equipment.dmi'
					icon_state = "small chainshirt"
					EquipState = "small chainshirt"
					CarryState = "folded chain"
					DefenceType = "Chain"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.3
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 4
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			UpperBody
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Bone")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four piles of Bones in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Bones/B in usr)
								if(BoneNum != 4)
									BoneNum += 1
									Bones += B
							if(BoneNum != 4)
								usr << "<font color = red>You need Four piles of Bones in order to create this item!<br>"
								return
							if(BoneNum == 4 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Bone piles into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 4 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Bone piles could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Bone piles could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src.Material == "Leather" && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Material != "Leather")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							var/LeatherNum = 0
							var/Leathers = list()
							for(var/obj/Items/Resources/Skin/S in usr)
								if(S.Type == "Dry" && LeatherNum != 4)
									LeatherNum += 1
									Leathers += S
							if(LeatherNum != 4)
								usr << "<font color = red>You need Four Dry Leather Hides in order to create this item!<br>"
								return
							if(LeatherNum == 4 && O.Material == "Leather")
								var/LOC = usr.loc
								usr.Job = "MakeLeatherItem"
								usr.CanMove = 0
								var/Time = 200 - usr.LeatherCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Dry Leather Hides into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Leathers && usr.loc == LOC)
											if(LeatherNum == 4 && O && usr.Job == "MakeLeatherItem")
												var/Fail = prob(50 - usr.LeatherCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													var/Scraps = rand(1,2)
													while(Scraps)
														Scraps -= 1
														var/obj/Items/Resources/Skin/S = new
														S.icon_state = "Dry Leather Scrap"
														S.name = "[O.name] Scrap"
														S.CraftPotential = O.CraftPotential / 2
														S.Weight = S.Weight / 2
														S.loc = usr.loc
														S.Type = "Dry"
													for(var/obj/I in Leathers)
														if(LeatherNum != 0)
															LeatherNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.LeatherCraftSkill * 2
												W.Defence += usr.LeatherCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftLeatherArmour(O,W)
												for(var/obj/I in Leathers)
													if(LeatherNum != 0)
														LeatherNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.LeatherCraftSkill += usr.LeatherCraftSkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Dry Leather Hides could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Dry Leather Hides could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList)
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 3)
										break
								if(IngotNum != 3)
									usr << "<font color = red>You need three Ingots of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 3)
														break
										if(IngotNum == 3 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 3)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 3)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.WUpperBody == null)
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WUpperBody = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WUpperBody == src)
									usr.WUpperBody = null
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				BoneChestPlate
					icon = 'equipment.dmi'
					icon_state = "bone chest armour equip"
					EquipState = "bone chest armour equip"
					CarryState = "bone chest armour"
					DefenceType = "Chain"
					Weight = 5
					Dura = 100
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 3
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PriestsChestPlate
					icon = 'equipment.dmi'
					icon_state = "priest chestplate"
					EquipState = "priest chestplate"
					CarryState = "inquisitor priest chestplate"
					DefenceType = "Plate"
					Weight = 15
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					Dura = 100
					ItemLayer = 4.7
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ChestPiece
					icon = 'equipment.dmi'
					icon_state = "chest piece"
					EquipState = "chest piece"
					CarryState = "chest piece"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman")
					ItemLayer = 4.7
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				ChestPlate
					icon = 'equipment.dmi'
					icon_state = "chestplate"
					EquipState = "chestplate"
					CarryState = "chestplate"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 10
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChestPlate
					icon = 'equipment.dmi'
					icon_state = "giant chestplate"
					EquipState = "giant chestplate"
					CarryState = "giant chestplate"
					DefenceType = "Plate"
					CantRaces = list("Stahlite","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 13
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallChestPlate
					icon = 'equipment.dmi'
					icon_state = "small chestplate"
					EquipState = "small chestplate"
					CarryState = "small chestplate"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				RatChestPlate
					icon = 'equipment.dmi'
					icon_state = "rat chestplate"
					EquipState = "rat chestplate"
					CarryState = "rat chestplate"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 6
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantLeatherVest
					icon = 'equipment.dmi'
					icon_state = "giant leather vest equip"
					EquipState = "giant leather vest equip"
					CarryState = "giant leather vest"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 2
					Defence = 3
					Dura = 100
					Fuel = 75
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				LeatherVest
					icon = 'equipment.dmi'
					icon_state = "leather vest2"
					EquipState = "leather vest2"
					CarryState = "leather vest"
					DefenceType = "Leather"
					Material = "Leather"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite")
					ItemLayer = 4.5
					Weight = 1
					CanBeCrafted = 1
					Dura = 100
					Fuel = 75
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsChestPlate
					icon = 'equipment.dmi'
					icon_state = "inquisitor chest"
					EquipState = "inquisitor chest"
					CarryState = "inquisitor armour"
					DefenceType = "Plate"
					Weight = 20
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
			Head
				Click()
					if(usr.Job == null && src.Material == "Bone" && src in usr.CreateList)
						if(usr.Ref)
							var/obj/O = usr.Ref
							var/Close = 0
							if(O.Material != "Bone")
								Close = 1
							if(O.Type != "Skull")
								Close = 1
							if(Close)
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need One Skull in order to create this item!<br>"
								return
							var/BoneNum = 0
							var/Bones = list()
							for(var/obj/Items/Misc/Skull/S in usr)
								if(BoneNum != 1)
									BoneNum += 1
									Bones += S
							if(BoneNum != 1)
								usr << "<font color = red>You need One Skull in order to create this item!<br>"
								return
							if(BoneNum == 1 && O.Material == "Bone")
								var/LOC = usr.loc
								usr.Job = "MakeBoneItem"
								usr.CanMove = 0
								var/Time = 200 - usr.BoneCraftSkill * 1.5 - usr.Agility / 2 - usr.Intelligence / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Skull into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bones && usr.loc == LOC)
											if(BoneNum == 1 && O && usr.Job == "MakeBoneItem")
												var/Fail = prob(50 - usr.BoneCraftSkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bones)
														if(BoneNum != 0)
															BoneNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.BoneCraftSkill += usr.BoneCraftMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.BoneCraftSkill * 2
												W.Defence += usr.BoneCraftSkill / 3
												W.suffix = null
												W.density = 0
												W.opacity = 0
												if(W.ObjectTag == "Armour")
													usr.CraftBoneArmour(O,W)
												for(var/obj/I in Bones)
													if(BoneNum != 0)
														BoneNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.BoneCraftSkill += usr.BoneCraftMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Skull could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Skull could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 3)
										break
								if(IngotNum != 3)
									usr << "<font color = red>You need three Ingot of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 3)
														break
										if(IngotNum == 3 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 3)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.EquipState = src.EquipState
													W.CarryState = src.CarryState
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													if(W.ObjectTag == "Armour")
														usr.CraftArmour(O,W)
													W.icon_state = W.CarryState
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 3)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Race in src.CantRaces)
									usr << "<font color = red>Your race cant wear that item!<br>"
									return
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.WHead == null)
									src.layer = src.ItemLayer
									src.suffix = "Equip"
									src.overlays += image(/obj/HUD/E/)
									src.icon_state = src.EquipState
									usr.WHead = src
									usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									if(src.Type != "Crown")
										if(usr.Hair)
											usr.overlays -= usr.Hair
										if(usr.Beard && usr.Race != "Stahlite")
											usr.overlays -= usr.Beard
									return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.WHead == src)
									src.layer = src.ItemLayer
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.WHead = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									if(src.Type != "Crown")
										if(usr.Hair)
											usr.overlays += usr.Hair
										if(usr.Beard && usr.Race != "Stahlite")
											usr.overlays += usr.Beard
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in usr)
							var/Known = 0
							for(var/obj/Items/A in usr.CreateList)
								if(A.EquipState == src.EquipState && A.Material == src.Material)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Gold","Copper")
										for(var/M in Mats)
											var/obj/A = new src.type()
											A.Material = "[M]"
											A.CarryState = "[M] [A.icon_state]"
											A.EquipState = "[M] [A.EquipState] equip"
											A.icon_state = A.CarryState
											A.layer = 100
											usr.CreateList += A
									else
										var/obj/A = new src.type()
										A.Material = src.Material
										A.icon_state = src.CarryState
										A.EquipState = src.EquipState
										A.CarryState = src.CarryState
										A.layer = 100
										usr.CreateList += A
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							usr.DeleteInventoryMenu()
							usr.CreateInventory()
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
				Turban
					icon = 'clothes.dmi'
					icon_state = "turban"
					EquipState = "turban equip"
					CarryState = "turban"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Snakeman","Illithid")
					ItemLayer = 4.6
					Defence = 2
					BaseMaterial = "Cloth"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				WitchHunterHat
					icon = 'clothes.dmi'
					icon_state = "witch hunter hat"
					EquipState = "witch hunter hat equip"
					CarryState = "witch hunter hat"
					DefenceType = "Cloth"
					Weight = 1
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Snakeman","Illithid")
					ItemLayer = 4.6
					Defence = 2
					BaseMaterial = "Cloth"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				InquisitorsHelmet
					icon = 'equipment.dmi'
					icon_state = "inquisitor helmet"
					EquipState = "inquisitor helmet"
					CarryState = "inquisitor helm"
					DefenceType = "Plate"
					Weight = 20
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallCrown
					icon = 'misc.dmi'
					icon_state = "stahlite crown equip"
					EquipState = "stahlite crown equip"
					CarryState = "crown"
					DefenceType = "Plate"
					Weight = 4
					Dura = 100
					CantRaces = list("Giant","Cyclops","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 15
					BaseMaterial = "Metal"
					Type = "Crown"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				Crown
					icon = 'misc.dmi'
					icon_state = "crown equip"
					EquipState = "crown equip"
					CarryState = "crown"
					DefenceType = "Plate"
					Weight = 5
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling")
					ItemLayer = 4.9
					Defence = 15
					BaseMaterial = "Metal"
					Type = "Crown"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				GiantCrown
					icon = 'misc.dmi'
					icon_state = "giant crown equip"
					EquipState = "giant crown equip"
					CarryState = "crown"
					DefenceType = "Plate"
					Weight = 6
					Dura = 100
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.9
					Defence = 15
					BaseMaterial = "Metal"
					Type = "Crown"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
						src.RandomItemQuality()
				PriestHelmet
					icon = 'equipment.dmi'
					icon_state = "priest helm"
					EquipState = "priest helm"
					CarryState = "inquisitor priest helm"
					DefenceType = "Plate"
					Weight = 22
					Dura = 100
					CantRaces = list("Giant","Cyclops","Ratling","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 20
					Delete = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SkullHelmet
					icon = 'equipment.dmi'
					icon_state = "skull helm equip"
					EquipState = "skull helm equip"
					CarryState = "skull helm"
					DefenceType = "Chain"
					Weight = 5
					Dura = 100
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Defence = 5
					Material = "Bone"
					CanBeCrafted = 1
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmet5
					name = "Plate Helmet"
					icon = 'equipment.dmi'
					icon_state = "plate helm5"
					EquipState = "plate helm5"
					CarryState = "plate helm5"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmet4
					name = "Plate Helmet"
					icon = 'equipment.dmi'
					icon_state = "plate helm4"
					EquipState = "plate helm4"
					CarryState = "plate helm4"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmet3
					name = "Plate Helmet"
					icon = 'equipment.dmi'
					icon_state = "plate helm3"
					EquipState = "plate helm3"
					CarryState = "plate helm3"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmet2
					name = "Plate Helmet"
					icon = 'equipment.dmi'
					icon_state = "plate helm2"
					EquipState = "plate helm2"
					CarryState = "plate helm2"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmet
					icon = 'equipment.dmi'
					icon_state = "plate helm1"
					EquipState = "plate helm1"
					CarryState = "plate helm1"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Stahlite","Wolfman","Illithid")
					ItemLayer = 4.5
					Weight = 10
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmetRat
					icon = 'equipment.dmi'
					icon_state = "rat plate helm"
					EquipState = "rat plate helm"
					CarryState = "rat plate helm"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Human","Frogman","Alther","Stahlite","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					Weight = 7
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				PlateHelmetWolf
					icon = 'equipment.dmi'
					icon_state = "wolfman plate helm"
					EquipState = "wolfman plate helm"
					CarryState = "wolfman plate helm"
					DefenceType = "Plate"
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Giant","Snakeman","Cyclops","Illithid")
					ItemLayer = 4.5
					Weight = 8
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				GiantChainCoif
					icon = 'equipment.dmi'
					icon_state = "giant chain coif"
					EquipState = "giant chain coif"
					CarryState = "folded chain"
					DefenceType = "Chain"
					ItemLayer = 4.5
					CantRaces = list("Human","Alther","Ratling","Frogman","Stahlite","Wolfman","Snakeman","Illithid")
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 10
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallDwarvenHelmet3
					icon = 'equipment.dmi'
					icon_state = "small stahlite helm3"
					EquipState = "small stahlite helm3"
					CarryState = "small stahlite helm3"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallDwarvenHelmet2
					icon = 'equipment.dmi'
					icon_state = "small stahlite helm2"
					EquipState = "small stahlite helm2"
					CarryState = "small stahlite helm2"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					Weight = 7
					BaseMaterial = "Metal"
					New()
						src.icon_state = src.CarryState
						src.layer = 4
				SmallDwarvenHelmet
					icon = 'equipment.dmi'
					icon_state = "small stahlite helm1"
					EquipState = "small stahlite helm1"
					CarryState = "small stahlite helm1"
					DefenceType = "Plate"
					CantRaces = list("Giant","Cyclops","Ratling","Human","Alther","Frogman","Wolfman","Snakeman","Illithid")
					ItemLayer = 4.5
					CanBeCrafted = 1
					BaseMaterial = "Metal"
					Weight = 7
					New()
						src.icon_state = src.CarryState
						src.layer = 4

		Foods
			Click()
				if(usr.Dead == 0)
					if(usr.Function == "Interact")
						if(src in usr)
							if(src.ObjectType == "Berry")
								usr << "<font color = teal>Click a container you wish to add the Berry Juice to!<br>"
								usr.Ref = src
								return
					if(usr.Function == "Eat")
						if(src in usr)
							if(usr.Hunger <= src.Type)
								usr.Hunger += src.Type
							else
								usr << "<font color = green>You eat the [src], but you will need somthing a little better in order to sate your hunger!<br>"
								usr.Hunger += src.Type / 10
							if(usr.Hunger >= 100)
								usr.Hunger = 100
							view(usr) << "<font color =yellow>[usr] eats [src]!<br>"
							if(src.icon_state == "brain" && usr.Race == "Illithid")
								usr << "<font color = teal>You gain some Intelligence!<br>"
								if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
									usr.Intelligence += 0.2
							if(src.icon_state == "shroom")
								var/H = prob(15)
								if(H)
									usr << "<font color = purple>Y<font color = red>o<font color = yellow>u  <font color = red>F<font color = green>e<font color = yellow>e<font color = teal>l  <font color = blue>F<font color = yellow>u<font color = purple>n<font color = red>n<font color = green>y<br>"
									for(var/obj/HUD/GUI/ScreenOverlay/SO in usr.client.screen)
										SO.icon_state = "sick screen"
									usr.High(20)
							if(src.CookingFood == 1 && usr.CanEatRawMeats == 0)
								var/AlreadyIll = 0
								if("Ill" in usr.Afflictions)
									AlreadyIll = 1
								if(AlreadyIll == 0)
									usr.Afflictions += "Ill"
									usr.Illness(30)
							if(src.CookingFood == 1 && usr.CanEatRawMeats == 1)
								var/AlreadyIll = 0
								if("Ill" in usr.Afflictions)
									AlreadyIll = 1
								if(AlreadyIll == 0)
									var/GetsIll = prob(50)
									if(GetsIll)
										usr.Afflictions += "Ill"
										usr.Illness(20)
							usr.Weight -= src.Weight
							del(src)
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							for(var/obj/Items/Resources/CampSite/CS in range(1,src))
								if(src.CookingFood == 1 && CS.OnFire && src.icon != 'Skeleton.dmi')
									src.Cook(src.loc,CS,usr,0,0)
									view(usr) << "<font color = yellow>[usr] places down a [src] to cook!<br>"
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Cake
				icon = 'food.dmi'
				icon_state = "cake"
				Type = 50
				Weight = 2
			Bread
				icon = 'food.dmi'
				icon_state = "bread"
				Type = 60
				Weight = 3
			FishFilet
				icon = 'food.dmi'
				icon_state = "filet"
				Type = 40
				Weight = 8
				CookingFood = 1
			Brain
				icon = 'food.dmi'
				icon_state = "brain"
				CookedState = "brain"
				Type = 33
				Weight = 3
				CookingFood = 1
			Kidney
				icon = 'food.dmi'
				icon_state = "kidney"
				CookedState = "kidney"
				Type = 10
				Weight = 1
				CookingFood = 1
			Spleen
				icon = 'food.dmi'
				icon_state = "spleen"
				CookedState = "spleen"
				Type = 15
				Weight = 1
				CookingFood = 1
			Intestines
				icon = 'food.dmi'
				icon_state = "intestines"
				CookedState = "intestines"
				Type = 33
				Weight = 3
				CookingFood = 1
			Heart
				icon = 'food.dmi'
				icon_state = "heart"
				CookedState = "heart"
				Type = 25
				Weight = 2
				CookingFood = 1
			RawMeat
				icon = 'food.dmi'
				icon_state = "meat2"
				CookedState = "cooked meat2"
				Type = 50
				Weight = 10
				CookingFood = 1
			RawMeatChunck
				icon = 'food.dmi'
				icon_state = "meat"
				CookedState = "cooked meat"
				Type = 50
				Weight = 10
				CookingFood = 1
			BlueBerries
				icon = 'food.dmi'
				icon_state = "blue berries"
				ObjectType = "Berry"
				Type = 12
				Weight = 1
				Red = 0
				Green = 0
				Blue = 200
			RedBerries
				icon = 'food.dmi'
				icon_state = "red berries"
				ObjectType = "Berry"
				Type = 12
				Weight = 1
				Red = 200
				Green = 0
				Blue = 0
			Mushroom
				icon = 'plants.dmi'
				icon_state = "shroom"
				Type = 24
				Weight = 1
				New()
					spawn(10)
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T.icon_state != "grass")
								if(T.icon_state != "ash floor")
									if(T.icon_state != "dirt")
										if(T.icon_state != "dirt road")
											del(src)

		Plants
			icon = 'plants.dmi'
			suffix = "Stuck"
			DeadTree2
				name = "Tree"
				icon_state = "trunk2"
				density = 1
				Type = "Tree"
				Fuel = 100
				opacity = 1
				desc = "This is a small tree, it can be cut down or stripped of leaves using various tools.<br>"
				Click()
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.density)
								if(usr.Weapon)
									var/obj/W = usr.Weapon
									if(W.Type == "Hatchet")
										if(usr.Job == null)
											if(src.icon_state == "small stump")
												view(usr) << "<font color = yellow>[usr] hacks a large notch in the side of the stump!<br>"
												src.density = 0
												src.Rot()
												usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti / 3
												usr.GainStats(2.5)
												return
							if(src.opacity == 0)
								return
							if(usr.Weapon)
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to chop away at the tree!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "CutTree"
										usr.CanMove = 0
										var/Time = 300 - usr.WoodCuttingSkill * 2
										if(Time <= 50)
											Time = 50
										spawn(Time)
											if(src)
												if(usr)
													if(src in range(1,usr))
														if(usr.Job == "CutTree" && src.opacity)
															usr.Job = null
															src.icon_state = "small stump"
															src.overlays = null
															src.opacity = 0
															for(var/turf/T in range(0,src))
																Tiles += T
															usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
															usr.GainStats(3)
															var/obj/Items/Resources/FelledTree2/T = new
															var/DIR = rand(1,2)
															if(DIR == 1)
																T.loc = locate(src.x+1,src.y,src.z)
															if(DIR == 2)
																T.loc = locate(src.x-1,src.y,src.z)
															for(var/mob/M in range(0,T))
																var/WontHit = 0
																WontHit += M.Agility * 2
																if(M == usr)
																	WontHit += usr.WoodCuttingSkill
																var/Misses = prob(WontHit)
																if(Misses)
																	view(M) << "<font color = red>[M] dodges the falling Tree!<br>"
																else
																	view(M) << "<font color = red>The tree falls on [M]!<br>"
																	M.Skull -= 20
																	M.Blood -= 30
																	M.Bleed()
															usr.MovementCheck()
				New()
					spawn(10)
						if(src.icon_state == "trunk2")
							src.overlays += /obj/Items/Plants/Branches/Tree2Branch1/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			Tree2
				name = "Tree"
				icon_state = "trunk2"
				density = 1
				Type = "Tree"
				Fuel = 100
				opacity = 1
				desc = "This is a small tree, it can be cut down or stripped of leaves using various tools.<br>"
				Click()
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.density)
								if(usr.Weapon)
									var/obj/W = usr.Weapon
									if(W.Type == "Hatchet")
										if(usr.Job == null)
											if(src.icon_state == "small stump")
												view(usr) << "<font color = yellow>[usr] hacks a large notch in the side of the stump!<br>"
												src.density = 0
												src.Rot()
												usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti / 3
												usr.GainStats(2.5)
												return
							if(src.opacity == 0)
								return
							var/obj/W = null
							var/CanDo = 0
							if(usr.Weapon)
								W = usr.Weapon
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(usr.Weapon2 && W == null)
								W = usr.Weapon2
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(CanDo && W)
								if(usr.Job == null)
									if(W.Dura <= 1)
										usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
										return
									view(usr) << "<font color=yellow>[usr] begins to chop away at the tree!<br>"
									W.Dura -= rand(0.5,1)
									usr.CheckWeaponDura(W)
									usr.Job = "CutTree"
									usr.CanMove = 0
									var/Time = 300 - usr.WoodCuttingSkill * 2
									if(Time <= 50)
										Time = 50
									spawn(Time)
										if(src && usr)
											if(src in range(1,usr))
												if(usr.Job == "CutTree" && src.opacity)
													usr.Job = null
													src.icon_state = "small stump"
													src.overlays = null
													src.opacity = 0
													for(var/turf/T in range(0,src))
														Tiles += T
													usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
													usr.GainStats(3)
													var/obj/Items/Resources/FelledTree2/T = new
													var/DIR = rand(1,2)
													if(DIR == 1)
														T.loc = locate(src.x+1,src.y,src.z)
													if(DIR == 2)
														T.loc = locate(src.x-1,src.y,src.z)
													for(var/mob/M in range(0,T))
														var/WontHit = 0
														WontHit += M.Agility * 2
														if(M == usr)
															WontHit += usr.WoodCuttingSkill
														var/Misses = prob(WontHit)
														if(Misses)
															view(M) << "<font color = red>[M] dodges the falling Tree!<br>"
														else
															view(M) << "<font color = red>The tree falls on [M]!<br>"
															M.Skull -= 20
															M.Blood -= 30
															M.Bleed()
													usr.MovementCheck()
				New()
					spawn(10)
						if(src.icon_state == "trunk2")
							src.overlays += /obj/Items/Plants/Branches/Tree2Branch1/
							src.overlays += /obj/Items/Plants/Branches/Tree2Leaves1/
							src.overlays += /obj/Items/Plants/Branches/Tree2Leaves2/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			BurntTree2
				name = "Tree"
				icon_state = "burnt2"
				density = 1
				Type = "Tree"
				Fuel = 0
				opacity = 1
				New()
					spawn(10)
						if(src.icon_state == "burnt2")
							src.overlays += /obj/Items/Plants/Branches/BurntTree2Branch1/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			BurntTree1
				name = "Tree"
				icon_state = "burnt1"
				density = 1
				opacity = 1
				Type = "Tree"
				Fuel = 0
				New()
					spawn(10)
						if(src.icon_state == "burnt1")
							src.overlays += /obj/Items/Plants/Branches/BurntTree1Branch1/
							src.overlays += /obj/Items/Plants/Branches/BurntTree1Branch2/
							src.overlays += /obj/Items/Plants/Branches/BurntTree1Branch3/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			DeadTree1
				name = "Tree"
				icon_state = "trunk1"
				density = 1
				opacity = 1
				Type = "Tree"
				Fuel = 100
				desc = "This is a tree, it can be cut down or stripped of leaves using various tools.<br>"
				Click()
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.density)
								if(usr.Weapon)
									var/obj/W = usr.Weapon
									if(W.Type == "Hatchet")
										if(usr.Job == null)
											if(src.icon_state == "big stump")
												view(usr) << "<font color = yellow>[usr] hacks a large notch in the side of the stump, soon it will rot and fall apart.<br>"
												src.density = 0
												src.Rot()
												usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti / 3
												usr.GainStats(2.5)
												return
							if(src.opacity == 0)
								return
							if(usr.Weapon)
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to chop away at the tree!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "CutTree"
										usr.CanMove = 0
										var/Time = 300 - usr.WoodCuttingSkill * 2
										if(Time <= 50)
											Time = 50
										spawn(Time)
											if(src && usr)
												if(src in range(1,usr))
													if(usr.Job == "CutTree" && src.opacity)
														usr.Job = null
														src.icon_state = "big stump"
														src.overlays = null
														for(var/turf/T in range(0,src))
															Tiles += T
														src.opacity = 0
														usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
														usr.GainStats(3)
														var/obj/Items/Resources/FelledTree/T = new
														var/DIR = rand(1,2)
														if(DIR == 1)
															T.loc = locate(src.x+1,src.y,src.z)
														if(DIR == 2)
															T.loc = locate(src.x-1,src.y,src.z)
														for(var/mob/M in range(0,T))
															var/WontHit = 0
															WontHit += M.Agility * 2
															if(M == usr)
																WontHit += usr.WoodCuttingSkill
															var/Misses = prob(WontHit)
															if(Misses)
																view(M) << "<font color = red>[M] dodges the falling Tree!<br>"
															else
																view(M) << "<font color = red>The tree falls on [M]!<br>"
																M.Skull -= 30
																M.Blood -= 40
																M.Bleed()
														usr.MovementCheck()
				New()
					spawn(10)
						if(src.icon_state == "trunk1")
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch1/
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch2/
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch3/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			Tree1
				name = "Tree"
				icon_state = "trunk1"
				density = 1
				opacity = 1
				Type = "Tree"
				Fuel = 100
				desc = "This is a tree, it can be cut down or stripped of leaves using various tools.<br>"
				Click()
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.density)
								if(usr.Weapon)
									var/obj/W = usr.Weapon
									if(W.Type == "Hatchet")
										if(usr.Job == null)
											if(src.icon_state == "big stump")
												view(usr) << "<font color = yellow>[usr] hacks a large notch in the side of the stump, soon it will rot and fall apart.<br>"
												src.density = 0
												src.Rot()
												usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti / 3
												usr.GainStats(2.5)
												return
							if(src.opacity == 0)
								return
							var/obj/W = null
							var/CanDo = 0
							if(usr.Weapon)
								W = usr.Weapon
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(usr.Weapon2 && W == null)
								W = usr.Weapon2
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(CanDo && W)
								if(usr.Job == null)
									if(W.Dura <= 1)
										usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
										return
									view(usr) << "<font color=yellow>[usr] begins to chop away at the tree!<br>"
									W.Dura -= rand(0.5,1)
									usr.CheckWeaponDura(W)
									usr.Job = "CutTree"
									usr.CanMove = 0
									var/Time = 300 - usr.WoodCuttingSkill * 2
									if(Time <= 50)
										Time = 50
									spawn(Time)
										if(src && usr)
											if(src in range(1,usr))
												if(usr.Job == "CutTree" && src.opacity)
													usr.Job = null
													src.icon_state = "big stump"
													src.overlays = null
													src.opacity = 0
													for(var/turf/T in range(0,src))
														Tiles += T
													usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
													usr.GainStats(3)
													var/obj/Items/Resources/FelledTree/T = new
													var/DIR = rand(1,2)
													if(DIR == 1)
														T.loc = locate(src.x+1,src.y,src.z)
													if(DIR == 2)
														T.loc = locate(src.x-1,src.y,src.z)
													for(var/mob/M in range(0,T))
														var/WontHit = 0
														WontHit += M.Agility * 2
														if(M == usr)
															WontHit += usr.WoodCuttingSkill
														var/Misses = prob(WontHit)
														if(Misses)
															view(M) << "<font color = red>[M] dodges the falling Tree!<br>"
														else
															view(M) << "<font color = red>The tree falls on [M]!<br>"
															M.Skull -= 40
															M.Blood -= 50
															M.Bleed()
													usr.MovementCheck()

				New()
					spawn(10)
						if(src.icon_state == "trunk1")
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch1/
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch2/
							src.overlays += /obj/Items/Plants/Branches/Tree1Branch3/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves1/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves2/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves3/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves4/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves5/
							src.overlays += /obj/Items/Plants/Branches/Tree1Leaves6/
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			Bamboo
				icon_state = "bamboo1"
				Fuel = 30
				desc = "This is bamboo.<br>"
				density = 1
				opacity = 1
				New()
					var/I = rand(1,2)
					src.icon_state = "bamboo[I]"
					spawn(10)
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T.icon_state != "grass")
								if(T.icon_state != "ash floor")
									if(T.icon_state != "dirt")
										if(T.icon_state != "dirt road")
											del(src)
			Plant
				icon_state = "plant1"
				Fuel = 15
				desc = "This is a plant, depending on what type, it might be useful.<br>"
				New()
					spawn(10)
						var/I = rand(1,7)
						src.icon_state = "plant[I]"
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			Bush
				icon_state = "bush1"
				Fuel = 30
				desc = "This is a bush, you might find berries in them.<br>"
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							return
						if(usr.Function == "Combat")
							if(usr.Dead == 0 && usr.Fainted == 0 && usr.Stunned == 0 && usr.Job == null && usr.CanMove)
								var/HasArms = 1
								if(usr.LeftArm <= 20)
									if(usr.RightArm <= 20)
										HasArms = 0
								if(HasArms)
									view(usr) << "<font color = yellow>[usr] rips up the [src]!<br>"
									del(src)
									return
								else
									usr << "<font color = red>You cant do that with hurt arms!<br>"
									return
						if(usr.Function == "Interact")
							if(usr.Dead == 0)
								if(usr.Job == null)
									var/Loc = usr.loc
									if(usr.Fainted == 0)
										if(usr.Stunned == 0)
											if(src.Type)
												view(usr) << "<font color=yellow>[usr] begins to pick berries from the [src]!<br>"
												usr.Job = "PickBerries"
												usr.CanMove = 0
												var/Time = 150
												Time -= usr.FarmingSkill * 2
												if(Time <= 25)
													Time = 25
												spawn(Time)
													if(src && usr)
														if(usr.loc == Loc)
															if(usr.Job == "PickBerries")
																usr.Job = null
																usr.FarmingSkill += usr.FarmingSkillMulti
																if(src.Type == "RedBerries")
																	var/obj/Items/Foods/RedBerries/R = new
																	R.loc = usr.loc
																if(src.Type == "BlueBerries")
																	var/obj/Items/Foods/BlueBerries/B = new
																	B.loc = usr.loc
																src.Type = null
																src.overlays = null
																usr << "<font color =green>You finish picking berries from the [src]!<br>"
																usr.MovementCheck()
														else
															usr << "<font color=red>You moved from the position you were picking berries at, you failed to get any!<br>"
															usr.MovementCheck()
															return

				New()
					var/I = rand(1,3)
					src.icon_state = "bush[I]"
					var/HasBerries = prob(75)
					if(HasBerries)
						var/Colour = rand(1,2)
						if(Colour == 1)
							src.overlays += /obj/Items/Plants/Berries/RedBerries/
							src.Type = "RedBerries"
						if(Colour == 2)
							src.overlays += /obj/Items/Plants/Berries/BlueBerries/
							src.Type = "BlueBerries"
					spawn(10)
						for(var/turf/T in locate(src.x,src.y,src.z))
							if(T in Tiles)
								del(src)
			Berries
				RedBerries
					layer = 4
					icon_state = "berries1"
				BlueBerries
					layer = 4
					icon_state = "berries3"
			Branches
				BurntTree1Branch1
					layer = 7
					icon_state = "burnt tree 1x2"
					pixel_x = -32
					pixel_y = 32
				BurntTree1Branch2
					layer = 7
					icon_state = "burnt tree 2x2"
					pixel_y = 32
				BurntTree1Branch3
					layer = 7
					icon_state = "burnt tree 3x2"
					pixel_y = 32
					pixel_x = 32
				BurntTree2Branch1
					layer = 7
					icon_state = "burnt tree2 1x2"
					pixel_y = 32
				Tree1Branch1
					layer = 7
					icon_state = "tree 1x2"
					pixel_x = -32
					pixel_y = 32
				Tree1Branch2
					layer = 7
					icon_state = "tree 2x2"
					pixel_y = 32
				Tree1Branch3
					layer = 7
					icon_state = "tree 3x2"
					pixel_y = 32
					pixel_x = 32
				Tree2Branch1
					layer = 7
					icon_state = "tree2 1x2"
					pixel_y = 32
				Tree1Leaves1
					layer = 8
					icon_state = "leaves 1x2"
					pixel_x = -32
					pixel_y = 32
				Tree1Leaves2
					layer = 8
					icon_state = "leaves 2x2"
					pixel_y = 32
				Tree1Leaves3
					layer = 8
					icon_state = "leaves 3x2"
					pixel_y = 32
					pixel_x = 32
				Tree1Leaves4
					layer = 8
					icon_state = "leaves 1x1"
					pixel_x = -32
				Tree1Leaves5
					layer = 8
					icon_state = "leaves 2x1"
				Tree1Leaves6
					layer = 8
					icon_state = "leaves 3x1"
					pixel_x = 32
				Tree2Leaves1
					layer = 8
					icon_state = "leaves2 1x1"
				Tree2Leaves2
					layer = 8
					icon_state = "leaves2 1x2"
					pixel_y = 32
		Resources
			GoldOre
				icon = 'materials.dmi'
				icon_state = "Gold ore"
				Weight = 20
				Type = "Ore"
				Material = "Gold"
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			SilverOre
				icon = 'materials.dmi'
				icon_state = "Silver ore"
				Weight = 15
				Type = "Ore"
				Material = "Silver"
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Charcoal
				icon = 'materials.dmi'
				icon_state = "charcoal"
				Weight = 2
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Interact")
						if(src in usr)
							usr << "<font color=green>Click another object to interact with this one!<br>"
							usr.Ref = src
							return
			Coal
				icon = 'materials.dmi'
				icon_state = "Coal"
				Weight = 10
				Fuel = 200
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Interact")
						if(src in usr)
							usr << "<font color=green>Click another object to interact with this one!<br>"
							usr.Ref = src
							return
			CopperOre
				icon = 'materials.dmi'
				icon_state = "Copper ore"
				Weight = 12
				Type = "Ore"
				Material = "Copper"
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			IronOre
				icon = 'materials.dmi'
				icon_state = "Iron ore"
				Weight = 15
				Type = "Ore"
				Material = "Iron"
				New()
					src.CraftPotential = rand(10,100)
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "StoneShard")
						usr << "<font color=green>You scratch the Iron Ore and the Stone Shard together and create sparks!<br>"
						for(var/obj/Items/Resources/CampSite/C in range(1,usr))
							if(C.icon_state != "campfire")
								if(C.Fuel)
									C.icon_state = "campfire"
									C.OnFire = 1
									view(C) << "<font color=yellow>[C] sets on fire!<br>"
									C.luminosity = 5
									C.CreateSmoke()
									C.Burn(0)
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Brick
				icon = 'materials.dmi'
				icon_state = "brick"
				Weight = 10
				Material = "Stone"
				Type = "SmallBrick"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.suffix == null)
							if(src in range(1,usr))
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to hammer the brick into stone shards!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "MakeShards"
										usr.CanMove = 0
										var/Time = 150 - usr.MasonarySkill * 2
										if(Time <= 20)
											Time = 20
										spawn(Time)
											if(src && usr)
												if(src in range(1,usr))
													if(usr.Job == "MakeShards")
														usr.Job = null
														usr.MasonarySkill += usr.MasonarySkillMulti
														var/Shards = 2
														while(Shards)
															var/obj/Items/Resources/StoneShard/SS = new
															SS.loc = src.loc
															Shards -= 1
														usr.MovementCheck()
														del(src)
												else
													usr << "<font color = red>The brick was moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The brick was moved, job failed!<br>"
													usr.MovementCheck()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return

					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Scrap
				icon = 'materials.dmi'
				icon_state = "Iron scrap"
				Weight = 10
				Type = "Ore"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Ingot
				icon = 'materials.dmi'
				icon_state = "Iron ingot"
				Weight = 10
				Type = "Ingot"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			LargeBrick
				icon = 'materials.dmi'
				icon_state = "large brick"
				Material = "Stone"
				Type = "LargeBrick"
				Weight = 40
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.suffix == null)
							if(src in range(1,usr))
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to hammer the large brick into smaller bricks!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "MakeBricks"
										usr.CanMove = 0
										var/Time = 150 - usr.MasonarySkill * 2
										if(Time <= 20)
											Time = 20
										spawn(Time)
											if(src && usr)
												if(src in range(1,usr))
													if(usr.Job == "MakeBricks")
														usr.Job = null
														view(usr) << "<font color=yellow>[usr] finishes hammering the large brick into smaller bricks!<br>"
														usr.MasonarySkill += usr.MasonarySkillMulti
														var/Bricks = 4
														var/ExtraBrick = prob(usr.MasonarySkill)
														if(ExtraBrick)
															Bricks += rand(1,4)
														while(Bricks)
															var/obj/Items/Resources/Brick/B = new
															B.loc = src.loc
															Bricks -= 1
														usr.MovementCheck()
														del(src)
												else
													usr << "<font color = red>The large brick was moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			StoneShard
				icon = 'materials.dmi'
				icon_state = "stone shard"
				Weight = 3
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in usr)
							usr << "<font color=green>Click another object to interact with this one!<br>"
							usr.Function = "StoneShard"
							usr.Ref = src
							return
					if(usr.Function == "StoneShard")
						if(usr.Ref != src)
							usr << "<font color=green>You scratch the two Stone Shards together and create sparks!<br>"
							for(var/obj/Items/Misc/StoneForge/S in range(1,usr))
								if(S.Type != "Lit")
									var/Burn = 0
									for(var/obj/Items/Resources/Coal/C in S)
										Burn += 2000
									for(var/obj/Items/Resources/Charcoal/Ch in S)
										Burn += 500
									if(Burn >= 1)
										for(var/obj/Items/Resources/Coal/C in S)
											del(C)
										for(var/obj/Items/Resources/Charcoal/Ch in S)
											del(Ch)
										S.ForgeBurn(Burn)
										S.icon_state = "forge lit"
										S.Type = "Lit"
										S.desc = "This Stone Forge seems to be burning away nicely<br>"
										view(usr) << "<font color = yellow>[usr] lights the [S] using two [src]!<br>"
										return
							for(var/obj/Items/Resources/CampSite/C in range(1,usr))
								var/Succeed = prob(15)
								if(Succeed)
									if(C.icon_state != "campfire")
										if(C.Fuel)
											view(C) << "<font color=yellow>[C] sets on fire!<br>"
											C.icon_state = "campfire"
											C.OnFire = 1
											C.luminosity = 5
											C.CreateSmoke()
											C.Burn(0)
											usr.Ref = null
											usr.Function = null
											for(var/obj/Items/Foods/F in range(1,C))
												if(F.CookingFood == 1 && C.OnFire)
													F.Cook(F.loc,C,usr,0,0)
													view(6,F) << "<font color = yellow>The near by [F] begins to cook!<br>"
											for(var/turf/T in range(1,src))
												if(T.Material == "Wood")
													for(var/mob/M in Players)
														if(M.Admin)
															M << "<font color = teal><b>([usr.key])[usr] has lit a camp site on fire next to a wooden wall/floor at [usr.x],[usr.y],[usr.z]!<br>"
															usr.Log_player("<font color = red><b>([usr.key])[usr] lights a camp site on fire near wooden floor/wall at [usr.x],[usr.y],[usr.z]</font><br>")
					if(usr.Ref)
						var/obj/I = usr.Ref
						if(I.Material == "iron")
							usr << "<font color=green>You scratch the Iron Ore and the Stone Shard together and create sparks!<br>"
							for(var/obj/Items/Resources/CampSite/C in range(1,usr))
								if(C.icon_state != "campfire")
									if(C.Fuel)
										C.icon_state = "campfire"
										C.OnFire = 1
										view(C) << "<font color=yellow>[C] sets on fire!<br>"
										C.luminosity = 5
										C.CreateSmoke()
										C.Burn(0)
										usr.Ref = null
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.overlays = null
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			SpiderWeb
				icon = 'materials.dmi'
				icon_state = "web"
				Weight  = 1
				Click()
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
			Skin
				icon = 'skins.dmi'
				icon_state = "Human skin"
				Weight  = 1
				Material = "Leather"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Ash
				icon = 'materials.dmi'
				icon_state = "ash"
				Weight  = 1
				New()
					spawn(2000)
						if(src)
							if(src.suffix == null)
								del(src)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Branch
				icon = 'materials.dmi'
				icon_state = "branch"
				Weight = 2
				Fuel = 25
				Dura = 25
				ItemLayer = 7
				Quality = 2
				DamageType = "Blunt"
				EquipState = "branch equip"
				CarryState = "branch"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Equip")
						if(src.suffix == "Carried")
							if(src in usr)
								if(src.Dura <= 0)
									usr << "<font color = red>[src] is broken, you cant use that!<br>"
									return
								if(usr.Weapon == null)
									if(usr.RightArm >= 25)
										src.layer = 5
										src.suffix = "Equip"
										src.overlays += image(/obj/HUD/E/)
										src.icon_state = src.EquipState
										usr.Weapon = src
										usr.overlays+=image(src.icon,src.icon_state,src.ItemLayer)
										src.layer = 20
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
										return
									else
										usr << "<font color =red>You cant do that with a damaged arm!<br>"
										return
						if(src.suffix == "Equip")
							if(src in usr)
								if(usr.Weapon == src)
									src.layer = 5
									usr.overlays-=image(src.icon,src.icon_state,src.ItemLayer)
									usr.Weapon = null
									src.suffix = "Carried"
									src.overlays-=image(/obj/HUD/E/)
									src.overlays+=image(/obj/HUD/C/)
									src.icon_state = src.CarryState
									src.layer = 20
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src in usr)
							usr << "<font color=green>Click another object to interact with this one!<br>"
							usr.Ref = src
							return
						if(src.suffix == null)
							if(src in range(1,usr))
								var/Num = 0
								var/Branches = list()
								for(var/obj/Items/Resources/Branch/B in range(1,usr))
									if(B.suffix == null)
										if(Num <= 3)
											Num += 1
											Branches += B
								if(Num >= 3)
									if(usr.Job == null)
										view(usr) << "<font color=yellow>[usr] begins to place some branches together!<br>"
										usr.Job = "MakeCampFire"
										usr.CanMove = 0
										var/Time = 150 - usr.CarpentrySkill * 2
										if(Time <= 20)
											Time = 20
										spawn(Time)
											if(usr && src)
												if(src in range(1,usr))
													if(src.suffix == null && usr.Job == "MakeCampFire")
														usr.Job = null
														usr.CarpentrySkill += usr.CarpentrySkillMulti
														var/obj/Items/Resources/CampSite/S = new
														S.loc = src.loc
														usr.MovementCheck()
														for(var/obj/I in Branches)
															del(I)
														for(var/turf/T in range(1,S))
															if(T.Material == "Wood")
																for(var/mob/M in Players)
																	if(M.Admin)
																		M << "<font color = teal><b>([usr.key])[usr] has created a camp site next to a wooden wall/floor at [usr.x],[usr.y],[usr.z]!<br>"
																		usr.Log_player("<font color = red><b>([usr.key])[usr] creates a camp site near wooden floor/wall at [usr.x],[usr.y],[usr.z]</font><br>")
												else
													usr << "<font color = red>The branches were moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
								else
									usr << "<font color=green>You need three branches in order to create a camp fire!<br>"
									return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Stone
				icon = 'materials.dmi'
				icon_state = "stone"
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.suffix == null)
							if(src in range(1,usr))
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hammer")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to hammer the stone into a large brick!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "MakeBrick"
										usr.CanMove = 0
										var/Time = 150 - usr.MasonarySkill * 2
										if(Time <= 20)
											Time = 20
										spawn(Time)
											if(usr && src)
												if(src in range(1,usr))
													if(usr.Job == "MakeBrick")
														usr.Job = null
														view(usr) << "<font color=yellow>[usr] finishes hammering the stone into a large brick!<br>"
														usr.MasonarySkill += usr.MasonarySkillMulti
														var/Bricks = 1
														var/ExtraBrick = prob(usr.MasonarySkill)
														if(ExtraBrick)
															Bricks += 1
														while(Bricks)
															var/obj/Items/Resources/LargeBrick/B = new
															B.loc = src.loc
															Bricks -= 1
														usr.MovementCheck()
														del(src)
												else
													usr << "<font color = red>The stone was moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Block
				icon = 'materials.dmi'
				icon_state = "block"
				Type = "Block"
				Material = "Wood"
				Weight = 4
				Fuel = 50
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Plank
				icon = 'materials.dmi'
				icon_state = "plank"
				Weight = 5
				Fuel = 100
				Type = "Plank"
				Material = "Wood"
				New()
					src.pixel_x = rand(-16,16)
					src.pixel_y = rand(-16,16)
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			CampSite
				icon = 'misc.dmi'
				icon_state = "campsite"
				Fuel = 150
				Click()
					if(src in range(1,usr))
						if(usr.Function == "Interact")
							if(src.icon_state == "campfire")
								if(usr.Fainted)
									usr << "<font color =red>You have fainted and cant do that!<br>"
									return
								if(usr.Stunned)
									usr << "<font color =red>You are stunned and cant do that!<br>"
									return
								if(usr.Ref)
									var/obj/O = usr.Ref
									if(O.Fuel)
										view(usr) << "<font color = yellow>[usr] throws a [O] into the [src]!<br>"
										usr.Weight -= O.Weight
										src.Fuel += O.Fuel / 4
										del(O)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.InvenUp = 0
										return
							if(src.icon_state == "campsite")
								if(usr.Fainted)
									usr << "<font color =red>You have fainted and cant do that!<br>"
									return
								if(usr.Stunned)
									usr << "<font color =red>You are stunned and cant do that!<br>"
									return
								if(usr.Weapon)
									var/obj/I = usr.Weapon
									if(I.Type == "Torch Lit")
										view(usr) << "<font color = yellow>[usr] places the Lit Torch into the Camp Site!<br>"
										src.icon_state = "campfire"
										src.OnFire = 1
										src.luminosity = 5
										src.CreateSmoke()
										src.Burn(0)
										for(var/obj/Items/Foods/F in range(1,src))
											if(F.CookingFood == 1 && src.OnFire)
												F.Cook(F.loc,src,usr,0,0)
												view(6,F) << "<font color = yellow>The near by [F] begins to cook!<br>"
										for(var/turf/T in range(1,src))
											if(T.Material == "Wood")
												for(var/mob/M in Players)
													if(M.Admin)
														M << "<font color = teal><b>([usr.key])[usr] has lit a camp site on fire next to a wooden wall/floor at [usr.x],[usr.y],[usr.z]!<br>"
														usr.Log_player("<font color = red><b>([usr.key])[usr] lights a camp site on fire near wooden floor/wall at [usr.x],[usr.y],[usr.z]</font><br>")
										return
								if(usr.Weapon2)
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch Lit")
										view(usr) << "<font color = yellow>[usr] places the Lit Torch into the Camp Site!<br>"
										src.icon_state = "campfire"
										src.OnFire = 1
										src.luminosity = 5
										src.CreateSmoke()
										src.Burn(0)
										for(var/obj/Items/Foods/F in range(1,src))
											if(F.CookingFood == 1 && src.OnFire)
												F.Cook(F.loc,src,usr,0,0)
												view(6,F) << "<font color = yellow>The near by [F] begins to cook!<br>"
										for(var/turf/T in range(1,src))
											if(T.Material == "Wood")
												for(var/mob/M in Players)
													if(M.Admin)
														M << "<font color = teal><b>([usr.key])[usr] has lit a camp site on fire next to a wooden wall/floor at [usr.x],[usr.y],[usr.z]!<br>"
														usr.Log_player("<font color = red><b>([usr.key])[usr] lights a camp site on fire near wooden floor/wall at [usr.x],[usr.y],[usr.z]</font><br>")
										return
							if(src.icon_state == "campfire")
								if(usr.Fainted)
									usr << "<font color =red>You have fainted and cant do that!<br>"
									return
								if(usr.Stunned)
									usr << "<font color =red>You are stunned and cant do that!<br>"
									return
								if(usr.Weapon)
									var/obj/I = usr.Weapon
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] places the Torch into the fire!<br>"
										usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
										return
								if(usr.Weapon2)
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] places the Torch into the fire!<br>"
										usr.overlays-=image(I.icon,"[I.icon_state] left",I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,"[I.icon_state] left",I.ItemLayer)
										return

			Log
				icon = 'materials.dmi'
				icon_state = "log"
				Fuel = 100
				Click()
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.suffix == null)
							if(src in range(1,usr))
								var/obj/W = null
								var/CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Hatchet")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to hack the log into blocks!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "MakeBlocks"
										usr.CanMove = 0
										var/Time = 150 - usr.WoodCuttingSkill * 2
										if(Time <= 20)
											Time = 20
										spawn(Time)
											if(src && usr)
												if(src in range(1,usr))
													if(usr.Job == "MakeBlocks")
														usr.Job = null
														usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
														usr.GainStats(3)
														var/Blocks = 3
														var/ExtraBlock = prob(usr.WoodCuttingSkill)
														if(ExtraBlock)
															Blocks += rand(1,3)
														while(Blocks)
															var/obj/Items/Resources/Block/B = new
															B.loc = src.loc
															Blocks -= 1
														usr.MovementCheck()
														del(src)
												else
													usr << "<font color = red>The log was moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
								CanDo = 0
								if(usr.Weapon)
									W = usr.Weapon
									if(W.Type == "Saw")
										CanDo = 1
									else
										W = null
								if(usr.Weapon2 && W == null)
									W = usr.Weapon2
									if(W.Type == "Saw")
										CanDo = 1
									else
										W = null
								if(CanDo && W)
									if(usr.Job == null)
										if(W.Dura <= 1)
											usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
											return
										view(usr) << "<font color=yellow>[usr] begins to saw the log into planks!<br>"
										W.Dura -= rand(0.5,1)
										usr.CheckWeaponDura(W)
										usr.Job = "MakePlanks"
										usr.CanMove = 0
										var/Time = 300 - usr.WoodCuttingSkill * 2
										if(Time <= 50)
											Time = 50
										spawn(Time)
											if(usr && src)
												if(src in range(1,usr))
													if(usr.Job == "MakePlanks")
														usr.Job = null
														usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
														usr.GainStats(3)
														var/Planks = 3
														var/ExtraPlank = prob(usr.WoodCuttingSkill)
														if(ExtraPlank)
															Planks += rand(1,3)
														while(Planks)
															var/obj/Items/Resources/Plank/P = new
															P.loc = src.loc
															Planks -= 1
														usr.MovementCheck()
														del(src)
												else
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
											else
												if(usr)
													usr << "<font color = red>The [src] was moved, job failed!<br>"
													usr.MovementCheck()
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			FelledTree
				icon = 'plants.dmi'
				icon_state = "felled tree"
				Fuel = 100
				name = "Fallen Tree"
				Click()
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src in range(1,usr))
							var/obj/W = null
							var/CanDo = 0
							if(usr.Weapon)
								W = usr.Weapon
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(usr.Weapon2 && W == null)
								W = usr.Weapon2
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(CanDo && W)
								if(usr.Job == null)
									if(W.Dura <= 1)
										usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
										return
									view(usr) << "<font color=yellow>[usr] begins to chop the fallen tree into a log!<br>"
									W.Dura -= rand(0.5,1)
									usr.CheckWeaponDura(W)
									usr.Job = "MakeLogs"
									usr.CanMove = 0
									var/Time = 150 - usr.WoodCuttingSkill * 2
									if(Time <= 20)
										Time = 20
									spawn(Time)
										if(src && usr)
											if(src in range(1,usr))
												if(usr.Job == "MakeLogs")
													usr.Job = null
													usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
													var/Logs = 1
													var/ExtraLog = prob(usr.WoodCuttingSkill)
													if(ExtraLog)
														Logs += 1
													while(Logs)
														var/obj/Items/Resources/Log/L = new
														L.loc = src.loc
														Logs -= 1
													var/obj/Items/Resources/Branch/B = new
													B.loc = src.loc
													var/obj/Items/Resources/Branch/B2 = new
													B2.loc = src.loc
													var/obj/Items/Resources/Branch/B3 = new
													B3.loc = src.loc
													usr.MovementCheck()
													del(src)
											else
												usr << "<font color = red>The fallen tree was moved, job failed!<br>"
												usr.MovementCheck()
										else
											if(usr)
												usr << "<font color = red>The fallen tree was moved, job failed!<br>"
												usr.MovementCheck()

				New()
					src.overlays += /obj/Items/Resources/FelledTreePart2
			FelledTreePart2
				icon = 'plants.dmi'
				icon_state = "felled tree 2"
				pixel_x = 32
				Fuel = 100
				name = "Fallen Tree"
			FelledTree2
				icon = 'plants.dmi'
				icon_state = "felled tree2"
				name = "Fallen Tree"
				Click()
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src in range(1,usr))
							var/obj/W = null
							var/CanDo = 0
							if(usr.Weapon)
								W = usr.Weapon
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(usr.Weapon2 && W == null)
								W = usr.Weapon2
								if(W.Type == "Hatchet")
									CanDo = 1
								else
									W = null
							if(CanDo && W)
								if(usr.Job == null)
									if(W.Dura <= 1)
										usr << "<font color = red>The [W] is Broken, you can not do this job!<br>"
										return
									view(usr) << "<font color=yellow>[usr] begins to chop the fallen tree into branches!<br>"
									W.Dura -= rand(0.5,1)
									usr.CheckWeaponDura(W)
									usr.Job = "MakeLogs"
									usr.CanMove = 0
									var/Time = 150 - usr.WoodCuttingSkill * 2
									if(Time <= 20)
										Time = 20
									spawn(Time)
										if(src && usr)
											if(src in range(1,usr))
												if(usr.Job == "MakeLogs")
													usr.Job = null
													usr.WoodCuttingSkill += usr.WoodCuttingSkillMulti
													var/obj/Items/Resources/Branch/B = new
													B.loc = src.loc
													var/obj/Items/Resources/Branch/B2 = new
													B2.loc = src.loc
													var/obj/Items/Resources/Branch/B3 = new
													B3.loc = src.loc
													var/obj/Items/Resources/Branch/B4 = new
													B4.loc = src.loc
													var/obj/Items/Resources/Branch/B5 = new
													B5.loc = src.loc
													var/obj/Items/Resources/Branch/B6 = new
													B6.loc = src.loc
													usr.MovementCheck()
													del(src)
											else
												usr << "<font color = red>The fallen tree was moved, job failed!<br>"
												usr.MovementCheck()
										else
											if(usr)
												usr << "<font color = red>The fallen tree was moved, job failed!<br>"
												usr.MovementCheck()
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
				New()
					src.overlays += /obj/Items/Resources/FelledTreePart2_2
			FelledTreePart2_2
				icon = 'plants.dmi'
				icon_state = "felled tree2 2"
				pixel_x = 32

		Currency
			icon = 'misc.dmi'
			GoldCoin
				icon_state = "gold coin"
				Weight = 0
				Type = 1
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											var/Num=input(usr,"How many coins do you wish to move from this [src.Type] coin pile?")as num
											if(Num <= 1)
												return
											if(Num >= src.Type + 1)
												return
											if(Num && usr.Container && src in C)
												usr << "You moved [Num] Gold Coins from [C] to your inventory!<br>"
												var/CoinsAlready = 0
												for(var/obj/Items/Currency/GoldCoin/G in usr)
													CoinsAlready = 1
												if(CoinsAlready == 0)
													var/obj/Items/Currency/GoldCoin/G = new
													G.Type = Num
													src.Type -= Num
													G.CoinAdjust()
													src.CoinAdjust()
													G.loc = usr
													G.suffix = "Carried"
													G.name = "[G.Type] Gold Coins"
													src.name = "[src.Type] Gold Coins"
												else
													for(var/obj/Items/Currency/GoldCoin/G in usr)
														G.Type += Num
														src.Type -= Num
														G.CoinAdjust()
														src.CoinAdjust()
														src.name = "[src.Type] Gold Coins"
														G.name = "[G.Type] Gold Coins"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												if(src.Type == 0)
													del(src)
												return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											var/Num=input(usr,"How many coins do you wish to move from this [src.Type] coin pile?")as num
											if(Num <= 1)
												return
											if(Num >= src.Type + 1)
												return
											if(Num && usr.Container && src in usr)
												usr << "You moved [Num] Gold Coins from your inventory to [C]!<br>"
												var/CoinsAlready = 0
												for(var/obj/Items/Currency/GoldCoin/G in C)
													CoinsAlready = 1
												if(CoinsAlready == 0)
													var/obj/Items/Currency/GoldCoin/G = new
													G.Type = Num
													src.Type -= Num
													G.CoinAdjust()
													src.CoinAdjust()
													G.loc = C
													G.suffix = "Carried"
													G.name = "[G.Type] Gold Coins"
													src.name = "[src.Type] Gold Coins"
												else
													for(var/obj/Items/Currency/GoldCoin/G in C)
														G.Type += Num
														src.Type -= Num
														G.CoinAdjust()
														src.CoinAdjust()
														src.name = "[src.Type] Gold Coins"
														G.name = "[G.Type] Gold Coins"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												if(src.Type == 0)
													del(src)
												return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src.suffix == "Carried" && src.Type >= 1 && src in usr)
							var/Num=input(usr,"How many coins do you wish to seperate from this [src.Type] coin pile?")as num
							if(Num <= 1)
								return
							if(Num >= src.Type)
								return
							if(Num && src in usr)
								var/obj/Items/Currency/GoldCoin/C = new
								C.Type = Num
								src.Type -= Num
								C.CoinAdjust()
								src.CoinAdjust()
								C.loc = usr.loc
								C.suffix = null
								C.name = "[C.Type] Gold Coins"
								src.name = "[src.Type] Gold Coins"
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.InvenUp = 0
								return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									src.overlays+=image(/obj/HUD/C/)
									for(var/obj/Items/Currency/C in usr)
										if(src != C)
											src.Type += C.Type
											src.CoinAdjust()
											src.name = "[src.Type] Gold Coins"
											del(C)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up some gold coins.<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
		Books_Scrolls
			icon = 'books.dmi'
			WantedPoster
				icon_state = "wanted poster"
				Fuel = 30
				Click()
					if(usr.Function == "Examine")
						usr << "[src.desc]"
			Parchment
				icon_state = "scroll"
			World_Map
				icon_state = "scroll"
				Click()
					if(usr.Function == "Interact" && src.suffix)
						usr << browse(file("World.bmp"))
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Book_of_Order
				Fuel = 30
				icon_state = "order book"
				desc = "This book is very powerful, it uses Astral Magic to Revive the fallen. To use it, just click Interact, then click the book, while standing over a body. The Human Priests think that their God of Order created it, but in fact, it was once an ordinary book, which was blessed by Human Priests. Because their faith in their God was so stern, Astral Magic was called forth and bound to the book, and so, it is considered Holy to the Human Empire. There is only One of these books in exsistance, its basically like the Orginal Bibal in terms of how Rare it is."
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && src.suffix)
						if(usr.Fainted)
							return
						if(usr.Sleeping)
							return
						for(var/obj/Items/Body/B in range(0,usr))
							var/mob/HasOwner = null
							if(B.Owner)
								if(ismob(B.Owner))
									HasOwner = B.Owner
								else
									for(var/mob/M in Players)
										if(M.name == B.Owner)
											HasOwner = M
								if(HasOwner && HasOwner.CanBeRevived)
									view(usr) << "<font color = yellow>[usr] opens their Book of Order, and begins to use its Healing Magics that are written within to revive [B].<br>"
									if(usr.AstralMagic <= 20)
										usr.AstralMagic += usr.MagicPotentcy / 100
										if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
											usr.Intelligence += usr.IntelligenceMulti / 3
											var/Harm = prob(10)
											if(Harm)
												if(usr.LeftArm)
													usr.LeftArm -= rand(1,20)
													if(usr.LeftArm <= 1)
														usr.LeftArm = 1
													usr.Pain += rand(5,15)
												if(usr.RightArm)
													usr.RightArm -= rand(1,20)
													if(usr.RightArm <= 1)
														usr.RightArm = 1
													usr.Pain += rand(5,15)
												if(usr.RightLeg)
													usr.RightLeg -= rand(1,20)
													if(usr.RightLeg <= 1)
														usr.RightLeg = 1
													usr.Pain += rand(5,15)
												if(usr.LeftLeg)
													usr.LeftLeg -= rand(1,20)
													if(usr.LeftLeg <= 1)
														usr.LeftLeg = 1
													usr.Pain += rand(5,15)
												var/Num = rand(50)
												while(Num)
													Num -= 1
													var/obj/Misc/SpellEffects/Dispel/D = new
													D.loc = usr.loc
													D.MoveRand()
													spawn(50)
														if(D)
															del(D)
												usr.overlays += /obj/Misc/SpellEffects/Dispel/
												spawn(50)
													if(usr)
														usr.overlays -= /obj/Misc/SpellEffects/Dispel/
												view(6,usr) << "<font color = purple>[usr]'s body is wreaked with leathal Magical energies due to lack in skill with Astral Magic.<br>"
									else
										if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
											usr.Intelligence += usr.IntelligenceMulti / 6
									HasOwner.GoodRevive(B)
									HasOwner.Heal()
									if(HasOwner.client == null)
										HasOwner.PickUpObjects()
									del(B)
									if(HasOwner.Age >= HasOwner.DieAge)
										HasOwner.CanBeRevived -= 1
						return
					if(usr.Function == "Examine")
						usr << "<font color = teal>[src.desc]<br>"
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/mob/M in Players)
								if(M.Admin)
									M << "<font color = teal><b>([usr.key])[usr] drops [src] at [src.x],[src.y],[src.z].<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									for(var/mob/M in Players)
										if(M.Admin)
											M << "<font color = teal><b>([usr.key])[usr] picks up [src] at [src.x],[src.y],[src.z].<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Book
				Fuel = 30
				icon_state = "plain book"
				desc = "A Plain and Empty Book."
				Click()
					if(usr.Function == "Interact" && usr.Fainted == 0 && usr.Stunned == 0 && src in usr)
						var/HasArms = 1
						if(usr.LeftArm <= 20 && usr.RightArm <= 20)
							HasArms = 0
						if(HasArms == 0)
							usr << "<font color = red>Your arms are either far too damaged, or missing!<br>"
							return
						if(usr.UsingBook == null)
							usr.UsingBook = src
							usr.Book()
							view() << "<font color = yellow>[usr] opens a book.<br>"
							return
						if(usr.UsingBook)
							usr.Delete("Book")
							for(var/obj/Misc/Spells/S in usr.client.screen)
								usr.client.screen -= S
							for(var/obj/Misc/SpellText/T in usr.client.screen)
								usr.client.screen -= T
							usr.UsingBook = null
							view() << "<font color = yellow>[usr] closes a book.<br>"
							return
					if(usr.Function == "Examine")
						usr << "<font color = teal>[src.desc]<br>"
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			Book_of_Necromancy
				Fuel = 30
				icon_state = "necromancy book"
				desc = "This book is very old and powerful. It can be used to either revive a pile of lifeless bones and a skull, to form a skeleton. Or it can be used to revive someone into a Zombie. To use it, just click Interact, then click the book, while standing over one of these things. This book once belonged to the first ever Lich, named Zarthor. It was a Human once, and once it had learned all it could from the God of Death, it wrote these secrets within this book. Its cover is created from the Hide of Demons, to bind the foul Magics within. The pages are made from Yew, and sometimes seap posion. It is more than likely than anyone who touches the book, will slowly turn down the Dark Path."
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && src.suffix)
						if(usr.Fainted)
							return
						if(usr.Sleeping)
							return
						var/obj/HasSkull = null
						var/obj/HasBones = null
						for(var/obj/Items/Misc/Skull/S in range(0,usr))
							if(S.suffix == null)
								HasSkull = S
								break
						for(var/obj/Items/Misc/Bones/B in range(0,usr))
							if(B.suffix == null)
								HasBones = B
								break
						if(HasSkull && HasBones)
							view(usr) << "<font color = purple>[usr] opens their [src] and begins to use its foul power to raise an undead minion!<br>"
							if(usr.Necromancery <= 20)
								usr.Necromancery += usr.MagicPotentcy / 100
								if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
									usr.Intelligence += usr.IntelligenceMulti / 3
								var/Harm = prob(15)
								if(Harm)
									if(usr.LeftArm)
										usr.LeftArm -= rand(1,20)
										if(usr.LeftArm <= 1)
											usr.LeftArm = 1
										usr.Pain += rand(5,15)
									if(usr.RightArm)
										usr.RightArm -= rand(1,20)
										if(usr.RightArm <= 1)
											usr.RightArm = 1
										usr.Pain += rand(5,15)
									if(usr.RightLeg)
										usr.RightLeg -= rand(1,20)
										if(usr.RightLeg <= 1)
											usr.RightLeg = 1
										usr.Pain += rand(5,15)
									if(usr.LeftLeg)
										usr.LeftLeg -= rand(1,20)
										if(usr.LeftLeg <= 1)
											usr.LeftLeg = 1
										usr.Pain += rand(5,15)
									var/Num = rand(50)
									while(Num)
										Num -= 1
										if(usr)
											var/obj/Misc/SpellEffects/Evil/D = new
											D.loc = usr.loc
											D.MoveRand()
											spawn(50)
												if(D)
													del(D)
									usr.overlays += /obj/Misc/SpellEffects/Evil/
									spawn(50)
										if(usr)
											usr.overlays -= /obj/Misc/SpellEffects/Evil/
									view(6,usr) << "<font color = purple>[usr]'s body is wreaked with leathal Magical energies due to lack in skill with Necromancery.<br>"
							else
								if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
									usr.Intelligence += usr.IntelligenceMulti / 6
							var/mob/NPC/Evil/Undead/Undead_Skeleton/S = new
							S.loc = usr.loc
							S.Strength += usr.Strength / 4 + usr.Necromancery / 4
							S.Agility += usr.Agility / 4 + usr.Necromancery / 4
							S.Endurance += usr.Endurance / 4 + usr.Necromancery / 4
							S.Faction = usr.Faction
							S.Dead = 1
							S.PickUpObjects()
							del(HasSkull)
							del(HasBones)
							spawn(20)
								if(S)
									S.Dead = 0
									S.Owner = usr
									S.FollowAI()
							return
						for(var/obj/Items/Body/B in range(0,usr))
							var/CanRes = 1
							if(B.LeftArm == 0 && B.RightArm == 0 && B.LeftLeg == 0 && B.RightLeg == 0)
								CanRes = 0
							if(B.Brain <= 20)
								CanRes = 0
							if(CanRes)
								var/mob/HasOwner = null
								if(B.Owner)
									if(ismob(B.Owner))
										HasOwner = B.Owner
									else
										for(var/mob/M in Players)
											if(M.name == B.Owner)
												HasOwner = M
									view(usr) << "<font color = purple>[usr] opens their [src] and begins to use its foul power to raise [B] to false life!<br>"
									if(usr.Necromancery <= 20)
										usr.Necromancery += usr.MagicPotentcy / 100
										if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
											usr.Intelligence += usr.IntelligenceMulti / 3
										var/Harm = prob(15)
										if(Harm)
											if(usr.LeftArm)
												usr.LeftArm -= rand(1,20)
												if(usr.LeftArm <= 1)
													usr.LeftArm = 1
												usr.Pain += rand(5,15)
											if(usr.RightArm)
												usr.RightArm -= rand(1,20)
												if(usr.RightArm <= 1)
													usr.RightArm = 1
												usr.Pain += rand(5,15)
											if(usr.RightLeg)
												usr.RightLeg -= rand(1,20)
												if(usr.RightLeg <= 1)
													usr.RightLeg = 1
												usr.Pain += rand(5,15)
											if(usr.LeftLeg)
												usr.LeftLeg -= rand(1,20)
												if(usr.LeftLeg <= 1)
													usr.LeftLeg = 1
												usr.Pain += rand(5,15)
											var/Num = rand(50)
											while(Num)
												Num -= 1
												if(usr)
													var/obj/Misc/SpellEffects/Evil/D = new
													D.loc = usr.loc
													D.MoveRand()
													spawn(50)
														if(D)
															del(D)
											usr.overlays += /obj/Misc/SpellEffects/Evil/
											spawn(50)
												if(usr)
													usr.overlays -= /obj/Misc/SpellEffects/Evil/
											view(6,usr) << "<font color = purple>[usr]'s body is wreaked with leathal Magical energies due to lack in skill with Necromancery.<br>"
									else
										if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
											usr.Intelligence += usr.IntelligenceMulti / 6
									if(HasOwner == null)
										var/mob/M = new
										HasOwner = M
									if(HasOwner)
										HasOwner.Target = null
										HasOwner.Strength += usr.Necromancery / 4
										HasOwner.Endurance += usr.Necromancery / 4
										HasOwner.Agility += usr.Necromancery / 4
										HasOwner.StrCap += usr.Necromancery / 4
										HasOwner.EndCap += usr.Necromancery / 4
										HasOwner.AgilCap += usr.Necromancery / 4
										HasOwner.EvilRevive(B)
										del(B)
					if(usr.Function == "Examine")
						usr << "<font color = teal>[src.desc]<br>"
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/mob/M in Players)
								if(M.Admin)
									M << "<font color = teal><b>([usr.key])[usr] drops [src] at [src.x],[src.y],[src.z].<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									for(var/mob/M in Players)
										if(M.Admin)
											M << "<font color = teal><b>([usr.key])[usr] picks up [src] at [src.x],[src.y],[src.z].<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
		Magical
			icon = 'magical artifacts.dmi'
			Mystical_Ball
				icon_state = "mystical ball"
				Weight = 1
				desc = "A strange ball that has an eerie inner glow. It seems to be made from crystal and emmits both a semi-transparent aura and low pitch gentle humm.<p> Using this ball will slowly increase Intelligence and Astral Magic. As your skill in Astral goes up, new abilties for this ball will unlock."
				Click()
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(usr.CanInteract == 0)
								usr << "<font color = red>You cant do that for a while!<br>"
								return
							if(usr.Sleeping)
								return
							if(usr.Fainted)
								return
							var/Arms = 0
							if(usr.LeftArm >= 25)
								Arms = 1
							if(usr.RightArm >= 25)
								Arms = 1
							if(Arms == 0)
								return
							usr.CanInteract = 0
							spawn(300)
								if(usr)
									usr.CanInteract = 1
							var/Understand = 0
							Understand = prob(usr.Intelligence + usr.AstralMagic)
							if(Understand)
								if(usr.AstralMagic <= 20)
									var/Harm = prob(20)
									if(Harm)
										if(usr.LeftArm)
											usr.LeftArm -= rand(1,20)
											if(usr.LeftArm <= 1)
												usr.LeftArm = 1
											usr.Pain += rand(5,15)
										if(usr.RightArm)
											usr.RightArm -= rand(1,20)
											if(usr.RightArm <= 1)
												usr.RightArm = 1
											usr.Pain += rand(5,15)
										if(usr.RightLeg)
											usr.RightLeg -= rand(1,20)
											if(usr.RightLeg <= 1)
												usr.RightLeg = 1
											usr.Pain += rand(5,15)
										if(usr.LeftLeg)
											usr.LeftLeg -= rand(1,20)
											if(usr.LeftLeg <= 1)
												usr.LeftLeg = 1
											usr.Pain += rand(5,15)
										var/Num = rand(50)
										while(Num)
											Num -= 1
											if(usr)
												var/obj/Misc/SpellEffects/Dispel/D = new
												D.loc = usr.loc
												D.MoveRand()
												spawn(50)
													if(D)
														del(D)
										usr.overlays += /obj/Misc/SpellEffects/Dispel/
										spawn(50)
											if(usr)
												usr.overlays -= /obj/Misc/SpellEffects/Dispel/
										view(6,usr) << "<font color = purple>[src] reacts in a negative way. [usr]'s body is wreaked with leathal Magical energies due to lack in skill with the Orb.<br>"
									usr.AstralMagic += usr.MagicPotentcy / 100
									if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
										usr.Intelligence += usr.IntelligenceMulti / 3
								else
									if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
										usr.Intelligence += usr.IntelligenceMulti / 6
								usr << "<font color = teal>You manage to activate the balls Magic...<br>"
								view(6,usr) << "<font color = yellow>[usr] waves their hands over a strange mystical ball..."
								var/list/menu = new()
								menu += "Telepath"
								if(usr.AstralMagic >= 5)
									menu += "Locate"
								if(usr.AstralMagic >= 15)
									menu += "Teleport"
								menu += "Cancel"
								var/Result = input(usr,"Choose a power to use.", "Choose", null) in menu
								if(Result == "Cancel")
									return
								if(Result == "Teleport")
									var/X = input("Input the X of where you wish to Magically Teleport to.")as null|num
									if(!X)
										return
									var/Y = input("Input the Y of where you wish to Magically Teleport to.")as null|num
									if(!Y)
										return
									var/Z = input("Input the Z of where you wish to Magically Teleport to.")as null|num
									if(!Z)
										return
									if(X && Y && Z)
										if(X >= 300)
											X = 300
										if(Y >= 250)
											Y = 250
										if(X <= 1)
											X = 1
										if(Y <= 1)
											Y = 1
										if(src.suffix == "Stuck")
											var/Cant = 0
											for(var/turf/T in block(locate(97,45,3),locate(115,38,3)))
												if(T.x == X && T.y == Y)
													Cant = 1
											if(Cant)
												usr << "<font color = red>You are un-able to open a portal there, strange Magics prevent it!<br>"
												return
										if(src in range(1,usr))
											view(6,usr) << "<font color = yellow>The [src] that [usr] holds suddenly glows a bright blue, opening a strange portal!<br>"
											if(usr.AstralMagic <= 20)
												usr << "<font color = purple>Your skill with using the Orb has effected the location you've chosen.<br>"
												var/PlusMinus = rand(1,2)
												if(PlusMinus == 1)
													X += rand(5,20)
													Y -= rand(5,20)
												if(PlusMinus == 2)
													X -= rand(5,20)
													Y += rand(5,20)
											if(Z == 2 && X <= 20 && Y <= 20)
												X = 40
												Y = 40
											var/obj/Misc/Gates/AstralGate/G = new
											G.loc = usr.loc
											var/obj/Misc/Gates/AstralGate/G2 = new
											G2.loc = locate(X,Y,Z)
											G2.GoesTo = G.loc
											G.GoesTo = G2.loc
								if(Result == "Locate")
									var/list/menu2 = new()
									var/Mobs = list()
									for(var/mob/M in world)
										if(M.client)
											menu2 += "[M.name]"
											if(M.OrginalName)
												menu2 += "[M.OrginalName]"
											Mobs += M
									menu2 += "Cancel"
									var/Result2 = input("Choose someone you want to Locate.", "Choose", null) in menu2
									if (Result2 == "Cancel")
										return
									if(Result2)
										var/mob/Found = null
										for(var/mob/M in Mobs)
											if(M.name == Result2)
												Found = M
											if(M.OrginalName == Result2)
												Found = M
										if(Found)
											if(src in range(1,usr))
												var/X = Found.x
												var/Y = Found.y
												var/Z = Found.z
												if(usr.AstralMagic <= 20)
													var/PlusMinus = rand(1,2)
													if(PlusMinus == 1)
														X += rand(5,20)
														Y -= rand(5,20)
													if(PlusMinus == 2)
														X -= rand(5,20)
														Y += rand(5,20)
												usr << "<font color = teal>You use the orbs powers to locate [Found], you think they might be at [X],[Y],[Z]<br>"
												return
								if(Result == "Telepath")
									var/list/menu2 = new()
									var/Mobs = list()
									for(var/mob/M in world)
										if(M.client)
											menu2 += "[M.name]"
											if(M.OrginalName)
												menu2 += "[M.OrginalName]"
											Mobs += M
									menu2 += "Cancel"
									var/Result2 = input("Choose someone you want to Telepath.", "Choose", null) in menu2
									if (Result2 == "Cancel")
										return
									if(Result2)
										var/mob/Found = null
										for(var/mob/M in Mobs)
											if(M.name == Result2)
												Found = M
											if(M.OrginalName == Result2)
												Found = M
										if(Found)
											if(src in range(1,usr))
												if(usr.Muted)
													usr << "<font color =red>You cant talk, your Muted!<br>"
													return
												var/T = input("Telepath - In Character")as null|text
												if(!T)
													return
												if(usr.invisibility && usr.Admin == 0)
													view(1,usr) << "<font color = teal>[usr] whispers:Wooooo....."
													return
												var/obj/SL = usr.CurrentLanguage
												var/NewText = null
												var/Text = null
												var/TextLength = lentext(T)
												var/Understands = 0
												if(usr.CurrentLanguage)
													for(var/obj/Misc/Languages/HL in Found.LangKnow)
														if(SL.name == HL.name)
															Understands = HL.SpeakPercent
															if(HL.SpeakPercent <= 100)
																var/NotSpeaker = 1
																if(HL in usr.LangKnow)
																	NotSpeaker = 0
																if(NotSpeaker)
																	if(SL.SpeakPercent >= HL.SpeakPercent && HL.SpeakPercent <= 97)
																		HL.SpeakPercent += Found.Intelligence / 20
																		if(Found.Intelligence <= Found.IntCap && Found.Intelligence <= WorldIntCap && Found.Intelligence <= Found.IntelligenceMax)
																			Found.Intelligence += Found.IntelligenceMulti / 10
												if(Understands == 0)
													Found.LearnRaceLanguages("[usr.CurrentLanguage]")
												while(TextLength >= 1)
													Text ="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
													var/Change = 0
													Change = prob(100 - Understands)
													if(Change)
														Found.CheckText(Text)
														NewText+="[Found.TextOutput]"
														Found.TextOutput = null
													if(Change == 0)
														NewText+="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
													TextLength--
												Found << "<font color=red>You hear [usr]'s voice in your head (In [SL.name]): [Safe_Guard(NewText)]<br>"
												usr << "<font color=red>[Found] hears your voice (In [SL.name]): [Safe_Guard(NewText)]<br>"
												usr.Log_player("([usr.key])[usr] Telepath to [Found] - [T]")
								return
							else
								if(usr.AstralMagic <= 20)
									usr.AstralMagic += usr.MagicPotentcy / 200
									if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
										usr.Intelligence += usr.IntelligenceMulti / 3
								usr << "<font color = teal>You failed to activate the balls Magic.<br>"
								view(6,usr) << "<font color = yellow>[usr] waves their hands over a strange mystical ball..."
								return
					if(usr.Function == "Examine")
						if(src in range(1,usr))
							usr << "<font color = teal>[src.desc]<br>"
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/mob/M in Players)
								if(M.Admin)
									M << "<font color = teal><b>([usr.key])[usr] drops [src] at [src.x],[src.y],[src.z].<br>"
							src.icon_state = "mystical ball"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									for(var/mob/M in Players)
										if(M.Admin)
											M << "<font color = teal><b>([usr.key])[usr] picks up [src] at [src.x],[src.y],[src.z].<br>"
									src.icon_state = "mystical ball glow"
									usr << "<font color = teal>[src] seems to react to your touch, glowing slightly.<br><br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
		Misc
			Skull
				icon = 'corpses.dmi'
				icon_state = "skull"
				Weight = 1
				Fuel = 15
				Material = "Bone"
				Type = "Skull"
				New()
					src.CraftPotential = rand(50,100)
					spawn(10000)
						if(src)
							if(src.suffix == null)
								del(src)
				Click()
					if(usr.Function == "Interact")
						usr.Ref = src
						usr.MovementCheck()
						if(usr.CanMove)
							usr.CreateBoneMenu(src)
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Combat")
						var/CanCrush = 0
						if(usr.Weapon)
							CanCrush = 1
						if(usr.Claws)
							CanCrush = 1
						if(CanCrush)
							if(src in range(1,usr))
								var/obj/W = usr.Weapon
								if(W.suffix)
									if(W.Dura >= 1)
										view(usr) << "<font color = yellow>[usr] smashes their [W] into the [src]!<br>"
										W.Dura -= rand(0.1,0.5)
										usr.CheckWeaponDura(W)
										del(src)
										return
			Fountain
				icon = 'misc.dmi'
				icon_state = "fountain"
				Material = "Stone"
				density = 1
				CanBeCrafted = 1
				suffix = "Stuck"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "LargeBrick")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four Large Bricks in order to create this item!<br>"
								return
							var/BrickNum = 0
							var/Bricks = list()
							for(var/obj/Items/Resources/LargeBrick/B in usr)
								if(BrickNum != 4)
									BrickNum += 1
									Bricks += B
							if(BrickNum != 4)
								usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
								return
							if(BrickNum == 4 && O.Type == "LargeBrick")
								var/LOC = usr.loc
								usr.Job = "CreateStoneFountain"
								usr.CanMove = 0
								var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bricks && usr.loc == LOC)
											BrickNum = 0
											Bricks = null
											Bricks = list()
											for(var/obj/Items/Resources/LargeBrick/B in usr)
												if(BrickNum != 4)
													BrickNum += 1
													Bricks += B
											if(BrickNum == 4 && O && usr.Job == "CreateStoneFountain")
												var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.MasonarySkill * 2
												W.suffix = null
												for(var/obj/I in Bricks)
													if(BrickNum != 0)
														BrickNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.MasonarySkill += usr.MasonarySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Oven
				icon = 'tools.dmi'
				icon_state = "oven"
				density = 1
				Type = "Not Active"
				Material = "Stone"
				CanBeCrafted = 1
				New()
					var/obj/Items/Misc/StoneOvenChimney/C = new
					C.pixel_y = 32
					src.overlays += C
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "SmallBrick")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Twelve Small Bricks in order to create this item!<br>"
								return
							var/BrickNum = 0
							var/Bricks = list()
							for(var/obj/Items/Resources/Brick/B in usr)
								if(BrickNum != 12)
									BrickNum += 1
									Bricks += B
							if(BrickNum != 12)
								usr << "<font color = red>You need Twelve Small Bricks in order to create this item!<br>"
								return
							if(BrickNum == 12 && O.Type == "SmallBrick")
								var/LOC = usr.loc
								usr.Job = "CreateOven"
								usr.CanMove = 0
								var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Small Bricks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bricks && usr.loc == LOC)
											BrickNum = 0
											Bricks = null
											Bricks = list()
											for(var/obj/Items/Resources/Brick/B in usr)
												if(BrickNum != 12)
													BrickNum += 1
													Bricks += B
											if(BrickNum == 12 && O && usr.Job == "CreateOven")
												var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.MasonarySkill * 2
												for(var/obj/I in Bricks)
													if(BrickNum != 0)
														BrickNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.MasonarySkill += usr.MasonarySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Small Bricks could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Small Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			StoneOvenChimney
				icon = 'tools.dmi'
				icon_state = "oven chimney"
				density = 1
				Type = "Not Lit"
			StoneForge
				icon = 'tools.dmi'
				icon_state = "forge"
				density = 1
				Type = "Not Lit"
				suffix = "Stuck"
				Material = "Stone"
				CanBeCrafted = 1
				Click()
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.Type == "Lit")
							if(src in range(1,usr))
								if(usr.Ref)
									var/obj/R = usr.Ref
									if(R.Type == "Ore" && R in usr)
										if(usr.Job == null)
											view(usr) << "<font color=yellow>[usr] places the [R] into the [src] and begins to smelt it into an ingot!!<br>"
											usr.Job = "MakeIngot"
											usr.CanMove = 0
											var/Time = 200 - usr.SmeltingSkill * 2
											if(Time <= 50)
												Time = 50
											spawn(Time)
												if(src && usr)
													if(src in range(1,usr))
														if(usr.Job == "MakeIngot")
															usr.Job = null
															R.loc = src
															usr.Weight -= R.Weight
															var/WontFail = prob(usr.SmeltingSkill + 30)
															if(src.Type != "Lit")
																WontFail = 0
															if(WontFail)
																if(usr.SmeltingSkill <= usr.SkillCap && usr.SmeltingSkill <= WorldSkillsCap)
																	usr.SmeltingSkill += usr.SmeltingSkillMulti
																var/obj/Items/Resources/Ingot/I = new
																I.Material = R.Material
																I.icon_state = "[I.Material] ingot"
																I.name = "[I.Material] ingot"
																I.Weight = R.Weight - 2
																I.CraftPotential = R.CraftPotential
																I.loc = usr.loc
																usr << "<font color = yellow>You sucessfully create an [I] !<br>"
															else
																usr << "<font color = red>You fail to create an ingot!<br>"
																if(usr.SmeltingSkill <= usr.SkillCap && usr.SmeltingSkill <= WorldSkillsCap)
																	usr.SmeltingSkill += usr.SmeltingSkillMulti / 2
																var/MakeMess = prob(50)
																if(MakeMess)
																	var/obj/Items/Resources/Scrap/I = new
																	I.Material = R.Material
																	I.icon_state = "[I.Material] scrap"
																	I.name = "[I.Material] scrap"
																	I.Weight = R.Weight
																	I.CraftPotential = R.CraftPotential / 2
																	I.loc = usr.loc
																	usr << "<font color = red>You create a [I] !<br>"
															usr.MovementCheck()
															del(R)
													else
														usr << "<font color = red>The forge was moved, job failed!<br>"
														usr.MovementCheck()
												else
													if(usr)
														usr << "<font color = red>The [src] was moved, job failed!<br>"
														usr.MovementCheck()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "SmallBrick")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Eight Small Bricks in order to create this item!<br>"
								return
							var/BrickNum = 0
							var/Bricks = list()
							for(var/obj/Items/Resources/Brick/B in usr)
								if(BrickNum != 8)
									BrickNum += 1
									Bricks += B
							if(BrickNum != 8)
								usr << "<font color = red>You need Eight Small Bricks in order to create this item!<br>"
								return
							if(BrickNum == 8 && O.Type == "SmallBrick")
								var/LOC = usr.loc
								usr.Job = "CreateForge"
								usr.CanMove = 0
								var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Small Bricks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bricks && usr.loc == LOC)
											BrickNum = 0
											Bricks = null
											Bricks = list()
											for(var/obj/Items/Resources/Brick/B in usr)
												if(BrickNum != 8)
													BrickNum += 1
													Bricks += B
											if(BrickNum == 8 && O && usr.Job == "CreateForge")
												var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.MasonarySkill * 2
												W.suffix = null
												for(var/obj/I in Bricks)
													if(BrickNum != 0)
														BrickNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.MasonarySkill += usr.MasonarySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Small Bricks could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Small Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
					if(usr.Function == "Interact")
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						if(src.Type == "Lit")
							if(usr.Weapon)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] in the [src]!<br>"
										usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
										return
							if(usr.Weapon2)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] in the [src]!<br>"
										usr.overlays-=image(I.icon,"[I.icon_state] left",I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip left"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,"[I.icon_state]",I.ItemLayer)
										return
						if(src in range(1,usr))
							if(usr.Ref == null)
								if(usr.Weapon)
									var/obj/I = usr.Weapon
									if(I.Type == "Torch Lit")
										if(src.Type != "Lit")
											var/Burn = 0
											for(var/obj/Items/Resources/Coal/C in src)
												Burn += 2000
												del(C)
											for(var/obj/Items/Resources/Charcoal/Ch in src)
												Burn += 500
												del(Ch)
											if(Burn >= 1)
												src.ForgeBurn(Burn)
												src.icon_state = "forge lit"
												src.Type = "Lit"
												src.desc = "This Stone Forge seems to be burning away nicely<br>"
											view(usr) << "<font color = yellow>[usr] places their [I] into the [src]!<br>"
									return
								if(usr.Weapon2)
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch Lit")
										if(src.Type != "Lit")
											var/Burn = 0
											for(var/obj/Items/Resources/Coal/C in src)
												Burn += 2000
												del(C)
											for(var/obj/Items/Resources/Charcoal/Ch in src)
												Burn += 500
												del(Ch)
											if(Burn >= 1)
												src.ForgeBurn(Burn)
												src.icon_state = "forge lit"
												src.Type = "Lit"
												src.desc = "This Stone Forge seems to be burning away nicely<br>"
											view(usr) << "<font color = yellow>[usr] places their [I] into the [src]!<br>"
									return
							if(usr.Ref)
								var/obj/I = usr.Ref
								var/CanBurn = 0
								if(I.icon_state == "charcoal")
									CanBurn = 1
								if(I.icon_state == "Coal")
									CanBurn = 1
								if(CanBurn)
									view(usr) << "<font color = yellow>[usr] throws [I] into the [src]!<br>"
									I.loc = src
									usr.Weight -= I.Weight
									usr.Ref = null
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									return
			Lock
				icon = 'tools.dmi'
				icon_state = "lock"
				Weight = 5
				CanBeCrafted = 1
				BaseMaterial = "Metal"
				Type = "Lock"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Make Lock"
								usr.CanMove = 0
								var/Time = 300 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Make Lock")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														var/MakeMess = prob(50)
														if(MakeMess)
															var/obj/Items/Resources/Scrap/M = new
															M.Material = O.Material
															M.icon_state = "[M.Material] scrap"
															M.name = "[M.Material] scrap"
															M.Weight = O.Weight
															M.CraftPotential = O.CraftPotential / 2
															M.loc = usr.loc
															usr << "<font color = red>You create a [M] !<br>"
															usr.Weight -= O.Weight
															del(O)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													W.suffix = null
													W.icon_state = "[W.Material] [W.icon_state]"
													W.Dura = usr.ForgingSkill * 2
													usr.Weight -= O.Weight
													del(O)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													var/K = input("Choose a Key Code for your Lock. It can be either a number or word but both the Lock Hole and Key's Key Code must match in order to Un-Lock anything.")as null|text
													if(!K)
														K = "Default"
													if(K)
														W.KeyCode = K
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Gold")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.icon_state = "[W.Material] lock"
											W.layer = 100
											usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Key
				icon = 'tools.dmi'
				icon_state = "key"
				Weight = 2
				CanBeCrafted = 1
				BaseMaterial = "Metal"
				Type = "Key"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								usr.Job = "Make Key"
								usr.CanMove = 0
								var/Time = 300 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(O && usr.Job == "Make Key")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														var/MakeMess = prob(50)
														if(MakeMess)
															var/obj/Items/Resources/Scrap/M = new
															M.Material = O.Material
															M.icon_state = "[M.Material] scrap"
															M.name = "[M.Material] scrap"
															M.Weight = O.Weight
															M.CraftPotential = O.CraftPotential / 2
															M.loc = usr.loc
															usr << "<font color = red>You create a [M] !<br>"
															usr.Weight -= O.Weight
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														del(O)
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													W.suffix = null
													W.icon_state = "[W.Material] [W.icon_state]"
													usr.Weight -= O.Weight
													del(O)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													var/K = input("Choose a Key Code for your Key. It can be either a number or word but both the Lock Hole and Key's Key Code must match in order to Un-Lock anything.")as null|text
													if(!K)
														K = "Default"
													if(K)
														W.KeyCode = K
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact" && usr.Ref == null)
						usr << "<font color=green>Click another object to interact with this one!<br>"
						usr.Ref = src
						return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Gold")
										for(var/M in Mats)
											var/obj/W = new src.type()
											W.Material = "[M]"
											W.icon_state = "[W.Material] key"
											W.layer = 100
											usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Anvil
				icon = 'tools.dmi'
				icon_state = "anvil"
				Weight = 50
				density = 1
				suffix = "Stuck"
				CanBeCrafted = 1
				Material = "Iron"
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 5)
										break
								if(IngotNum != 5)
									usr << "<font color = red>You need five Ingots of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Anvil"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 5)
														break
										if(IngotNum == 5 && usr.Job == "Anvil")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 5)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													W.suffix = null
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 5)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Bones
				icon = 'corpses.dmi'
				icon_state = "bones"
				Weight = 1
				Fuel = 15
				Material = "Bone"
				New()
					src.CraftPotential = rand(50,100)
					spawn(10000)
						if(src)
							if(src.suffix == null)
								del(src)
				Click()
					if(usr.Function == "Interact")
						usr.Ref = src
						usr.MovementCheck()
						if(usr.CanMove)
							usr.CreateBoneMenu(src)
						return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
			GraveStone
				icon = 'misc.dmi'
				icon_state = "grave1"
				suffix = "Stuck"
				New()
					var/I = rand(1,4)
					src.icon_state = "grave[I]"
			Bandage
				icon = 'misc.dmi'
				icon_state = "bandage"
				Fuel = 15
				Weight = 1
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(src in usr)
						if(src.suffix == "Carried" && usr.Dead == 0 && usr.Job == null && usr.Fainted == 0 && usr.Stunned == 0 && usr.Sleeping == 0 && usr.Function == "Interact")
							if(usr.Target)
								usr << "<font color = red>You have a target, you are busy fighting!<br>"
								return
							var/Cant = 0
							for(var/mob/Z in range(1,usr))
								if(Z.Target == usr)
									Cant = 1
							if(Cant)
								usr << "<font color = red>You are in combat and can not do that!<br>"
								return
							var/Arms = 1
							if(usr.RightArm == 0)
								if(usr.LeftArm == 0)
									Arms = 0
							if(Arms == 0)
								usr << "<font color=red>You have no arms, you can not use this item!<br>"
								return
							var/Heal = rand(2,5)
							Heal += usr.FirstAidSkill
							var/list/menu = new()
							for(var/mob/M in range(1,usr))
								menu += M
							menu += "Cancel"
							var/Result = input("Who do you wish to apply this bandage on?", "Choose", null) in menu
							if (Result == "Cancel")
								return
							if(Result)
								for(var/mob/M in range(1,usr))
									if(M == Result)
										if(M.Target)
											usr << "<font color = red>[M] has a target, they are busy fighting!<br>"
											return
										view(usr) << "<b>[usr] uses a [src] on [M]!<br>"
										var/EXPHeal = 0
										if(M.MortalWound)
											var/HealWound = prob(10)
											if(HealWound)
												M.MortalWound = 0
										if(M.RightArm)
											if(M.RightArm <= 100)
												EXPHeal = 1
											M.RightArm += Heal
											if(src.WoundRightArm)
												var/RemoveWound = prob(25)
												if(RemoveWound)
													src.overlays -= src.WoundRightArm
													src.WoundRightArm = null
											if(M.RightArm >= 100)
												M.RightArm = 100
										if(M.LeftArm)
											if(M.LeftArm <= 100)
												EXPHeal = 1
											M.LeftArm += Heal
											if(src.WoundLeftArm)
												var/RemoveWound = prob(25)
												if(RemoveWound)
													src.overlays -= src.WoundLeftArm
													src.WoundLeftArm = null
											if(M.LeftArm >= 100)
												M.LeftArm = 100
										if(M.RightLeg)
											if(M.RightLeg <= 100)
												EXPHeal = 1
											M.RightLeg += Heal
											if(src.WoundRightLeg)
												var/RemoveWound = prob(25)
												if(RemoveWound)
													src.overlays -= src.WoundRightLeg
													src.WoundRightLeg = null
											if(M.RightLeg >= 100)
												M.RightLeg = 100
										if(M.LeftLeg)
											if(M.LeftLeg <= 100)
												EXPHeal = 1
											M.LeftLeg += Heal
											if(src.WoundLeftLeg)
												var/RemoveWound = prob(25)
												if(RemoveWound)
													src.overlays -= src.WoundLeftLeg
													src.WoundLeftLeg = null
											if(M.LeftLeg >= 100)
												M.LeftLeg = 100
										if(M.Nose)
											if(M.Nose <= 100)
												EXPHeal = 1
											M.Nose += Heal
											if(M.Nose >= 100)
												M.Nose = 100
										if(M.LeftEar)
											if(M.LeftEar <= 100)
												EXPHeal = 1
											M.LeftEar += Heal
											if(M.LeftEar >= 100)
												M.LeftEar = 100
										if(M.RightEar)
											if(M.RightEar <= 100)
												EXPHeal = 1
											M.RightEar += Heal
											if(M.RightEar >= 100)
												M.RightEar = 100
										if(M.Throat)
											if(M.Throat <= 100)
												EXPHeal = 1
											M.Throat += Heal / 2
											if(M.Throat >= 100)
												M.Throat = 100
										if(M.Skull)
											if(M.Skull <= 100)
												EXPHeal = 1
											M.Skull += Heal / 2
											if(M.Skull >= 100)
												M.Skull = 100
										if(src.WoundTorso)
											var/RemoveWound = prob(25)
											if(RemoveWound)
												src.overlays -= src.WoundTorso
												src.WoundTorso = null
										if(src.WoundHead)
											var/RemoveWound = prob(25)
											if(RemoveWound)
												src.overlays -= src.WoundHead
												src.WoundHead = null
										if(M.Blood <= M.BloodMax)
											EXPHeal = 1
										M.Blood += rand(10,20)
										M.Blood += Heal / 2
										M.Pain -= Heal
										M.Pain -= rand(5,10)
										if(M.Pain <= 0)
											M.Pain = 0
										if(M.Blood >= M.BloodMax)
											M.Blood = M.BloodMax
										M.Bleed()
										if(EXPHeal)
											usr.FirstAidSkill += usr.FirstAidSkillMulti
										usr.Weight -= src.Weight
										del(src)
										return
			InquisitionSeal
				icon = 'misc.dmi'
				icon_state = "eagle sign"
				suffix = "Stuck"
				New()
					if(src.dir == NORTH)
						src.pixel_y = 32
					if(src.dir == SOUTH)
						src.pixel_y = -32
					if(src.dir == EAST)
						src.pixel_x = 32
					if(src.dir == WEST)
						src.pixel_x = -32
			Rock
				icon = 'plants.dmi'
				icon_state = "rock1"
				New()
					var/I = rand(1,4)
					src.icon_state = "rock[I]"
					spawn(1)
						for(var/turf/T in range(0,src))
							if(T in Tiles)
								del(src)
				Click()
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
			Stalagmite
				icon = 'terrain.dmi'
				icon_state = "stal1"
				Click()
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						return
				New()
					var/I = rand(1,3)
					src.icon_state = "stal[I]"
		Ammo
			WoodenArrow
				icon = 'misc.dmi'
				icon_state = "wooden arrow"
				Fuel = 10
				Weight = 2
				Click()
					if(usr.Function == "Interact" && src.suffix == "StuckIn")
						var/Can = 0
						if(usr.LeftArm >= 20)
							Can = 1
						if(usr.RightArm >= 20)
							Can = 2
						if(Can)
							view(usr) << "<font color = purple>[usr] pulls out the [src]!<br>"
							src.suffix = null
							src.overlays = null
							src.loc = usr.loc
							usr.Weight -= src.Weight
							usr.Blood -= src.Type
							usr.Bleed()
							usr.DeleteInventoryMenu()
							if(usr.InvenUp)
								usr.CreateInventory()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											if(usr.WExtra)
												var/obj/I = usr.WExtra
												if(I.suffix == "Equip")
													if(I.Type == "Quiver")
														var/Num = 0
														for(var/obj/O in I)
															Num += 1
														if(Num <= 30)
															usr.Weight -= I.Weight
															I.Weight += src.Weight
															usr.Weight += I.Weight
															src.suffix = "Carried"
															C.Weight -= src.Weight
															src.loc = I
															if(usr.InvenUp)
																usr.CreateInventory()
															usr.CreateContainerContents(C)
															usr << "<font color = green>You pick up [src] and place it in your [I]<br>"
															return
														else
															usr.Weight += src.Weight
															C.Weight -= src.Weight
															src.suffix = "Carried"
															src.loc = usr
															if(usr.InvenUp)
																usr.CreateInventory()
															usr.CreateContainerContents(C)
															usr << "<font color = red>[I] has too many arrows in it, you place the [src] in your inventory!<br>"
															return
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "PickUp")
						if(src in range(1,usr))
							if(usr.Dead == 0)
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										if(usr.WExtra)
											var/obj/I = usr.WExtra
											if(I.suffix == "Equip")
												if(I.Type == "Quiver")
													var/Num = 0
													for(var/obj/O in I)
														Num += 1
													if(Num <= 30)
														usr.Weight -= I.Weight
														I.Weight += src.Weight
														usr.Weight += I.Weight
														src.suffix = "Carried"
														src.loc = I
														usr << "<font color = green>You pick up [src] and place it in your [I]<br>"
														return
													else
														usr.Weight += src.Weight
														src.suffix = "Carried"
														src.loc = usr
														usr << "<font color = red>[I] has too many arrows in it, you place the [src] in your inventory!<br>"
														return
										else
											usr.Weight += src.Weight
											src.suffix = "Carried"
											src.overlays+=image(/obj/HUD/C/)
											src.loc = usr
											usr << "<b>You pick up [src]!<br>"
											return
									else
										usr << "<font color = red>Your carrying enough already!<br>"
										return
								if(src.suffix == "Carried" && src in usr)
									usr.Weight -= src.Weight
									src.overlays = null
									src.suffix = null
									src.loc = usr.loc
									src.layer = 4
									usr.client.screen -= src
									usr << "<b>You drop [src]!<br>"
									for(var/obj/HUD/Text/T in usr.client.screen)
										if(T.Type == "Weight")
											del(T)
									if(usr.InvenUp)
										usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
									usr.Delete("ScrollMiddle","BoxDelete")
									return
		Containers
			Dura = 100
			Bowl
				icon = 'containers.dmi'
				icon_state = "bowl"
				Weight = 1
				WeightMax = 3
				Type = null //Can be Liquids, Solids, ect.
				Fuel = 10
				desc = "This is a bowl, it can be used to store liquid in."
				Material = "Wood"
				CanBeCrafted = 1
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "Block")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need One Wooden Block in order to create this item!<br>"
								return
							var/BlockNum = 0
							var/Blocks = list()
							for(var/obj/Items/Resources/Block/B in usr)
								if(BlockNum != 1)
									BlockNum += 1
									Blocks += B
							if(BlockNum != 1)
								usr << "<font color = red>You need One Wooden Block in order to create this item!<br>"
								return
							if(BlockNum == 1 && O.Type == "Block")
								var/LOC = usr.loc
								usr.Job = "CreateBowl"
								usr.CanMove = 0
								var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Block into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Blocks && usr.loc == LOC)
											BlockNum = 0
											Blocks = null
											Blocks = list()
											for(var/obj/Items/Resources/Block/B in usr)
												if(BlockNum != 1)
													BlockNum += 1
													Blocks += B
											if(BlockNum == 1 && O && usr.Job == "CreateBowl")
												var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Blocks)
														if(BlockNum != 0)
															BlockNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.CarpentrySkill * 2
												W.suffix = null
												for(var/obj/I in Blocks)
													if(BlockNum != 0)
														BlockNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.CarpentrySkill += usr.CarpentrySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>One Block could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>One Block could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Interact")
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.ObjectType == "Berry" && src.Type == null)
								view(usr) << "<font color = yellow>[usr] crushes the [usr.Ref] into a [src].<br>"
								var/obj/Misc/ContainerOverlays/BowlOverlay/BO = new
								BO.layer = src.layer
								BO.Red = O.Red
								BO.Green = O.Green
								BO.Blue = O.Blue
								BO.icon += rgb(O.Red,O.Green,O.Blue)
								src.overlays += BO
								src.Type = "Dye/Ink/Food"
								src.ObjectTag = "Berry"
								src.Red = O.Red
								src.Green = O.Green
								src.Blue = O.Blue
								usr.Weight -= O.Weight
								del(O)
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								return
						if(usr.Ref == null)
							usr << "<font color=green>Double Click on Turf to empty or single Click another object to Interact!<br>"
							usr.Ref = src
							return
					if(usr.Function == "PickUp")
						if(src.suffix == "Carried" && src in usr)
							src.loc = usr.loc
							src.suffix = null
							src.layer = 4
							src.overlays = null
							usr.client.screen -= src
							usr.Weight -= src.Weight
							view() << "<b>[usr] drops [src]<br>"
							for(var/obj/HUD/Text/T in usr.client.screen)
								if(T.Type == "Weight")
									del(T)
							if(usr.InvenUp)
								usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
							usr.Delete("ScrollMiddle","BoxDelete")
							for(var/obj/Items/Resources/CampSite/CS in range(1,src))
								if(src.CookingFood == 1 && CS.OnFire && src.icon != 'Skeleton.dmi')
									src.Cook(src.loc,CS,usr,0,0)
									view(usr) << "<font color = yellow>[usr] places down a [src] to cook!<br>"
							return
						if(usr in range(1,src))
							if(src.suffix == null)
								if(usr.Weight <= usr.WeightMax)
									src.loc = usr
									src.suffix = "Carried"
									usr.Weight += src.Weight
									src.overlays+=image(/obj/HUD/C/)
									if(usr.InvenUp)
										usr.DeleteInventoryMenu()
										usr.CreateInventory()
									view() << "<b>[usr] picks up [src]<br>"
									return
								else
									usr << "<b>You cant carry too much weight!<br>"
									return
							else
								usr << "<b>You cant pick that item up!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Barrel
				icon = 'containers.dmi'
				icon_state = "barrel closed"
				Weight = 10
				WeightMax = 150
				Fuel = 50
				OpenState = "barrel"
				ClosedState = "barrel closed"
				desc = "This is a barrel, it can be used to store items in."
				Material = "Wood"
				CanBeCrafted = 1
				density = 1
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "Plank")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							var/PlankNum = 0
							var/Planks = list()
							for(var/obj/Items/Resources/Plank/P in usr)
								if(PlankNum != 4)
									PlankNum += 1
									Planks += P
							if(PlankNum != 4)
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							if(PlankNum == 4 && O.Type == "Plank")
								var/LOC = usr.loc
								usr.Job = "CreateBarrel"
								usr.CanMove = 0
								var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Planks && usr.loc == LOC)
											PlankNum = 0
											Planks = null
											Planks = list()
											for(var/obj/Items/Resources/Plank/P in usr)
												if(PlankNum != 4)
													PlankNum += 1
													Planks += P
											if(PlankNum == 4 && O && usr.Job == "CreateBarrel")
												var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.CarpentrySkill * 2
												W.suffix = null
												for(var/obj/I in Planks)
													if(PlankNum != 0)
														PlankNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.CarpentrySkill += usr.CarpentrySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.suffix == null)
								if(src.Locked == 0 && usr.Job == null)
									if(src.OpenState)
										src.icon_state = src.OpenState
									if(usr.InvenUp)
										usr.CreateInventory()
									usr.CreateContainerContents(src)
									usr.Container = src
									usr << "<b>You open [src]!<br>"
									return
								else
									usr << "<b>[src] is locked, you need to find a key or smash it open!<br>"
									return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			SandStoneCoffin
				icon = 'misc.dmi'
				icon_state = "sand coffin"
				Weight = 20
				suffix = "Stuck"
				WeightMax = 100
				density = 1
				desc = "This is a stone coffin, it can be used to store items in or dead bodies."
				Material = "SandStone"
				New()
					spawn(1)
						src.TreasureChest()
				Click()
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.Locked == 0)
								if(src.OpenState)
									src.icon_state = src.OpenState
								if(usr.InvenUp)
									usr.CreateInventory()
								usr.CreateContainerContents(src)
								usr.Container = src
								usr << "<b>You open [src]!<br>"
								return
							else
								usr << "<b>[src] is locked, you need to find a key or smash it open!<br>"
								return
			StoneCoffin
				icon = 'misc.dmi'
				icon_state = "stone coffin"
				Weight = 20
				WeightMax = 100
				OpenState = "stone coffin open"
				density = 1
				suffix = "Stuck"
				ClosedState = "stone coffin"
				desc = "This is a stone coffin, it can be used to store items in or dead bodies."
				Type = "Coffin"
				Material = "Stone"
				CanBeCrafted = 1
				New()
					spawn(1)
						src.TreasureChest()
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "LargeBrick")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
								return
							var/BrickNum = 0
							var/Bricks = list()
							for(var/obj/Items/Resources/LargeBrick/B in usr)
								if(BrickNum != 3)
									BrickNum += 1
									Bricks += B
							if(BrickNum != 3)
								usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
								return
							if(BrickNum == 3 && O.Type == "LargeBrick")
								var/LOC = usr.loc
								usr.Job = "CreateStoneCoffin"
								usr.CanMove = 0
								var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Bricks && usr.loc == LOC)
											BrickNum = 0
											Bricks = null
											Bricks = list()
											for(var/obj/Items/Resources/LargeBrick/B in usr)
												if(BrickNum != 3)
													BrickNum += 1
													Bricks += B
											if(BrickNum == 3 && O && usr.Job == "CreateStoneCoffin")
												var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.MasonarySkill * 2
												W.suffix = null
												for(var/obj/I in Bricks)
													if(BrickNum != 0)
														BrickNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.MasonarySkill += usr.MasonarySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.Job = null
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.Locked == 0)
								if(src.OpenState)
									src.icon_state = src.OpenState
								if(usr.InvenUp)
									usr.CreateInventory()
								usr.CreateContainerContents(src)
								usr.Container = src
								usr << "<b>You open [src]!<br>"
								return
							else
								usr << "<b>[src] is locked, you need to find a key or smash it open!<br>"
								return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			Cart
				icon = 'tools.dmi'
				icon_state = "Iron cart"
				Weight = 20
				WeightMax = 400
				Fuel = 0
				OpenState = "Iron cart"
				ClosedState = "Iron cart"
				desc = "This is a iron cart, it can be used to store items in."
				Material = "Iron"
				CanBeCrafted = 1
				New()
					spawn(1)
						src.TreasureChest()
				Click()
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 5)
										break
								if(IngotNum != 5)
									usr << "<font color = red>You need five Ingots of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 5)
														break
										if(IngotNum == 5 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 5)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti / 2
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.icon = src.icon
													W.Material = O.Material
													W.name = "[W.Material] [W.name]"
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 5)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.suffix == null)
								if(src.Locked == 0)
									if(src.OpenState)
										src.icon_state = src.OpenState
									if(usr.InvenUp)
										usr.CreateInventory()
									usr.CreateContainerContents(src)
									usr.Container = src
									usr << "<b>You open [src]!<br>"
									return
								else
									usr << "<b>[src] is locked, you need to find a key or smash it open!<br>"
									return

					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			IronChest
				icon = 'containers.dmi'
				icon_state = "Iron chest"
				Weight = 10
				WeightMax = 200
				Fuel = 0
				OpenState = "Iron chest open"
				ClosedState = "Iron chest"
				desc = "This is a iron chest, it can be used to store items in."
				Material = "Iron"
				CanBeCrafted = 1
				Dura = 100
				New()
					spawn(1)
						src.TreasureChest()
				Click()
					if(usr.Function == "Interact" && usr.Ref)
						if(usr in range(1,src))
							if(isobj(usr.Ref))
								var/obj/O = usr.Ref
								if(O.Type == "Hammer")
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged!<br>"
										return
									if(O != usr.Weapon)
										usr << "<font color = red>Equip the Hammer first!<br>"
										return
									var/list/menu = new()
									menu += "Repair Chest"
									if(src.KeyCode)
										menu += "Repair Lock"
									menu += "Cancel"
									var/Result = input(usr,"Choose an Area of the chest to repair.", "Choose", null) in menu
									if (Result == "Cancel")
										return
									if(Result == "Repair Chest")
										var/HasIngot = 0
										for(var/obj/Items/Resources/Ingot/I in usr)
											if(I.Material == "Iron")
												HasIngot = 1
												break
										var/CanRepair = 1
										for(var/mob/M in range(1,src))
											if(M != usr)
												CanRepair = 0
										if(HasIngot == 0)
											usr << "<font color = red>You will need one Iron Ingot to Repair this chest!<br>"
											return
										if(CanRepair == 0)
											usr << "<font color = red>Cant Repair with others near!<br>"
											return
										if(src.Dura >= usr.ForgingSkill * 2 + 100)
											usr << "<font color = red>This chest is beyond your skill to repair!<br>"
											return
										var/LOC = usr.loc
										usr.Job = "Repair Chest"
										usr.Ref = null
										usr.CanMove = 0
										var/Time = 600 - usr.Agility - usr.Intelligence
										if(Time <= 50)
											Time = 50
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										for(var/obj/HUD/B in usr.client.screen)
											if(B.Type == "Inventory")
												B.icon_state = "inv off"
										range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
										spawn(Time)
											if(usr)
												if(src && O && usr.loc == LOC)
													if(usr.Job == "Repair Chest")
														HasIngot = 0
														for(var/obj/Items/Resources/Ingot/I in usr)
															usr.Weight -= I.Weight
															del(I)
															HasIngot = 1
															break
														var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
														usr.Job = null
														usr.MovementCheck()
														if(HasIngot == 0)
															usr << "<font color = red>Iron Ingot was moved, crafting stopped!<br>"
															return
														if(Fail)
															range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
															return
														if(src.Dura <= usr.ForgingSkill * 2 + 101)
															src.Dura = usr.ForgingSkill * 2 + 101
														range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
														return
										return
									if(Result == "Repair Lock")
										var/obj/Lock = null
										for(var/obj/Items/Misc/Lock/L in src)
											Lock = L
										var/CanRepair = 1
										for(var/mob/M in range(1,src))
											if(M != usr)
												CanRepair = 0
										if(CanRepair == 0)
											usr << "<font color = red>Cant Repair with others near!<br>"
											return
										if(Lock.Dura >= usr.ForgingSkill * 2)
											usr << "<font color = red>This lock is beyond your skill to repair!<br>"
											return
										var/LOC = usr.loc
										usr.Job = "Repair Lock"
										usr.Ref = null
										usr.CanMove = 0
										var/Time = 600 - usr.Agility - usr.Intelligence
										if(Time <= 50)
											Time = 50
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										for(var/obj/HUD/B in usr.client.screen)
											if(B.Type == "Inventory")
												B.icon_state = "inv off"
										range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
										spawn(Time)
											if(usr)
												if(src && O && usr.loc == LOC)
													if(usr.Job == "Repair Lock")
														var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
															return
														if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
															Lock.Dura = usr.ForgingSkill * 2 + 1
														range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
														return
										return
								if(O.Type == "Key")
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged!<br>"
										return
									if(O.KeyCode == src.KeyCode)
										if(src.Locked == 0)
											view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
											src.Locked = 1
											usr.Ref = null
											return
										if(src.Locked)
											view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
											src.Locked = 0
											usr.Ref = null
											return
									else
										usr << "<font color = red>That is the wrong key for this chest!<br>"
										return
								if(O.Type == "Lock" && O.suffix)
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
										return
									if(src.KeyCode)
										usr << "<font color = red>This chest appears to already have a Lock Fitted.<br>"
										return
									if(usr.Weapon)
										var/obj/T = usr.Weapon
										if(T.Type == "Hammer")
											var/LOC = usr.loc
											usr.Job = "Fit Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 300 - usr.ForgingSkill * 1.5 - usr.Agility / 2 - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Fit Lock")
															var/Fail = prob(50 - usr.ForgingSkill - usr.Agility / 4 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
																usr.GainStats(3,"Yes")
																return
															usr.Weight -= O.Weight
															O.loc = src
															O.overlays = null
															O.suffix = "Fitted"
															O.icon_state = "[O.icon_state] fitted chest"
															src.KeyCode = O.KeyCode
															src.overlays += O
															usr.ForgingSkill += usr.ForgingSkillMulti
															usr.GainStats(2,"Yes")
															view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
															return
											return
										else
											usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
											return
									else
										usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
										return
					if(usr.Job == null && src in usr.CreateList )
						var/obj/NearForge = null
						var/obj/NearAnvil = null
						for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
							if(NearForge == null)
								if(F.Type == "Lit")
									NearForge = F
									break
								else
									usr << "<font color = red>The near by Forge is not lit!<br>"
						for(var/obj/Items/Misc/Anvil/A in range(1,usr))
							NearAnvil = A
						if(usr.Ref && NearForge && NearAnvil)
							var/obj/O = usr.Ref
							if(O.Type == "Ingot")
								var/Ingots = list()
								Ingots += O
								for(var/obj/Items/Resources/Ingot/I in usr)
									if(I != O && I.Material == O.Material)
										Ingots += I
								var/IngotNum = 0
								for(var/obj/I in Ingots)
									IngotNum += 1
									if(IngotNum == 3)
										break
								if(IngotNum != 3)
									usr << "<font color = red>You need three Ingots of the same Material to forge this item!<br>"
									return
								IngotNum = 0
								usr.Job = "Forge"
								usr.CanMove = 0
								var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
								spawn(Time)
									if(usr)
										if(Ingots)
											for(var/obj/I in Ingots)
												if(I in usr)
													IngotNum += 1
													if(IngotNum == 3)
														break
										if(IngotNum == 3 && usr.Job == "Forge")
											var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
											var/NF = 0
											var/NA = 0
											for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
												if(F.Type == "Lit")
													NF = 1
											for(var/obj/Items/Misc/Anvil/A in range(1,usr))
												NA = 1
											if(NF)
												if(NA)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														usr.Weight -= O.Weight
														IngotNum = 0
														var/MakeMess = prob(50)
														if(MakeMess)
															for(var/obj/I in Ingots)
																var/obj/Items/Resources/Scrap/M = new
																M.Material = I.Material
																M.icon_state = "[M.Material] scrap"
																M.name = "[M.Material] scrap"
																M.Weight = I.Weight
																M.CraftPotential = I.CraftPotential / 2
																M.loc = usr.loc
																usr << "<font color = red>You create a [M] !<br>"
																break
														for(var/obj/I in Ingots)
															if(IngotNum != 3)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														usr.GainStats(2)
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.ForgingSkill * 2
													W.suffix = null
													IngotNum = 0
													for(var/obj/I in Ingots)
														if(IngotNum != 3)
															IngotNum += 1
															usr.Weight -= I.Weight
															del(I)
													if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
														usr.ForgingSkill += usr.ForgingSkillMulti
													usr.GainStats(2)
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
												usr.MovementCheck()
												return
										else
											usr.MovementCheck()
											return
					if(usr.Function == "Combat" && usr.Job == null)
						if(usr in range(1,src))
							if(src.icon_state != src.OpenState)
								var/list/menu = new()
								menu += "Attack Chest"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the chest to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.icon_state != src.OpenState)
												var/DMG = usr.Strength
												if(usr.Weapon)
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														DMG += rand(W.Dura / 2,W.Dura)
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														DMG += rand(W.Dura / 2,W.Dura)
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 25 - DMG
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														range(src) << "<font color = red>[src] makes a loud metallic noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Chest")
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
									usr.Job = "SmashChest"
									usr.CanMove = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashChest" && src.icon_state != src.OpenState)
											var/DMG = usr.Strength
											if(usr.Weapon)
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													DMG += rand(W.Dura / 2,W.Dura)
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													DMG += rand(W.Dura / 2,W.Dura)
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 33 - DMG
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a loud metallic noise as it bends open after [usr] attacks it!<br>"
													for(var/obj/Items/I in src)
														if(I.suffix != "Fitted")
															I.loc = src.loc
															I.suffix = null
															I.overlays = null
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.suffix == null)
								if(src.Locked == 0)
									if(src.OpenState)
										src.icon_state = src.OpenState
										src.overlays = null
										for(var/obj/Items/Misc/Lock/L in src)
											if(L.suffix == "Fitted")
												L.icon_state = "[L.Material] lock fitted chest open"
												src.overlays += L
									if(usr.InvenUp)
										usr.CreateInventory()
									usr.CreateContainerContents(src)
									usr.Container = src
									usr << "<b>You open [src]!<br>"
									return
								else
									usr << "<font color = red>[src] is locked, you need to find a key or smash it open!<br>"
									return

					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							for(var/obj/Items/Misc/Lock/L in src)
								if(L.suffix == "Fitted")
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			WoodenChest
				icon = 'containers.dmi'
				icon_state = "chest"
				Weight = 10
				WeightMax = 100
				Fuel = 35
				OpenState = "chest open"
				ClosedState = "chest"
				desc = "This is a wooden chest, it can be used to store items in."
				Material = "Wood"
				CanBeCrafted = 1
				Dura = 50
				New()
					spawn(1)
						src.TreasureChest()
				Click()
					if(usr.Function == "Interact" && usr.Ref)
						if(usr in range(1,src))
							if(isobj(usr.Ref))
								var/obj/O = usr.Ref
								if(O.Type == "Saw")
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged!<br>"
										return
									if(O != usr.Weapon)
										usr << "<font color = red>Equip the Saw first!<br>"
										return
									var/list/menu = new()
									menu += "Repair Chest"
									if(src.KeyCode)
										menu += "Repair Lock"
									menu += "Cancel"
									var/Result = input(usr,"Choose an Area of the chest to repair.", "Choose", null) in menu
									if (Result == "Cancel")
										return
									if(Result == "Repair Chest")
										var/HasPlank = 0
										for(var/obj/Items/Resources/Plank/P in usr)
											HasPlank = 1
											break
										var/CanRepair = 1
										for(var/mob/M in range(1,src))
											if(M != usr)
												CanRepair = 0
										if(HasPlank == 0)
											usr << "<font color = red>You will need one Wooden Plank to Repair this chest!<br>"
											return
										if(CanRepair == 0)
											usr << "<font color = red>Cant Repair with others near!<br>"
											return
										if(src.Dura >= usr.CarpentrySkill * 2 + 50)
											usr << "<font color = red>This chest is beyond your skill to repair!<br>"
											return
										var/LOC = usr.loc
										usr.Job = "Repair Chest"
										usr.Ref = null
										usr.CanMove = 0
										var/Time = 600 - usr.Agility - usr.Intelligence
										if(Time <= 50)
											Time = 50
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										for(var/obj/HUD/B in usr.client.screen)
											if(B.Type == "Inventory")
												B.icon_state = "inv off"
										range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
										spawn(Time)
											if(usr)
												if(src && O && usr.loc == LOC)
													if(usr.Job == "Repair Chest")
														HasPlank = 0
														for(var/obj/Items/Resources/Plank/P in usr)
															usr.Weight -= P.Weight
															del(P)
															HasPlank = 1
															break
														var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
														usr.Job = null
														usr.MovementCheck()
														if(HasPlank == 0)
															usr << "<font color = red>Wooden Plank was moved, crafting stopped!<br>"
															return
														if(Fail)
															range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
															return
														if(src.Dura <= usr.CarpentrySkill * 2 + 51)
															src.Dura = usr.CarpentrySkill * 2 + 51
														range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
														return
										return
									if(Result == "Repair Lock")
										var/obj/Lock = null
										for(var/obj/Items/Misc/Lock/L in src)
											Lock = L
										var/CanRepair = 1
										for(var/mob/M in range(1,src))
											if(M != usr)
												CanRepair = 0
										if(CanRepair == 0)
											usr << "<font color = red>Cant Repair with others near!<br>"
											return
										if(Lock.Dura >= usr.ForgingSkill * 2)
											usr << "<font color = red>This lock is beyond your skill to repair!<br>"
											return
										var/LOC = usr.loc
										usr.Job = "Repair Lock"
										usr.Ref = null
										usr.CanMove = 0
										var/Time = 600 - usr.Agility - usr.Intelligence
										if(Time <= 50)
											Time = 50
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										for(var/obj/HUD/B in usr.client.screen)
											if(B.Type == "Inventory")
												B.icon_state = "inv off"
										range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
										spawn(Time)
											if(usr)
												if(src && O && usr.loc == LOC)
													if(usr.Job == "Repair Lock")
														var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
															return
														if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
															Lock.Dura = usr.ForgingSkill * 2 + 1
														range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
														return
										return
								if(O.Type == "Key")
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged!<br>"
										return
									if(O.KeyCode == src.KeyCode)
										if(src.Locked == 0)
											view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
											src.Locked = 1
											usr.Ref = null
											return
										if(src.Locked)
											view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
											src.Locked = 0
											usr.Ref = null
											return
									else
										usr << "<font color = red>That is the wrong key for this chest!<br>"
										return
								if(O.Type == "Lock" && O.suffix)
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms == 0)
										usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
										return
									if(src.KeyCode)
										usr << "<font color = red>This chest appears to already have a Lock Fitted.<br>"
										return
									if(usr.Weapon)
										var/obj/T = usr.Weapon
										if(T.Type == "Saw")
											var/LOC = usr.loc
											usr.Job = "Fit Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 300 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Fit Lock")
															var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
																usr.GainStats(3,"Yes")
																return
															usr.Weight -= O.Weight
															O.loc = src
															O.overlays = null
															O.suffix = "Fitted"
															O.icon_state = "[O.icon_state] fitted chest"
															src.KeyCode = O.KeyCode
															src.overlays += O
															usr.CarpentrySkill += usr.CarpentrySkillMulti
															usr.GainStats(2,"Yes")
															view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
															return
											return
										else
											usr << "<font color = red>You need a Saw in order to fit Locks!<br>"
											return
									else
										usr << "<font color = red>You need a Saw in order to fit Locks!<br>"
										return
					if(usr.Function == "Combat" && usr.Job == null)
						if(usr in range(1,src))
							if(src.icon_state != src.OpenState)
								var/list/menu = new()
								menu += "Attack Chest"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the chest to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									for(var/obj/Items/Misc/Lock/L in src)
										usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.icon_state != src.OpenState)
												var/DMG = usr.Strength
												if(usr.Weapon)
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														DMG += rand(W.Dura / 2,W.Dura)
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														DMG += rand(W.Dura / 2,W.Dura)
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 25 - DMG
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														range(src) << "<font color = red>[src] makes a loud creaking noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Chest")
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src]!<br>"
									usr.Job = "SmashChest"
									usr.CanMove = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashChest" && src.icon_state != src.OpenState)
											var/DMG = usr.Strength
											if(usr.Weapon)
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													DMG += rand(W.Dura / 2,W.Dura)
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Axe")
														DMG += 15
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													DMG += rand(W.Dura / 2,W.Dura)
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Axe")
														DMG += 15
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 25 - DMG
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a loud creaking noise as it splinters into pieces after [usr] attacks it!<br>"
													for(var/obj/Items/I in src)
														if(I.suffix != "Fitted")
															I.loc = src.loc
															I.suffix = null
															I.overlays = null
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "Plank")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							var/PlankNum = 0
							var/Planks = list()
							for(var/obj/Items/Resources/Plank/P in usr)
								if(PlankNum != 4)
									PlankNum += 1
									Planks += P
							if(PlankNum != 4)
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							if(PlankNum == 4 && O.Type == "Plank")
								var/LOC = usr.loc
								usr.Job = "CreateChest"
								usr.CanMove = 0
								var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Planks && usr.loc == LOC)
											PlankNum = 0
											Planks = null
											Planks = list()
											for(var/obj/Items/Resources/Plank/P in usr)
												if(PlankNum != 4)
													PlankNum += 1
													Planks += P
											if(PlankNum == 4 && O && usr.Job == "CreateChest")
												var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.CarpentrySkill * 2
												W.suffix = null
												for(var/obj/I in Planks)
													if(PlankNum != 0)
														PlankNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.CarpentrySkill += usr.CarpentrySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.suffix == null)
								if(src.Locked == 0)
									if(src.OpenState)
										src.icon_state = src.OpenState
										src.overlays = null
										for(var/obj/Items/Misc/Lock/L in src)
											if(L.suffix == "Fitted")
												L.icon_state = "[L.Material] lock fitted chest open"
												src.overlays += L
									if(usr.InvenUp)
										usr.CreateInventory()
									usr.CreateContainerContents(src)
									usr.Container = src
									usr << "<b>You open [src]!<br>"
									return
								else
									usr << "<font color = red>[src] is locked, you need to find a key or smash it open!<br>"
									return

					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							for(var/obj/Items/Misc/Lock/L in src)
								if(L.suffix == "Fitted")
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
			ChestofDrawers
				icon = 'furniture.dmi'
				icon_state = "chest of drawers"
				Weight = 15
				WeightMax = 150
				Fuel = 50
				density = 1
				Material = "Wood"
				CanBeCrafted = 1
				Click()
					if(usr.Job == null && src in usr.CreateList )
						if(usr.Ref)
							var/obj/O = usr.Ref
							if(O.Type != "Plank")
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							var/PlankNum = 0
							var/Planks = list()
							for(var/obj/Items/Resources/Plank/P in usr)
								if(PlankNum != 4)
									PlankNum += 1
									Planks += P
							if(PlankNum != 4)
								usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
								return
							if(PlankNum == 4 && O.Type == "Plank")
								var/LOC = usr.loc
								usr.Job = "CreateDrawers"
								usr.CanMove = 0
								var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
								if(Time <= 50)
									Time = 50
								usr.DeleteInventoryMenu()
								if(usr.InvenUp)
									usr.InvenUp = 0
								usr.ResetButtons()
								for(var/obj/HUD/B in usr.client.screen)
									if(B.Type == "Inventory")
										B.icon_state = "inv off"
								view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
								spawn(Time)
									if(usr)
										if(Planks && usr.loc == LOC)
											PlankNum = 0
											Planks = null
											Planks = list()
											for(var/obj/Items/Resources/Plank/P in usr)
												if(PlankNum != 4)
													PlankNum += 1
													Planks += P
											if(PlankNum == 4 && O && usr.Job == "CreateDrawers")
												var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
												usr.Job = null
												usr.MovementCheck()
												if(Fail)
													view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
													usr.GainStats(3,"Yes")
													return
												var/obj/W = new src.type(usr.loc)
												W.Material = O.Material
												W.Dura += usr.CarpentrySkill * 2
												W.suffix = null
												for(var/obj/I in Planks)
													if(PlankNum != 0)
														PlankNum -= 1
														usr.Weight -= I.Weight
														del(I)
												usr.CarpentrySkill += usr.CarpentrySkillMulti
												usr.GainStats(2,"Yes")
												view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
												return
											else
												usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
												usr.MovementCheck()
												return
										else
											usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
											usr.MovementCheck()
											return
					if(usr.Function == "Transfer")
						if(usr.Container)
							var/obj/C = usr.Container
							if(src.suffix == "Carried")
								if(src in C)
									if(C in range(1,usr))
										if(usr.Weight <= usr.WeightMax)
											src.loc = usr
											usr.Weight += src.Weight
											C.Weight -= src.Weight
											usr << "You moved [src] from [C] to your inventory!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>You are carrying enough already!<br>"
											return
						if(src.suffix == "Carried")
							if(src in usr)
								if(usr.Container)
									var/obj/C = usr.Container
									if(C in range(1,usr))
										if(C.Weight <= C.WeightMax)
											usr.Weight -= src.Weight
											C.Weight += src.Weight
											src.loc = C
											usr << "You moved [src] from your inventory to [C]!<br>"
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.CreateInventory()
											usr.CreateContainerContents(C)
											return
										else
											usr << "<b>[C] is carrying enough already!<br>"
											return
					if(usr.Function == "Interact")
						if(src in range(1,usr))
							if(src.suffix == null)
								if(src.Locked == 0)
									if(src.OpenState)
										src.icon_state = src.OpenState
									if(usr.InvenUp)
										usr.CreateInventory()
									usr.CreateContainerContents(src)
									usr.Container = src
									usr << "<b>You open [src]!<br>"
									return
								else
									usr << "<b>[src] is locked, you need to find a key or smash it open!<br>"
									return
					if(usr.Function == "Pull")
						if(src in range(1,usr))
							if(usr.Pull == src)
								usr.Pull = null
								if(src.Pull == usr)
									src.Pull = null
								view(usr) << "<b>[usr] stops pulling [src]<br>"
								return
							if(src.suffix == null)
								if(usr.Pull == null)
									usr.Pull = src
									src.Pull = usr
									usr.Pull()
									if(usr.Dead == 0)
										view(usr) << "<b>[usr] starts pulling [src]<br>"
									return
					if(usr.Function == "Examine")
						usr << "<font color=teal>[src.desc]"
						if(src in range(1,usr))
							var/Known = 0
							for(var/obj/Items/F in usr.CreateList)
								if(F.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									var/obj/W = new src.type()
									W.layer = 100
									usr.CreateList += W
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
						return
		Furniture
			Doors
				icon = 'terrain.dmi'
				IronGate
					icon_state = "gate"
					density = 1
					suffix = "Stuck"
					Weight = 30
					Dura = 300
					Fuel = 0
					CanBeCrafted = 1
					Material = "Iron"
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Hammer")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the gate first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Hammer first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Gate"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the Gate to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Gate")
											var/HasIngot = 0
											for(var/obj/Items/Resources/Ingot/I in usr)
												if(I.Material == "Iron")
													HasIngot = 1
													break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasIngot == 0)
												usr << "<font color = red>You will need one Iron Ingot to Repair this gate!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.ForgingSkill * 2 + 300)
												usr << "<font color = red>This gate is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Gate"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Gate" && usr.CantDoTask == 0)
															HasIngot = 0
															for(var/obj/Items/Resources/Ingot/I in usr)
																usr.Weight -= I.Weight
																del(I)
																HasIngot = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasIngot == 0)
																usr << "<font color = red>Iron Ingot was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.ForgingSkill * 2 + 301)
																src.Dura = usr.ForgingSkill * 2 + 301
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
						if(usr.Job == null && src in usr.CreateList )
							var/obj/NearForge = null
							var/obj/NearAnvil = null
							for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
								if(NearForge == null)
									if(F.Type == "Lit")
										NearForge = F
										break
									else
										usr << "<font color = red>The near by Forge is not lit!<br>"
							for(var/obj/Items/Misc/Anvil/A in range(1,usr))
								NearAnvil = A
							if(usr.Ref && NearForge && NearAnvil)
								var/obj/O = usr.Ref
								if(O.Type == "Ingot")
									var/Ingots = list()
									Ingots += O
									for(var/obj/Items/Resources/Ingot/I in usr)
										if(I != O && I.Material == O.Material)
											Ingots += I
									var/IngotNum = 0
									for(var/obj/I in Ingots)
										IngotNum += 1
										if(IngotNum == 4)
											break
									if(IngotNum != 4)
										usr << "<font color = red>You need five Ingots of the same Material to forge this item!<br>"
										return
									IngotNum = 0
									usr.Job = "Metal Gate"
									usr.CanMove = 0
									var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Ingots)
												for(var/obj/I in Ingots)
													if(I in usr)
														IngotNum += 1
														if(IngotNum == 4)
															break
											if(IngotNum == 4 && usr.Job == "Metal Gate")
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															IngotNum = 0
															var/MakeMess = prob(50)
															if(MakeMess)
																for(var/obj/I in Ingots)
																	var/obj/Items/Resources/Scrap/M = new
																	M.Material = I.Material
																	M.icon_state = "[M.Material] scrap"
																	M.name = "[M.Material] scrap"
																	M.Weight = I.Weight
																	M.CraftPotential = I.CraftPotential / 2
																	M.loc = usr.loc
																	usr << "<font color = red>You create a [M] !<br>"
																	break
															for(var/obj/I in Ingots)
																if(IngotNum != 4)
																	IngotNum += 1
																	usr.Weight -= I.Weight
																	del(I)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.Material = O.Material
														W.suffix = null
														IngotNum = 0
														for(var/obj/I in Ingots)
															if(IngotNum != 4)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														usr << "<font color = teal>The gate is now laying flat on the floor, in order to make it dense, you must Click Interact then Click the gate while its in your Inventory.<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
						if(usr.Function == "Interact" && src.suffix == "Carried")
							var/CanPlace = 1
							for(var/obj/Items/Furniture/Doors/IronGate/G in range(0,usr))
								CanPlace = 1
							if(CanPlace)
								usr << "<font color = green>You place the [src] down and secure it!<br>"
								src.suffix = "Stuck"
								src.density = 1
								src.loc = usr.loc
								usr.Weight -= src.Weight
								src.overlays = null
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Gate"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the gate to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Gate")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashGate"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashGate" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 2
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 75 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous noise as it bends and crinkles as [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										W.suffix = "None"
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact")
							var/CanOpen = 0
							if(usr in range(1,src))
								CanOpen = 1
							if(usr.CanUseTK)
								CanOpen = 1
							if(CanOpen)
								if(src.Locked == 0)
									if(src.density)
										if(src.Type != "Busy")
											src.GateFunctions("Open")
											view(5) << 'MetalGate.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
										return
									if(src.density == 0)
										if(src.Type != "Busy")
											src.GateFunctions("Close")
											view(5) << 'MetalGate.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
										return
								else
									usr << "<font color = red>This gate is locked!<br>"
									return

				WoodenGate
					icon = 'tools.dmi'
					icon_state = "gate"
					density = 1
					suffix = "Stuck"
					Weight = 10
					Fuel = 50
					Material = "Wood"
					Click()
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact")
							if(usr in range(1,src))
								if(usr.Dead)
									return
								if(src.density)
									src.density = 0
									src.icon_state = "gate open"
									view(5) << 'WoodDoor.wav'
									return
								if(src.density == 0)
									src.density = 1
									src.icon_state = "gate"
									view(5) << 'WoodDoor.wav'
									return
				StoneDoor
					icon_state = "Stone door"
					density = 1
					opacity = 1
					suffix = "Stuck"
					Weight = 50
					Fuel = 0
					Dura = 400
					CanBeCrafted = 1
					Material = "Stone"
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Hammer")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Hammer first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Door"
										if(src.KeyCode)
											menu += "Repair Lock"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the door to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Door")
											var/HasBrick = 0
											for(var/obj/Items/Resources/Brick/B in usr)
												HasBrick = 1
												break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasBrick == 0)
												usr << "<font color = red>You will need one Small Brick to Repair this door!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.MasonarySkill * 2 + 400)
												usr << "<font color = red>This door is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Door"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Door" && usr.CantDoTask == 0)
															HasBrick = 0
															for(var/obj/Items/Resources/Brick/B in usr)
																usr.Weight -= B.Weight
																del(B)
																HasBrick = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasBrick == 0)
																usr << "<font color = red>Small Brick was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.MasonarySkill * 2 + 401)
																src.Dura = usr.MasonarySkill * 2 + 401
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
										if(Result == "Repair Lock")
											var/obj/Lock = null
											for(var/obj/Items/Misc/Lock/L in src)
												Lock = L
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(Lock.Dura >= usr.ForgingSkill * 2)
												usr << "<font color = red>This lock is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Lock" && usr.CantDoTask == 0)
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
																return
															if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
																Lock.Dura = usr.ForgingSkill * 2 + 1
															range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
															return
											return
									if(O.Type == "Key")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Lock or Un-Lock it!<br>"
											return
										if(O.KeyCode == src.KeyCode)
											if(src.Locked == 0)
												view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
												src.Locked = 1
												usr.Ref = null
												return
											if(src.Locked)
												view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
												src.Locked = 0
												usr.Ref = null
												return
										else
											usr << "<font color = red>That is the wrong key for this door!<br>"
											return
									if(O.Type == "Lock" && O.suffix)
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
											return
										if(src.KeyCode)
											usr << "<font color = red>This door appears to already have a Lock Fitted.<br>"
											return
										var/CanFit = 0
										if(src.density && src.opacity)
											CanFit = 1
										if(CanFit == 0)
											usr << "<font color = red>The door must be closed in order to continue!<br>"
											return
										if(usr.Weapon)
											var/obj/T = usr.Weapon
											if(T.Type == "Hammer")
												var/LOC = usr.loc
												usr.Job = "Fit Lock"
												usr.Ref = null
												usr.CanMove = 0
												var/Time = 300 - usr.MasonarySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
												if(Time <= 50)
													Time = 50
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.InvenUp = 0
												usr.ResetButtons()
												for(var/obj/HUD/B in usr.client.screen)
													if(B.Type == "Inventory")
														B.icon_state = "inv off"
												view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
												spawn(Time)
													if(usr)
														if(src && O && usr.loc == LOC)
															if(usr.Job == "Fit Lock" && usr.CantDoTask == 0)
																var/Fail = prob(50 - usr.MasonarySkill - usr.Agility / 4 - usr.Intelligence / 2)
																usr.Job = null
																usr.MovementCheck()
																if(Fail)
																	view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																	usr.MasonarySkill += usr.MasonarySkillMulti / 2
																	usr.GainStats(3,"Yes")
																	return
																usr.Weight -= O.Weight
																O.loc = src
																O.overlays = null
																O.suffix = "Fitted"
																O.icon_state = "[O.icon_state] fitted door"
																O.pixel_x = -3
																O.pixel_y = 2
																src.KeyCode = O.KeyCode
																src.overlays += O
																usr.MasonarySkill += usr.MasonarySkillMulti
																usr.GainStats(2,"Yes")
																view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
																return
												return
											else
												usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
												return
										else
											usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
											return
						if(usr.Function == "Interact" && src.suffix == "Carried")
							var/CanPlace = 1
							for(var/obj/O in range(0,usr))
								if(O.suffix == "Stuck")
									CanPlace = 0
							if(CanPlace)
								usr << "<font color = green>You place the [src] down and secure it!<br>"
								src.suffix = "Stuck"
								src.opacity = 1
								src.density = 1
								src.loc = usr.loc
								usr.Weight -= src.Weight
								src.overlays = null
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "LargeBrick")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Four Large Bricks in order to create this item!<br>"
									return
								var/BrickNum = 0
								var/Bricks = list()
								for(var/obj/Items/Resources/LargeBrick/B in usr)
									if(BrickNum != 4)
										BrickNum += 1
										Bricks += B
								if(BrickNum != 4)
									usr << "<font color = red>You need Four Large Bricks in order to create this item!<br>"
									return
								if(BrickNum == 4 && O.Type == "LargeBrick")
									var/LOC = usr.loc
									usr.Job = "CreateStoneDoor"
									usr.CanMove = 0
									var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Bricks && usr.loc == LOC)
												BrickNum = 0
												Bricks = null
												Bricks = list()
												for(var/obj/Items/Resources/LargeBrick/B in usr)
													if(BrickNum != 4)
														BrickNum += 1
														Bricks += B
												if(BrickNum == 4 && O && usr.Job == "CreateStoneDoor")
													var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Bricks)
															if(BrickNum != 0)
																BrickNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.MasonarySkill += usr.MasonarySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.MasonarySkill * 3
													W.suffix = null
													W.density = 0
													W.opacity = 0
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													usr << "<font color = teal>The door is now laying flat on the floor, in order to make it dense, you must Click Interact then Click the door while its in your Inventory.<br>"
													return
												else
													usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
													usr.Job = null
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								for(var/obj/Items/Misc/Lock/L in src)
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										W.suffix = "None"
										usr.CreateList += W
										var/KnowsKey = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Key/)
												KnowsKey = 1
										if(KnowsKey == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Key/K = new
												K.layer = 100
												K.Material = "[M]"
												K.icon_state = "[M] key"
												usr.CreateList += K
										var/KnowsLock = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Lock/)
												KnowsLock = 1
										if(KnowsLock == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Lock/L = new
												L.layer = 100
												L.Material = "[M]"
												L.icon_state = "[M] lock"
												usr.CreateList += L
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Door"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										usr.CantDoTask = 1
										spawn(150)
											if(usr)
												usr.CantDoTask = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.density && src.suffix == "Stuck")
												var/DMG = usr.Strength
												var/Holding = 0
												if(usr.Weapon)
													Holding += 1
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													Holding += 1
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(Holding == 2)
													DMG = DMG / 1.5
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 50 - usr.Strength
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														range(src) << "<font color = red>[src] makes a loud rumbling noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud rumbling noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud rumbling noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 50 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous rumbling noise as it shatter when [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud rumbling noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud rumbling noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							switch(alert("Knock on the door, or open/close it?",,"Cancel","Knock","Open/Close"))
								if("Knock")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.density)
											range(6,src) << "<font color = yellow>A knocking noise can be heard from the [src]!<br>"
											return
								if("Open/Close")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.Locked)
											usr << "<font color = red>This door is Locked tight!<br>"
											return
										if(src.density)
											src.density = 0
											src.opacity = 0
											src.icon_state = "Stone door open"
											src.overlays = null
											view(5) << 'WoodDoor.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
										if(src.density == 0)
											src.density = 1
											src.opacity = 1
											src.icon_state = "Stone door"
											if(src.KeyCode)
												for(var/obj/I in src)
													src.overlays += I
											view(5) << 'WoodDoor2.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
				StrangeCrystalDoor
					icon_state = "strange crystal door"
					density = 1
					opacity = 1
					suffix = "Stuck"
					Weight = 100
					Fuel = 0
					Dura = 1000
					CanBeCrafted = 1
					Material = "Stone"
					Click()
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							switch(alert("Knock on the door, or open/close it?",,"Cancel","Knock","Open/Close"))
								if("Knock")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.density)
											range(6,src) << "<font color = yellow>A knocking noise can be heard from the [src]!<br>"
											return
								if("Open/Close")
									if(usr in range(1,src))
										if(usr.Dead)
											return
										if(src.density)
											if(usr.AstralMagic >= 20)
												src.density = 0
												src.opacity = 0
												src.icon_state = "strange crystal door open"
												view(6,src) << "<font color = purple>[src] reacts to [usr]'s touch!<br>"
												return
											else
												usr << "<font color = red>You try to open the door but it appears stuck! Upon touching it, you feel a strange sensation.<br>"
												return
										else
											if(usr.AstralMagic >= 20)
												src.density = 1
												src.opacity = 1
												src.icon_state = "strange crystal door"
												view(6,src) << "<font color = purple>[src] reacts to [usr]'s touch!<br>"
												return
											else
												usr << "<font color = red>You try to open the door but it appears stuck! Upon touching it, you feel a strange sensation.<br>"
												return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Door"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 75 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous noise as it bends and crinkles as [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud humm as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud humm as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
				IronPrisonDoor
					icon_state = "Iron prison door"
					density = 1
					suffix = "Stuck"
					Weight = 35
					Fuel = 0
					Dura = 400
					CanBeCrafted = 1
					Material = "Iron"
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Hammer")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Hammer first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Door"
										if(src.KeyCode)
											menu += "Repair Lock"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the door to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Door")
											var/HasIngot = 0
											for(var/obj/Items/Resources/Ingot/I in usr)
												if(I.Material == "Iron")
													HasIngot = 1
													break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasIngot == 0)
												usr << "<font color = red>You will need one Iron Ingot to Repair this door!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.ForgingSkill * 2 + 400)
												usr << "<font color = red>This door is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Door"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Door" && usr.CantDoTask == 0)
															HasIngot = 0
															for(var/obj/Items/Resources/Ingot/I in usr)
																usr.Weight -= I.Weight
																del(I)
																HasIngot = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasIngot == 0)
																usr << "<font color = red>Iron Ingot was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.ForgingSkill * 2 + 401)
																src.Dura = usr.ForgingSkill * 2 + 401
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
										if(Result == "Repair Lock")
											var/obj/Lock = null
											for(var/obj/Items/Misc/Lock/L in src)
												Lock = L
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(Lock.Dura >= usr.ForgingSkill * 2)
												usr << "<font color = red>This lock is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Lock" && usr.CantDoTask == 0)
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
																return
															if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
																Lock.Dura = usr.ForgingSkill * 2 + 1
															range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
															return
											return
									if(O.Type == "Key")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Lock or Un-Lock it!<br>"
											return
										if(O.KeyCode == src.KeyCode)
											if(src.Locked == 0)
												view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
												src.Locked = 1
												usr.Ref = null
												return
											if(src.Locked)
												view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
												src.Locked = 0
												usr.Ref = null
												return
										else
											usr << "<font color = red>That is the wrong key for this door!<br>"
											return
									if(O.Type == "Lock")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
											return
										if(src.KeyCode)
											usr << "<font color = red>This door appears to already have a Lock Fitted.<br>"
											return
						if(usr.Job == null && src in usr.CreateList )
							var/obj/NearForge = null
							var/obj/NearAnvil = null
							for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
								if(NearForge == null)
									if(F.Type == "Lit")
										NearForge = F
										break
									else
										usr << "<font color = red>The near by Forge is not lit!<br>"
							for(var/obj/Items/Misc/Anvil/A in range(1,usr))
								NearAnvil = A
							if(usr.Ref && NearForge && NearAnvil)
								var/obj/O = usr.Ref
								if(O.Type == "Ingot")
									var/Ingots = list()
									Ingots += O
									for(var/obj/Items/Resources/Ingot/I in usr)
										if(I != O && I.Material == O.Material)
											Ingots += I
									var/IngotNum = 0
									for(var/obj/I in Ingots)
										IngotNum += 1
										if(IngotNum == 4)
											break
									if(IngotNum != 4)
										usr << "<font color = red>You need five Ingots of the same Material to forge this item!<br>"
										return
									IngotNum = 0
									usr.Job = "Metal Door"
									usr.CanMove = 0
									var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Ingots)
												for(var/obj/I in Ingots)
													if(I in usr)
														IngotNum += 1
														if(IngotNum == 4)
															break
											if(IngotNum == 4 && usr.Job == "Metal Door")
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															IngotNum = 0
															var/MakeMess = prob(50)
															if(MakeMess)
																for(var/obj/I in Ingots)
																	var/obj/Items/Resources/Scrap/M = new
																	M.Material = I.Material
																	M.icon_state = "[M.Material] scrap"
																	M.name = "[M.Material] scrap"
																	M.Weight = I.Weight
																	M.CraftPotential = I.CraftPotential / 2
																	M.loc = usr.loc
																	usr << "<font color = red>You create a [M] !<br>"
																	break
															for(var/obj/I in Ingots)
																if(IngotNum != 4)
																	IngotNum += 1
																	usr.Weight -= I.Weight
																	del(I)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.Material = O.Material
														W.suffix = null
														var/K = input("Choose a Key Code for your Prison Door. It can be either a number or word but both the Lock Hole and Key's Key Code must match in order to Un-Lock anything.")as null|text
														if(!K)
															K = "Default"
														if(K)
															W.KeyCode = K
														var/obj/Items/Misc/Lock/L = new
														L.Material = "Iron"
														L.icon_state = "Iron lock fitted door"
														L.loc = W
														L.KeyCode = K
														L.Dura = usr.ForgingSkill * 2
														IngotNum = 0
														for(var/obj/I in Ingots)
															if(IngotNum != 4)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														usr << "<font color = teal>The door is now laying flat on the floor, in order to make it dense, you must Click Interact then Click the door while its in your Inventory.<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
						if(usr.Function == "Interact" && src.suffix == "Carried")
							var/CanPlace = 1
							for(var/obj/O in range(0,usr))
								if(O.suffix == "Stuck")
									CanPlace = 0
							if(CanPlace)
								usr << "<font color = green>You place the [src] down and secure it!<br>"
								src.suffix = "Stuck"
								src.density = 1
								src.loc = usr.loc
								usr.Weight -= src.Weight
								src.overlays = null
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Door"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										usr.CantDoTask = 1
										spawn(150)
											if(usr)
												usr.CantDoTask = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.density && src.suffix == "Stuck")
												var/DMG = usr.Strength
												var/Holding = 0
												if(usr.Weapon)
													Holding += 1
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													Holding += 1
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(Holding == 2)
													DMG = DMG / 1.5
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 50 - usr.Strength
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														range(src) << "<font color = red>[src] makes a loud metallic noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 75 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous noise as it bends and crinkles as [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								for(var/obj/Items/Misc/Lock/L in src)
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										W.suffix = "None"
										usr.CreateList += W
										var/KnowsKey = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Key/)
												KnowsKey = 1
										if(KnowsKey == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Key/K = new
												K.layer = 100
												K.Material = "[M]"
												K.icon_state = "[M] key"
												usr.CreateList += K
										var/KnowsLock = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Lock/)
												KnowsLock = 1
										if(KnowsLock == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Lock/L = new
												L.layer = 100
												L.Material = "[M]"
												L.icon_state = "[M] lock"
												usr.CreateList += L
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							var/CanOpen = 0
							if(usr in range(1,src))
								CanOpen = 1
							if(usr.CanUseTK)
								CanOpen = 1
							if(CanOpen)
								if(usr.Dead)
									return
								if(src.Locked)
									usr << "<font color = red>This door is Locked tight!<br>"
									return
								if(src.density)
									src.density = 0
									src.icon_state = "Iron prison door open"
									src.overlays = null
									view(5) << 'WoodDoor.wav'
									if(usr.CanUseTK)
										var/obj/Misc/SpellEffects/Dispel/D = new
										src.overlays += D
										var/obj/Misc/SpellEffects/Dispel/D2 = new
										usr.overlays += D2
										spawn(10)
											if(usr)
												usr.overlays -= D2
												del(D2)
											if(src)
												src.overlays -= D
												del(D)
									return
								if(src.density == 0)
									src.density = 1
									src.icon_state = "Iron prison door"
									view(5) << 'WoodDoor2.wav'
									if(usr.CanUseTK)
										var/obj/Misc/SpellEffects/Dispel/D = new
										src.overlays += D
										var/obj/Misc/SpellEffects/Dispel/D2 = new
										usr.overlays += D2
										spawn(10)
											if(usr)
												usr.overlays -= D2
												del(D2)
											if(src)
												src.overlays -= D
												del(D)
									return
				InquisitorIronDoor
					icon_state = "Inquisitor Iron door"
					density = 1
					opacity = 1
					suffix = "Stuck"
					Weight = 45
					Fuel = 0
					Dura = 4000
					Locked = 1
					Material = "Iron"
					New()
						var/obj/Items/Misc/Lock/L = new
						L.loc = src
						L.suffix = "Fitted"
						L.KeyCode = rand(1000,10000)
						L.Dura = 3000
						src.KeyCode = L.KeyCode
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Hammer" && src.suffix == "Stuck")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Hammer first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Door"
										if(src.KeyCode)
											menu += "Repair Lock"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the door to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Door")
											var/HasIngot = 0
											for(var/obj/Items/Resources/Ingot/I in usr)
												if(I.Material == "Iron")
													HasIngot = 1
													break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasIngot == 0)
												usr << "<font color = red>You will need one Iron Ingot to Repair this door!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.ForgingSkill * 2 + 4000)
												usr << "<font color = red>This door is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Door"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Door" && usr.CantDoTask == 0)
															HasIngot = 0
															for(var/obj/Items/Resources/Ingot/I in usr)
																usr.Weight -= I.Weight
																del(I)
																HasIngot = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasIngot == 0)
																usr << "<font color = red>Iron Ingot was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.ForgingSkill * 2 + 4001)
																src.Dura = usr.ForgingSkill * 2 + 4001
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
										if(Result == "Repair Lock")
											var/obj/Lock = null
											for(var/obj/Items/Misc/Lock/L in src)
												Lock = L
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(Lock.Dura >= usr.ForgingSkill * 2)
												usr << "<font color = red>This lock is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Lock" && usr.CantDoTask == 0)
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
																return
															if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
																Lock.Dura = usr.ForgingSkill * 2 + 1
															range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
															return
											return
									if(O.Type == "Key")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Lock or Un-Lock it!<br>"
											return
										if(O.tag == "Inquisitor Vault Key")
											O.KeyCode = src.KeyCode
										if(O.KeyCode == src.KeyCode)
											if(src.Locked == 0)
												view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
												src.Locked = 1
												for(var/mob/M in Players)
													if(M.Admin)
														M << "<font color = teal>([usr.key])[usr] Locks the Inquisitor Vault Door!<br>"
												usr.Ref = null
												return
											if(src.Locked)
												view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
												src.Locked = 0
												for(var/mob/M in Players)
													if(M.Admin)
														M << "<font color = teal>([usr.key])[usr] Un-Locks the Inquisitor Vault Door!<br>"
												usr.Ref = null
												return
										else
											usr << "<font color = red>That is the wrong key for this door!<br>"
											return
									if(O.Type == "Lock" && O.suffix)
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
											return
										if(src.KeyCode)
											usr << "<font color = red>This door appears to already have a Lock Fitted.<br>"
											return
										var/CanFit = 0
										if(src.density && src.opacity)
											CanFit = 1
										if(CanFit == 0)
											usr << "<font color = red>The door must be closed in order to continue!<br>"
											return
										if(usr.Weapon)
											var/obj/T = usr.Weapon
											if(T.Type == "Hammer")
												var/LOC = usr.loc
												usr.Job = "Fit Lock"
												usr.Ref = null
												usr.CanMove = 0
												var/Time = 300 - usr.ForgingSkill * 1.5 - usr.Agility / 2 - usr.Intelligence
												if(Time <= 50)
													Time = 50
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.InvenUp = 0
												usr.ResetButtons()
												for(var/obj/HUD/B in usr.client.screen)
													if(B.Type == "Inventory")
														B.icon_state = "inv off"
												view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
												spawn(Time)
													if(usr)
														if(src && O && usr.loc == LOC)
															if(usr.Job == "Fit Lock" && usr.CantDoTask == 0)
																var/Fail = prob(50 - usr.ForgingSkill - usr.Agility / 4 - usr.Intelligence / 2)
																usr.Job = null
																usr.MovementCheck()
																if(Fail)
																	view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																	usr.ForgingSkill += usr.ForgingSkillMulti / 2
																	usr.GainStats(3,"Yes")
																	return
																usr.Weight -= O.Weight
																O.loc = src
																O.overlays = null
																O.suffix = "Fitted"
																O.icon_state = "[O.icon_state] fitted door"
																O.pixel_x = -3
																O.pixel_y = 2
																src.KeyCode = O.KeyCode
																src.overlays += O
																usr.ForgingSkill += usr.ForgingSkillMulti
																usr.GainStats(2,"Yes")
																view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
																return
												return
											else
												usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
												return
										else
											usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
											return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								for(var/mob/NPC/Good/G in range(6,usr))
									if(G.Target == null)
										G.Target = usr
										view(6,G) << "<font color = teal>[G] notices you try to attack the [src] and so attacks you!<br>"
								var/list/menu = new()
								menu += "Attack Door"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										usr.CantDoTask = 1
										spawn(150)
											if(usr)
												usr.CantDoTask = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.density && src.suffix == "Stuck")
												var/DMG = usr.Strength
												var/Holding = 0
												if(usr.Weapon)
													Holding += 1
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													Holding += 1
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(Holding == 2)
													DMG = DMG / 1.5
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 50 - usr.Strength
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														range(src) << "<font color = red>[src] makes a loud metallic noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 75 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous noise as it bends and crinkles as [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								for(var/obj/Items/Misc/Lock/L in src)
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										W.suffix = "None"
										usr.CreateList += W
										var/KnowsKey = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Key/)
												KnowsKey = 1
										if(KnowsKey == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Key/K = new
												K.layer = 100
												K.Material = "[M]"
												K.icon_state = "[M] key"
												usr.CreateList += K
										var/KnowsLock = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Lock/)
												KnowsLock = 1
										if(KnowsLock == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Lock/L = new
												L.layer = 100
												L.Material = "[M]"
												L.icon_state = "[M] lock"
												usr.CreateList += L
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							switch(alert("Knock on the door, or open/close it?",,"Cancel","Knock","Open/Close"))
								if("Knock")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.density)
											range(6,src) << "<font color = yellow>A knocking noise can be heard from the [src]!<br>"
											return
								if("Open/Close")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.Locked)
											usr << "<font color = red>This door is Locked tight!<br>"
											return
										if(src.density)
											src.density = 0
											src.opacity = 0
											src.icon_state = "Inquisitor Iron door open"
											view(5) << 'WoodDoor.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
										if(src.density == 0)
											src.density = 1
											src.opacity = 1
											src.icon_state = "Inquisitor Iron door"
											view(5) << 'WoodDoor2.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
				Door
					icon_state = "Iron door"
					name = "Iron Door"
					density = 1
					opacity = 1
					suffix = "Stuck"
					Weight = 40
					Fuel = 0
					Dura = 450
					CanBeCrafted = 1
					Material = "Iron"
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Hammer")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Hammer first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Door"
										if(src.KeyCode)
											menu += "Repair Lock"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the door to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Door")
											var/HasIngot = 0
											for(var/obj/Items/Resources/Ingot/I in usr)
												if(I.Material == "Iron")
													HasIngot = 1
													break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasIngot == 0)
												usr << "<font color = red>You will need one Iron Ingot to Repair this door!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.ForgingSkill * 2 + 450)
												usr << "<font color = red>This door is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Door"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Door" && usr.CantDoTask == 0)
															HasIngot = 0
															for(var/obj/Items/Resources/Ingot/I in usr)
																usr.Weight -= I.Weight
																del(I)
																HasIngot = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasIngot == 0)
																usr << "<font color = red>Iron Ingot was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.ForgingSkill * 2 + 451)
																src.Dura = usr.ForgingSkill * 2 + 451
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
										if(Result == "Repair Lock")
											var/obj/Lock = null
											for(var/obj/Items/Misc/Lock/L in src)
												Lock = L
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(Lock.Dura >= usr.ForgingSkill * 2)
												usr << "<font color = red>This lock is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Lock" && usr.CantDoTask == 0)
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
																return
															if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
																Lock.Dura = usr.ForgingSkill * 2 + 1
															range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
															return
											return
									if(O.Type == "Key")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Lock or Un-Lock it!<br>"
											return
										if(O.KeyCode == src.KeyCode)
											if(src.Locked == 0)
												view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
												src.Locked = 1
												usr.Ref = null
												return
											if(src.Locked)
												view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
												src.Locked = 0
												usr.Ref = null
												return
										else
											usr << "<font color = red>That is the wrong key for this door!<br>"
											return
									if(O.Type == "Lock" && O.suffix)
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
											return
										if(src.KeyCode)
											usr << "<font color = red>This door appears to already have a Lock Fitted.<br>"
											return
										var/CanFit = 0
										if(src.density && src.opacity)
											CanFit = 1
										if(CanFit == 0)
											usr << "<font color = red>The door must be closed in order to continue!<br>"
											return
										if(usr.Weapon)
											var/obj/T = usr.Weapon
											if(T.Type == "Hammer")
												var/LOC = usr.loc
												usr.Job = "Fit Lock"
												usr.Ref = null
												usr.CanMove = 0
												var/Time = 300 - usr.ForgingSkill * 1.5 - usr.Agility / 2 - usr.Intelligence
												if(Time <= 50)
													Time = 50
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.InvenUp = 0
												usr.ResetButtons()
												for(var/obj/HUD/B in usr.client.screen)
													if(B.Type == "Inventory")
														B.icon_state = "inv off"
												view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
												spawn(Time)
													if(usr)
														if(src && O && usr.loc == LOC)
															if(usr.Job == "Fit Lock" && usr.CantDoTask == 0)
																var/Fail = prob(50 - usr.ForgingSkill - usr.Agility / 4 - usr.Intelligence / 2)
																usr.Job = null
																usr.MovementCheck()
																if(Fail)
																	view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																	usr.ForgingSkill += usr.ForgingSkillMulti / 2
																	usr.GainStats(3,"Yes")
																	return
																usr.Weight -= O.Weight
																O.loc = src
																O.overlays = null
																O.suffix = "Fitted"
																O.icon_state = "[O.icon_state] fitted door"
																O.pixel_x = -3
																O.pixel_y = 2
																src.KeyCode = O.KeyCode
																src.overlays += O
																usr.ForgingSkill += usr.ForgingSkillMulti
																usr.GainStats(2,"Yes")
																view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
																return
												return
											else
												usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
												return
										else
											usr << "<font color = red>You need a Hammer in order to fit Locks!<br>"
											return
						if(usr.Job == null && src in usr.CreateList )
							var/obj/NearForge = null
							var/obj/NearAnvil = null
							for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
								if(NearForge == null)
									if(F.Type == "Lit")
										NearForge = F
										break
									else
										usr << "<font color = red>The near by Forge is not lit!<br>"
							for(var/obj/Items/Misc/Anvil/A in range(1,usr))
								NearAnvil = A
							if(usr.Ref && NearForge && NearAnvil)
								var/obj/O = usr.Ref
								if(O.Type == "Ingot")
									var/Ingots = list()
									Ingots += O
									for(var/obj/Items/Resources/Ingot/I in usr)
										if(I != O && I.Material == O.Material)
											Ingots += I
									var/IngotNum = 0
									for(var/obj/I in Ingots)
										IngotNum += 1
										if(IngotNum == 5)
											break
									if(IngotNum != 5)
										usr << "<font color = red>You need five Ingots of the same Material to forge this item!<br>"
										return
									IngotNum = 0
									usr.Job = "Metal Door"
									usr.CanMove = 0
									var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Ingots)
												for(var/obj/I in Ingots)
													if(I in usr)
														IngotNum += 1
														if(IngotNum == 5)
															break
											if(IngotNum == 5 && usr.Job == "Metal Door")
												var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
												var/NF = 0
												var/NA = 0
												for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
													if(F.Type == "Lit")
														NF = 1
												for(var/obj/Items/Misc/Anvil/A in range(1,usr))
													NA = 1
												if(NF)
													if(NA)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															usr.Weight -= O.Weight
															IngotNum = 0
															var/MakeMess = prob(50)
															if(MakeMess)
																for(var/obj/I in Ingots)
																	var/obj/Items/Resources/Scrap/M = new
																	M.Material = I.Material
																	M.icon_state = "[M.Material] scrap"
																	M.name = "[M.Material] scrap"
																	M.Weight = I.Weight
																	M.CraftPotential = I.CraftPotential / 2
																	M.loc = usr.loc
																	usr << "<font color = red>You create a [M] !<br>"
																	break
															for(var/obj/I in Ingots)
																if(IngotNum != 5)
																	IngotNum += 1
																	usr.Weight -= I.Weight
																	del(I)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti / 2
															usr.GainStats(2)
															return
														var/obj/W = new src.type(usr.loc)
														W.Material = O.Material
														W.icon_state = "[W.Material] door"
														W.name = "[W.Material] Door"
														W.suffix = null
														IngotNum = 0
														for(var/obj/I in Ingots)
															if(IngotNum != 5)
																IngotNum += 1
																usr.Weight -= I.Weight
																del(I)
														if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
															usr.ForgingSkill += usr.ForgingSkillMulti
														usr.GainStats(2)
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														usr << "<font color = teal>The door is now laying flat on the floor, in order to make it dense, you must Click Interact then Click the door while its in your Inventory.<br>"
														return
													else
														usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
						if(usr.Function == "Interact" && src.suffix == "Carried")
							var/CanPlace = 1
							for(var/obj/O in range(0,usr))
								if(O.suffix == "Stuck")
									CanPlace = 0
							if(CanPlace)
								usr << "<font color = green>You place the [src] down and secure it!<br>"
								src.suffix = "Stuck"
								src.opacity = 1
								src.density = 1
								src.loc = usr.loc
								usr.Weight -= src.Weight
								src.overlays = null
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Door"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										usr.CantDoTask = 1
										spawn(150)
											if(usr)
												usr.CantDoTask = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.density && src.suffix == "Stuck")
												var/DMG = usr.Strength
												var/Holding = 0
												if(usr.Weapon)
													Holding += 1
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													Holding += 1
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(Holding == 2)
													DMG = DMG / 1.5
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 50 - usr.Strength
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														range(src) << "<font color = red>[src] makes a loud metallic noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 75 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a thunderous noise as it bends and crinkles as [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud metallic noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								for(var/obj/Items/Misc/Lock/L in src)
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/DoorMats = list("Iron","Copper","Gold")
										for(var/M in DoorMats)
											var/obj/W = new src.type()
											W.layer = 100
											W.Material = "[M]"
											W.icon_state = "[M] door"
											W.name = "[M] Door"
											W.suffix = "None"
											usr.CreateList += W
										var/KnowsKey = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Key/)
												KnowsKey = 1
										if(KnowsKey == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Key/K = new
												K.layer = 100
												K.Material = "[M]"
												K.icon_state = "[M] key"
												usr.CreateList += K
										var/KnowsLock = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Lock/)
												KnowsLock = 1
										if(KnowsLock == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Lock/L = new
												L.layer = 100
												L.Material = "[M]"
												L.icon_state = "[M] lock"
												usr.CreateList += L
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							switch(alert("Knock on the door, or open/close it?",,"Cancel","Knock","Open/Close"))
								if("Knock")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.density)
											range(6,src) << "<font color = yellow>A knocking noise can be heard from the [src]!<br>"
											return
								if("Open/Close")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.Locked)
											usr << "<font color = red>This door is Locked tight!<br>"
											return
										if(src.density)
											src.density = 0
											src.opacity = 0
											src.icon_state = "[src.Material] door open"
											src.overlays = null
											view(5) << 'WoodDoor.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
										if(src.density == 0)
											src.density = 1
											src.opacity = 1
											src.icon_state = "[src.Material] door"
											if(src.KeyCode)
												for(var/obj/I in src)
													src.overlays += I
											view(5) << 'WoodDoor2.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
				WoodenDoor
					icon_state = "Wood door"
					density = 1
					opacity = 1
					suffix = "Stuck"
					Weight = 20
					Fuel = 100
					Dura = 150
					CanBeCrafted = 1
					Material = "Wood"
					Click()
						if(usr.Function == "Interact" && usr.Ref)
							if(usr in range(1,src))
								if(isobj(usr.Ref))
									var/obj/O = usr.Ref
									if(O.Type == "Saw")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Repair it!<br>"
											return
										if(O != usr.Weapon)
											usr << "<font color = red>Equip the Saw first!<br>"
											return
										var/list/menu = new()
										menu += "Repair Door"
										if(src.KeyCode)
											menu += "Repair Lock"
										menu += "Cancel"
										var/Result = input(usr,"Choose an Area of the door to repair.", "Choose", null) in menu
										if (Result == "Cancel")
											return
										if(Result == "Repair Door")
											var/HasPlank = 0
											for(var/obj/Items/Resources/Plank/P in usr)
												HasPlank = 1
												break
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(HasPlank == 0)
												usr << "<font color = red>You will need one Wooden Plank to Repair this door!<br>"
												return
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(src.Dura >= usr.CarpentrySkill * 2 + 150)
												usr << "<font color = red>This door is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Door"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Door" && usr.CantDoTask == 0)
															HasPlank = 0
															for(var/obj/Items/Resources/Plank/P in usr)
																usr.Weight -= P.Weight
																del(P)
																HasPlank = 1
																break
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(HasPlank == 0)
																usr << "<font color = red>Wooden Plank was moved, crafting stopped!<br>"
																return
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [src]!<br>"
																return
															if(src.Dura <= usr.CarpentrySkill * 2 + 151)
																src.Dura = usr.CarpentrySkill * 2 + 151
															range(src) << "<font color = yellow>[usr] finishes Repairing the [src]!<br>"
															return
											return
										if(Result == "Repair Lock")
											var/obj/Lock = null
											for(var/obj/Items/Misc/Lock/L in src)
												Lock = L
											var/CanRepair = 1
											for(var/mob/M in range(1,src))
												if(M != usr)
													CanRepair = 0
											if(CanRepair == 0)
												usr << "<font color = red>Cant Repair with others near!<br>"
												return
											if(Lock.Dura >= usr.ForgingSkill * 2)
												usr << "<font color = red>This lock is beyond your skill to repair!<br>"
												return
											var/LOC = usr.loc
											usr.Job = "Repair Lock"
											usr.Ref = null
											usr.CanMove = 0
											var/Time = 600 - usr.Agility - usr.Intelligence
											if(Time <= 50)
												Time = 50
											usr.DeleteInventoryMenu()
											if(usr.InvenUp)
												usr.InvenUp = 0
											usr.ResetButtons()
											for(var/obj/HUD/B in usr.client.screen)
												if(B.Type == "Inventory")
													B.icon_state = "inv off"
											range(src) << "<font color = yellow>[usr] begins to Repair the [Lock] inside [src]!<br>"
											spawn(Time)
												if(usr)
													if(src && O && usr.loc == LOC)
														if(usr.Job == "Repair Lock" && usr.CantDoTask == 0)
															var/Fail = prob(50 - usr.Agility / 2 - usr.Intelligence / 2)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																range(src) << "<font color = yellow>[usr] fails at Repairing the [Lock] inside [src]!<br>"
																return
															if(Lock.Dura <= usr.ForgingSkill * 2 + 1)
																Lock.Dura = usr.ForgingSkill * 2 + 1
															range(src) << "<font color = yellow>[usr] finishes Repairing the [Lock] inside [src]!<br>"
															return
											return
									if(O.Type == "Key")
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged!<br>"
											return
										if(src.density == 0)
											usr << "<font color = red>You need to shut the door first before trying to Lock or Un-Lock it!<br>"
											return
										if(O.KeyCode == src.KeyCode)
											if(src.Locked == 0)
												view() << "<font color = yellow>[usr] Locks [src] using their [O]!<br>"
												src.Locked = 1
												usr.Ref = null
												return
											if(src.Locked)
												view() << "<font color = yellow>[usr] Un-Locks [src] using their [O]!<br>"
												src.Locked = 0
												usr.Ref = null
												return
										else
											usr << "<font color = red>That is the wrong key for this door!<br>"
											return
									if(O.Type == "Lock" && O.suffix)
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms == 0)
											usr << "<font color = red>Your Arms are far too damaged to do that!<br>"
											return
										if(src.KeyCode)
											usr << "<font color = red>This door appears to already have a Lock Fitted.<br>"
											return
										var/CanFit = 0
										if(src.density && src.opacity)
											CanFit = 1
										if(CanFit == 0)
											usr << "<font color = red>The door must be closed in order to continue!<br>"
											return
										if(usr.Weapon)
											var/obj/T = usr.Weapon
											if(T.Type == "Saw")
												var/LOC = usr.loc
												usr.Job = "Fit Lock"
												usr.Ref = null
												usr.CanMove = 0
												var/Time = 300 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
												if(Time <= 50)
													Time = 50
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.InvenUp = 0
												usr.ResetButtons()
												for(var/obj/HUD/B in usr.client.screen)
													if(B.Type == "Inventory")
														B.icon_state = "inv off"
												view(usr) << "<font color = yellow>[usr] begins to fit the [O] into [src]!<br>"
												spawn(Time)
													if(usr)
														if(src && O && usr.loc == LOC)
															if(usr.Job == "Fit Lock" && usr.CantDoTask == 0)
																var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
																usr.Job = null
																usr.MovementCheck()
																if(Fail)
																	view(usr) << "<font color = yellow>[usr] fails at fitting a [O] into [src]!<br>"
																	usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
																	usr.GainStats(3,"Yes")
																	return
																usr.Weight -= O.Weight
																O.loc = src
																O.overlays = null
																O.suffix = "Fitted"
																O.icon_state = "[O.icon_state] fitted door"
																src.KeyCode = O.KeyCode
																src.overlays += O
																usr.CarpentrySkill += usr.CarpentrySkillMulti
																usr.GainStats(2,"Yes")
																view(usr) << "<font color = yellow>[usr] finishes fitting the [O] into [src]!<br>"
																return
												return
											else
												usr << "<font color = red>You need a Saw in order to fit Locks!<br>"
												return
										else
											usr << "<font color = red>You need a Saw in order to fit Locks!<br>"
											return
						if(usr.Function == "Combat" && src.suffix == "Stuck" && usr.Job == null && src.density)
							if(usr in range(1,src))
								var/list/menu = new()
								menu += "Attack Door"
								if(src.KeyCode)
									menu += "Attack Lock"
								menu += "Cancel"
								var/Result = input(usr,"Choose an Area of the door to attack.", "Choose", null) in menu
								if (Result == "Cancel")
									return
								if (Result == "Attack Lock")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									for(var/obj/Items/Misc/Lock/L in src)
										view(usr) << "<font color = red>[usr] begins an attempt at breaking [src]'s [L]!<br>"
										usr.Job = "SmashLock"
										usr.CanMove = 0
										usr.CantDoTask = 1
										spawn(150)
											if(usr)
												usr.CantDoTask = 0
										var/LOC = usr.loc
										var/Time = 150 - usr.Agility / 2
										if(Time <= 10)
											Time = 10
										spawn(Time)
											if(L && usr && src && usr.loc == LOC && usr.Job == "SmashLock" && src.density && src.suffix == "Stuck")
												var/DMG = usr.Strength
												var/Holding = 0
												if(usr.Weapon)
													Holding += 1
													var/obj/W = usr.Weapon
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon2 == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(usr.Weapon2)
													Holding += 1
													var/obj/W = usr.Weapon2
													if(W.ObjectTag == "Weapon")
														DMG += W.Weight / 2
														W.Dura -= rand(0.1,2)
														if(W.ObjectType == "Blunt")
															DMG += 10
														if(W.TwoHander && usr.Weapon == null)
															DMG += W.Weight / 2
														usr.CheckWeaponDura(W)
												if(Holding == 2)
													DMG = DMG / 1.5
												usr.DetermineWeaponSkill()
												if(usr.CurrentSkillLevel)
													DMG = DMG + usr.CurrentSkillLevel / 4
												usr.Job = null
												usr.MovementCheck()
												var/WontDamage = 50 - usr.Strength
												var/CantDamage = prob(WontDamage)
												if(DMG >= 0 && CantDamage != 1)
													L.Dura -= DMG
													if(L.Dura <= 0)
														usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [L] open<br>")
														range(src) << "<font color = red>[src] makes a loud creaking noise as the [L] inside it breaks away after [usr] attacks it!<br>"
														src.KeyCode = null
														src.overlays = null
														var/Jam = prob(50)
														if(Jam)
															range(src) << "<font color = red>[src] appears to have become Jammed!<br>"
														else
															src.Locked = 0
														del(L)
													else
														range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] damages the [L] inside!<br>"
													return
												else
													range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] tries to damage the [L]!<br>"
													return
											else
												if(usr)
													usr.MovementCheck()
										return
								if (Result == "Attack Door")
									if(usr.CantDoTask)
										usr << "<font color = red>Cant attack that for a while!<br>"
										return
									view(usr) << "<font color = red>[usr] begins an attempt at breaking the [src] down!<br>"
									usr.Job = "SmashDoor"
									usr.CanMove = 0
									usr.CantDoTask = 1
									spawn(150)
										if(usr)
											usr.CantDoTask = 0
									var/LOC = usr.loc
									var/Time = 150 - usr.Agility / 2
									if(Time <= 10)
										Time = 10
									spawn(Time)
										if(usr && src && usr.loc == LOC && usr.Job == "SmashDoor" && src.density && src.suffix == "Stuck")
											var/DMG = usr.Strength
											var/Holding = 0
											if(usr.Weapon)
												Holding += 1
												var/obj/W = usr.Weapon
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Axe")
														DMG += 15
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon2 == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(usr.Weapon2)
												Holding += 1
												var/obj/W = usr.Weapon2
												if(W.ObjectTag == "Weapon")
													DMG += W.Weight / 2
													W.Dura -= rand(0.1,2)
													if(W.ObjectType == "Axe")
														DMG += 15
													if(W.ObjectType == "Blunt")
														DMG += 10
													if(W.TwoHander && usr.Weapon == null)
														DMG += W.Weight / 2
													usr.CheckWeaponDura(W)
											if(Holding == 2)
												DMG = DMG / 1.5
											usr.DetermineWeaponSkill()
											if(usr.CurrentSkillLevel)
												DMG = DMG + usr.CurrentSkillLevel / 4
											usr.Job = null
											usr.MovementCheck()
											var/WontDamage = 50 - usr.Strength
											var/CantDamage = prob(WontDamage)
											if(DMG >= 0 && CantDamage != 1)
												src.Dura -= DMG
												if(src.Dura <= 0)
													usr.Log_player("<font color = red><b>([usr.key])[usr]-[usr.x],[usr.y],[usr.z]-smashes a [src] open<br>")
													range(src) << "<font color = red>[src] makes a loud creaking noise as it splinters into pieces after [usr] attacks it!<br>"
													del(src)
												else
													range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] damages it!<br>"
												return
											else
												range(src) << "<font color = red>[src] makes a loud creaking noise as [usr] tried to damage it!<br>"
												return
										else
											if(usr)
												usr.MovementCheck()
									return
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 4)
										PlankNum += 1
										Planks += P
								if(PlankNum != 4)
									usr << "<font color = red>You need Four wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 4 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateDoor"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 4)
														PlankNum += 1
														Planks += P
												if(PlankNum == 4 && O && usr.Job == "CreateDoor")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													W.density = 0
													W.opacity = 0
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													usr << "<font color = teal>The door is now laying flat on the floor, in order to make it dense, you must Click Interact then Click the door while its in your Inventory.<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Interact" && src.suffix == "Carried")
							var/CanPlace = 1
							for(var/obj/O in range(0,usr))
								if(O.suffix == "Stuck")
									CanPlace = 0
							if(CanPlace)
								usr << "<font color = green>You place the [src] down and secure it!<br>"
								src.suffix = "Stuck"
								src.opacity = 1
								src.density = 1
								src.loc = usr.loc
								usr.Weight -= src.Weight
								src.overlays = null
								if(usr.InvenUp)
									usr.DeleteInventoryMenu()
									usr.CreateInventory()
								var/InTiles = 0
								for(var/turf/T in range(0,usr))
									if(T in Tiles)
										InTiles = 1
									if(InTiles == 0)
										Tiles += T
								return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]<br>"
							if(src in range(1,usr))
								for(var/obj/Items/Misc/Lock/L in src)
									usr << "<font color=teal>[src] appears to have an [L] inside it.<br>"
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										W.suffix = "None"
										usr.CreateList += W
										var/KnowsKey = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Key/)
												KnowsKey = 1
										if(KnowsKey == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Key/K = new
												K.layer = 100
												K.Material = "[M]"
												K.icon_state = "[M] key"
												usr.CreateList += K
										var/KnowsLock = 0
										for(var/obj/I in usr.CreateList)
											if(I.type == /obj/Items/Misc/Lock/)
												KnowsLock = 1
										if(KnowsLock == 0)
											var/Mats = list("Iron","Copper","Gold")
											for(var/M in Mats)
												var/obj/Items/Misc/Lock/L = new
												L.layer = 100
												L.Material = "[M]"
												L.icon_state = "[M] lock"
												usr.CreateList += L
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact" && src.suffix == "Stuck")
							switch(alert("Knock on the door, or open/close it?",,"Cancel","Knock","Open/Close"))
								if("Knock")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.density)
											range(6,src) << "<font color = yellow>A knocking noise can be heard from the [src]!<br>"
											return
								if("Open/Close")
									var/CanOpen = 0
									if(usr in range(1,src))
										CanOpen = 1
									if(usr.CanUseTK)
										CanOpen = 1
									if(CanOpen)
										if(usr.Dead)
											return
										if(src.Locked)
											usr << "<font color = red>This door is Locked tight!<br>"
											return
										if(src.density)
											src.density = 0
											src.opacity = 0
											src.icon_state = "Wood door open"
											src.overlays = null
											view(5) << 'WoodDoor.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
										if(src.density == 0)
											src.density = 1
											src.opacity = 1
											src.icon_state = "Wood door"
											if(src.KeyCode)
												for(var/obj/I in src)
													src.overlays += I
											view(5) << 'WoodDoor2.wav'
											if(usr.CanUseTK)
												var/obj/Misc/SpellEffects/Dispel/D = new
												src.overlays += D
												var/obj/Misc/SpellEffects/Dispel/D2 = new
												usr.overlays += D2
												spawn(10)
													if(usr)
														usr.overlays -= D2
														del(D2)
													if(src)
														src.overlays -= D
														del(D)
											return
			Misc
				Fence
					icon = 'tools.dmi'
					icon_state = "front"
					density = 1
					Fuel = 50
					suffix = "Stuck"
					Click()
						if(src in range(1,usr))
							if(usr.Function == "Interact" && usr.Dead == 0)
								view(usr) << "<font color = yellow>[usr] climbs up onto the [src]!<br>"
								usr.loc = src.loc
								return
				BedRoll
					icon = 'tools.dmi'
					icon_state = "bed roll"
					Weight = 5
					Fuel = 25
					Type = "Sleep"
					Click()
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Interact")
							if(src.suffix)
								usr << "<font color = red>Drop this item first before using it!<br>"
								return
							if(src in range(1,usr))
								if(usr.Sleeping == 0)
									if(usr.Dead)
										return
									if(usr.Fainted)
										return
									if(usr.Stunned)
										return
									if(usr.Weapon)
										usr << "<font color = red>You wont be able to sleep with a [usr.Weapon] on!!<br>"
										return
									if(usr.Weapon2)
										usr << "<font color = red>You wont be able to sleep with a [usr.Weapon2] on!!<br>"
									for(var/obj/Items/Armour/A in usr)
										if(A.suffix == "Equip" && A.DefenceType == "Plate")
											usr << "<font color = red>You wont be able to sleep with Plate Armour on!<br>"
											return
									usr.ResetButtons()
									usr.Function = null
									usr.loc = src.loc
									usr.dir = SOUTH
									usr.CanMove = 0
									usr.Sleeping = 1
									usr.Pain = 0
									usr.overlays += /obj/Misc/Sleeping/
									usr.Sleeping()
									usr << "<font color=green>You climb into bed and fall fast asleep!<br>"
									return
								if(usr.Sleeping)
									if(usr.Fainted)
										return
									if(usr.Stunned)
										return
									var/Legs = 1
									if(usr.RightLeg == 0)
										if(usr.LeftLeg == 0)
											Legs = 0
									if(Legs)
										if(usr.Job == null)
											usr.CanMove = 1
									usr.Sleeping = 0
									usr.overlays -= /obj/Misc/Sleeping/
									usr << "<font color=green>You wake up and climb out of bed!<br>"
									return

						if(usr.Function == "Pull")
							if(src in range(1,usr))
								for(var/mob/M in range(0,src))
									if(M.Sleeping)
										usr << "<font color = red>Cant move a bed while someone is sleeping on it!<br>"
										return
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								src.icon_state = "bed roll"
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								for(var/mob/M in range(0,src))
									if(M.Sleeping)
										usr << "<font color = red>Cant move a bed while someone is sleeping on it!<br>"
										return
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.icon_state = "bed rolled"
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				Bed
					icon = 'furniture.dmi'
					icon_state = "bed"
					Weight = 12
					Fuel = 50
					Material = "Wood"
					CanBeCrafted = 1
					Type = "Sleep"
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 3)
										PlankNum += 1
										Planks += P
								if(PlankNum != 3)
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 3 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateBed"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 3)
														PlankNum += 1
														Planks += P
												if(PlankNum == 3 && O && usr.Job == "CreateBed")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Interact")
							if(src in range(1,usr))
								if(usr.Sleeping == 0)
									if(usr.Dead)
										return
									if(usr.Fainted)
										return
									if(usr.Stunned)
										return
									if(usr.Weapon)
										usr << "<font color = red>You wont be able to sleep with a [usr.Weapon] on!!<br>"
										return
									if(usr.Weapon2)
										usr << "<font color = red>You wont be able to sleep with a [usr.Weapon2] on!!<br>"
									for(var/obj/Items/Armour/A in usr)
										if(A.suffix == "Equip" && A.DefenceType == "Plate")
											usr << "<font color = red>You wont be able to sleep with Plate Armour on!<br>"
											return
									usr.ResetButtons()
									usr.Function = null
									usr.loc = src.loc
									usr.dir = SOUTH
									usr.CanMove = 0
									usr.Sleeping = 1
									usr.Pain = 0
									usr.overlays += /obj/Misc/Sleeping/
									usr.Sleeping()
									usr << "<font color=green>You climb into bed and fall fast asleep!<br>"
									return
								if(usr.Sleeping)
									if(usr.Fainted)
										return
									if(usr.Stunned)
										return
									var/Legs = 1
									if(usr.RightLeg == 0)
										if(usr.LeftLeg == 0)
											Legs = 0
									if(Legs)
										if(usr.Job == null)
											usr.CanMove = 1
									usr.Sleeping = 0
									usr.overlays -= /obj/Misc/Sleeping/
									usr << "<font color=green>You wake up and climb out of bed!<br>"
									return

						if(usr.Function == "Pull")
							for(var/mob/M in range(0,src))
								if(M.Sleeping)
									usr << "<font color = red>Cant move a bed while someone is sleeping on it!<br>"
									return
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				Benches
					name = "Wooden Bench"
					Click()
						if(usr.Function == "Interact")
							if(usr in range(1,src))
								usr.loc = src.loc
								usr.dir = SOUTH
								usr << "<b>You take a seat!<br>"
								return
					Bench1
						icon = 'misc.dmi'
						icon_state = "bench1"
						Weight = 7
						Fuel = 35
					Bench2
						icon = 'misc.dmi'
						icon_state = "bench2"
						Weight = 7
						Fuel = 35
				BookStand
					icon = 'furniture.dmi'
					icon_state = "bookstand"
					Fuel = 25
				StoneStand
					icon = 'furniture.dmi'
					icon_state = "stone stand"
				Statues
					StatueBase
						icon = 'misc.dmi'
						icon_state = "statue base"
						Weight = 70
						density = 1
						suffix = "Stuck"
					StatueKing
						icon = 'misc.dmi'
						icon_state = "statue king"
						Weight = 70
						density = 1
						suffix = "Stuck"
					StatueHero
						icon = 'misc.dmi'
						icon_state = "statue hero"
						Weight = 70
						density = 1
						suffix = "Stuck"
				TrainingDummy
					icon = 'tools.dmi'
					icon_state = "training doll"
					Weight = 6
					Fuel = 40
					density = 1
					Material = "Wood"
					CanBeCrafted = 1
					Dura = 200
					Type = "CanHit"
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Block")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Two wooden Blocks in order to create this item!<br>"
									return
								var/BlockNum = 0
								var/Blocks = list()
								for(var/obj/Items/Resources/Block/P in usr)
									if(BlockNum != 2)
										BlockNum += 1
										Blocks += P
								if(BlockNum != 2)
									usr << "<font color = red>You need Two wooden Blocks in order to create this item!<br>"
									return
								if(BlockNum == 2 && O.Type == "Block")
									var/LOC = usr.loc
									usr.Job = "CreateDummy"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Blocks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Blocks && usr.loc == LOC)
												BlockNum = 0
												Blocks = null
												Blocks = list()
												for(var/obj/Items/Resources/Block/P in usr)
													if(BlockNum != 2)
														BlockNum += 1
														Blocks += P
												if(BlockNum == 2 && O && usr.Job == "CreateDummy")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Blocks)
															if(BlockNum != 0)
																BlockNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 4
													W.suffix = null
													for(var/obj/I in Blocks)
														if(BlockNum != 0)
															BlockNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Blocks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Blocks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(src in range(1,usr))
							if(usr.Function == "Interact" && usr.Ref && usr.Job == null && usr.Fainted == 0 && usr.Stunned == 0)
								var/obj/O = usr.Ref
								if(O.Type == "Saw" && O.Dura >= 1)
									if(O.suffix != "Equip")
										usr << "<font color = red>Equip the Saw first!<br>"
										return
									usr.Job = "Fix"
									var/Loc = usr.loc
									var/Time = 300 - usr.CarpentrySkill * 2
									if(Time <= 25)
										Time = 25
									view(usr) << "<font color = yellow>[usr] begins to fix [src] using their [O]!<br>"
									spawn(Time)
										if(usr && src && usr.loc == Loc && usr.Job == "Fix" && src.Dura <= 1 && usr.Dead == 0)
											view(usr) << "<font color = yellow>[usr] finishes fixing [src] with their [O]!<br>"
											if(usr.CarpentrySkill == 0)
												usr.CarpentrySkill = 0.1
											src.Dura += usr.CarpentrySkill * 4 + 2
											src.icon_state = "training doll"
											src.Type = "CanHit"
											usr.Job = null
											usr.CarpentrySkill += usr.CarpentrySkillMulti
											O.Dura -= rand(1,2)
											usr.CheckWeaponDura(O)
											return
										else
											usr << "<font color = red>You failed to fix [src]!<br>"
											usr.Job = null
											usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
											return
							if(usr.Function == "Combat" && src.Type == "CanHit" && usr.Dead == 0 && usr.Fainted == 0 && usr.Job == null && usr.Stunned == 0)
								if(src.Dura >= 1)
									usr.DetermineWeaponSkill()
									view(usr) << "<font color = yellow>[usr] hits the [src]!<br>"
									var/DMG = usr.Strength / 2 + usr.CurrentSkillLevel
									src.Dura -= DMG
									if(usr.CurrentSkillLevel <= 20)
										if(usr.CurrentSkill == "Sword")
											usr.SwordSkill += usr.SwordSkillMulti / 2
										if(usr.CurrentSkill == "Axe")
											usr.AxeSkill += usr.AxeSkillMulti / 2
										if(usr.CurrentSkill == "Spear")
											usr.SpearSkill += usr.SpearSkillMulti / 2
										if(usr.CurrentSkill == "Blunt")
											usr.BluntSkill += usr.BluntSkillMulti / 2
										if(usr.CurrentSkill == "Dagger")
											usr.DaggerSkill += usr.DaggerSkillMulti / 2
										if(usr.CurrentSkill == "Unarmed")
											usr.UnarmedSkill += usr.UnarmedSkillMulti / 2
									else
										usr << "<font color = red>You will not gain from training off this, your skills are too high!<br>"
									src.Type = "CantHit"
									if(src.Dura <= 1)
										src.icon_state = "broken training doll"
										src.Dura = 0
									spawn(100)
										if(src && src.Dura >= 1)
											src.Type = "CanHit"
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				ArmourRack
					icon = 'misc.dmi'
					icon_state = "armour rack"
					Weight = 7
					Fuel = 35
					Material = "Wood"
					CanBeCrafted = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Block")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr << "<font color = red>You need Two wooden Blocks in order to create this item!<br>"
									usr.ResetButtons()
									return
								var/BlockNum = 0
								var/Blocks = list()
								for(var/obj/Items/Resources/Block/P in usr)
									if(BlockNum != 2)
										BlockNum += 1
										Blocks += P
								if(BlockNum != 2)
									usr << "<font color = red>You need Two wooden Blocks in order to create this item!<br>"
									return
								if(BlockNum == 2 && O.Type == "Block")
									var/LOC = usr.loc
									usr.Job = "CreateRack"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Blocks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Blocks && usr.loc == LOC)
												BlockNum = 0
												Blocks = null
												Blocks = list()
												for(var/obj/Items/Resources/Block/P in usr)
													if(BlockNum != 2)
														BlockNum += 1
														Blocks += P
												if(BlockNum == 2 && O && usr.Job == "CreateRack")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Blocks)
															if(BlockNum != 0)
																BlockNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Blocks)
														if(BlockNum != 0)
															BlockNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Blocks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Blocks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				WeaponRack
					icon = 'misc.dmi'
					icon_state = "weapon rack"
					Weight = 5
					Fuel = 35
					Material = "Wood"
					CanBeCrafted = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Two wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 2)
										PlankNum += 1
										Planks += P
								if(PlankNum != 2)
									usr << "<font color = red>You need Two wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 2 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateRack"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 2)
														PlankNum += 1
														Planks += P
												if(PlankNum == 2 && O && usr.Job == "CreateRack")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				WoodenCounter
					icon = 'furniture.dmi'
					icon_state = "counter"
					Weight = 7
					Fuel = 30
					density = 1
					CanBeCrafted = 1
					Material = "Wood"
					Click()
						if(usr.Function == "Interact")
							if(src in range(1,usr))
								view(usr) << "<font color = yellow>[usr] climbs on top of the [src]!<br>"
								usr.loc = src.loc
								return
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 3)
										PlankNum += 1
										Planks += P
								if(PlankNum != 3)
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 3 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateCounter"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 3)
														PlankNum += 1
														Planks += P
												if(PlankNum == 3 && O && usr.Job == "CreateCounter")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				WoodenTable
					icon = 'furniture.dmi'
					icon_state = "table"
					Weight = 7
					Fuel = 30
					density = 1
					CanBeCrafted = 1
					Material = "Wood"
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 3)
										PlankNum += 1
										Planks += P
								if(PlankNum != 3)
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 3 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateTable"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 3)
														PlankNum += 1
														Planks += P
												if(PlankNum == 3 && O && usr.Job == "CreateTable")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Interact")
							if(src in range(1,usr))
								view(usr) << "<font color = yellow>[usr] climbs on top of the [src]!<br>"
								usr.loc = src.loc
								return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				SignPost
					icon = 'tools.dmi'
					icon_state = "sign2"
					Weight = 5
					Fuel = 25
					density = 1
					Material = "Wood"
					CanBeCrafted = 1
					Type = "Stuck"
					suffix = "Stuck"
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 3)
										PlankNum += 1
										Planks += P
								if(PlankNum != 3)
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 3 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateSign"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 3)
														PlankNum += 1
														Planks += P
												if(PlankNum == 3 && O && usr.Job == "CreateSign")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													W.Type = "NotStuck"
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "Interact")
							if(src in range(1,usr))
								if(src.Type == "Stuck")
									if(usr.Dead == 0 && usr.Fainted == 0 && usr.Stunned == 0 && usr.Job == null && usr.CanMove)
										var/HasArms = 1
										if(usr.LeftArm <= 20)
											if(usr.RightArm <= 20)
												HasArms = 0
										if(HasArms)
											view(usr) << "<font color = yellow>[usr] pull the sign post loose!<br>"
											src.Type = "NotStuck"
											src.suffix = null
											return
										else
											usr << "<font color = red>You cant do that with hurt arms!<br>"
											return
							if(src.Type == "NotStuck" && src in usr)
								var/N=input("What do you want written on this sign?")as text
								if(N == null)
									return
								else
									src.desc = N
									src.name = N
								return
							if(src.Type == "NotStuck" && src.suffix == null)
								if(usr.Dead == 0 && usr.Fainted == 0 && usr.Stunned == 0 && usr.Job == null && usr.CanMove)
									var/HasArms = 1
									if(usr.LeftArm <= 20)
										if(usr.RightArm <= 20)
											HasArms = 0
									if(HasArms)
										view(usr) << "<font color = yellow>[usr] pushes the sign post into the ground firmly!<br>"
										src.Type = "Stuck"
										src.suffix = "Stuck"
										return
									else
										usr << "<font color = red>You cant do that with hurt arms!<br>"
										return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				BookCase
					icon = 'furniture.dmi'
					icon_state = "bookcase"
					Weight = 10
					Fuel = 45
					density = 1
					Material = "Wood"
					CanBeCrafted = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 3)
										PlankNum += 1
										Planks += P
								if(PlankNum != 3)
									usr << "<font color = red>You need Three wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 3 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateBookCase"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 3)
														PlankNum += 1
														Planks += P
												if(PlankNum == 3 && O && usr.Job == "CreateBookCase")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				Picture
					icon = 'misc.dmi'
					icon_state = "pic 1"
					name = "Picture"
					suffix = "Stuck"
					Weight = 4
					Fuel = 35
					New()
						var/PicNum = rand(1,12)
						src.icon_state = "pic [PicNum]"
						if(src.dir == NORTH)
							src.pixel_y = 32
						if(src.dir == SOUTH)
							src.pixel_y = -32
						if(src.dir == EAST)
							src.pixel_x = 32
						if(src.dir == WEST)
							src.pixel_x = -32
				GlowingCrystal
					icon = 'misc.dmi'
					icon_state = "glowing crystal"
					name = "Glowing Crystal"
					suffix = "Stuck"
					Weight = 4
					luminosity = 5
					Fuel = 35
					New()
						if(src.dir == NORTH)
							src.pixel_y = 32
						if(src.dir == SOUTH)
							src.pixel_y = -32
						if(src.dir == EAST)
							src.pixel_x = 32
						if(src.dir == WEST)
							src.pixel_x = -32
				TorchStand
					icon = 'tools.dmi'
					icon_state = "torch stand"
					name = "Torch Stand"
					Weight = 8
					BaseMaterial = "Metal"
					New()
						if(src.dir == NORTH)
							src.pixel_y = 32
						if(src.dir == SOUTH)
							src.pixel_y = -32
						if(src.dir == EAST)
							src.pixel_x = 32
						if(src.dir == WEST)
							src.pixel_x = -32
					Click()
						if(usr.Job == null && src in usr.CreateList )
							var/obj/NearForge = null
							var/obj/NearAnvil = null
							for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
								if(NearForge == null)
									if(F.Type == "Lit")
										NearForge = F
										break
									else
										usr << "<font color = red>The near by Forge is not lit!<br>"
							for(var/obj/Items/Misc/Anvil/A in range(1,usr))
								NearAnvil = A
							if(usr.Ref && NearForge && NearAnvil)
								var/obj/O = usr.Ref
								if(O.Type == "Ingot")
									usr.Job = "Forge"
									usr.CanMove = 0
									var/Time = 200 - usr.ForgingSkill * 2 - usr.Strength / 2
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to forge the [O] into a [O.Material] [src] !<br>"
									spawn(Time)
										if(usr)
											if(O && usr.Job == "Forge")
												if(O in usr)
													var/Fail = prob(50 - usr.ForgingSkill - usr.Strength / 4 - usr.Agility / 4)
													var/NF = 0
													var/NA = 0
													for(var/obj/Items/Misc/StoneForge/F in range(1,usr))
														if(F.Type == "Lit")
															NF = 1
													for(var/obj/Items/Misc/Anvil/A in range(1,usr))
														NA = 1
													if(NF)
														if(NA)
															usr.Job = null
															usr.MovementCheck()
															if(Fail)
																view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
																usr.Weight -= O.Weight
																del(O)
																if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																	usr.ForgingSkill += usr.ForgingSkillMulti / 2
																usr.GainStats(2)
																return
															var/obj/W = new src.type(usr.loc)
															W.icon = src.icon
															W.Material = O.Material
															W.name = "[W.Material] [W.name]"
															W.icon_state = "[W.Material] [W.icon_state]"
															usr.Weight -= O.Weight
															del(O)
															if(usr.ForgingSkill <= usr.SkillCap && usr.ForgingSkill <= WorldSkillsCap)
																usr.ForgingSkill += usr.ForgingSkillMulti
															usr.GainStats(2)
															view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
															return
														else
															usr << "<font color = red>The Anvil was moved, or you moved away from it, forgeing failed!<br>"
															usr.MovementCheck()
															return
													else
														usr << "<font color = red>The Forge was moved, or you moved away from it, or the forge was not lit, forgeing failed!<br>"
														usr.MovementCheck()
														return
												else
													usr.MovementCheck()
													return
											else
												usr.MovementCheck()
												return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							var/Known = 0
							for(var/obj/Items/W in usr.CreateList)
								if(W.type == src.type)
									Known = 1
							if(Known == 0)
								if(src.CanBeCrafted)
									if(src.BaseMaterial == "Metal")
										var/Mats = list("Iron","Copper","Gold","Silver")
										for(var/M in Mats)
											var/obj/Items/Furniture/Misc/TorchStand/S = new
											S.Material = "[M]"
											S.icon_state = "[M] [S.icon_state]"
											S.layer = 100
											usr.CreateList += S
									usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
								else
									usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				WallTorch
					icon = 'tools.dmi'
					icon_state = "torch stand lit"
					name = "Wall Torch"
					suffix = "Stuck"
					Weight = 4
					luminosity = 5
					BaseMaterial = "Metal"
					Material = "Iron"
					Fuel = 35
					New()
						if(src.dir == NORTH)
							src.pixel_y = 32
						if(src.dir == SOUTH)
							src.pixel_y = -32
						if(src.dir == EAST)
							src.pixel_x = 32
						if(src.dir == WEST)
							src.pixel_x = -32
					Click()
						if(usr.Function == "Interact")
							if(usr.Fainted)
								usr << "<font color =red>You have fainted and cant do that!<br>"
								return
							if(usr.Stunned)
								usr << "<font color =red>You are stunned and cant do that!<br>"
								return
							if(usr.Weapon)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] on the [src]!<br>"
										usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
										return
							if(usr.Weapon2)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] on the [src]!<br>"
										usr.overlays-=image(I.icon,"[I.icon_state] left",I.ItemLayer)
										usr.overlays-=image(I.icon,"[I.icon_state]",I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip left"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,"[I.icon_state]",I.ItemLayer)
										return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							var/Known = 0
							for(var/obj/Items/Furniture/Misc/TorchStand/W in usr.CreateList)
								Known = 1
							if(Known == 0)
								var/Mats = list("Iron","Copper","Gold","Silver")
								for(var/M in Mats)
									var/obj/Items/Furniture/Misc/TorchStand/S = new
									S.Material = "[M]"
									S.icon_state = "[M] torch stand"
									S.layer = 100
									usr.CreateList += S
								usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
				TempleCandle
					icon = 'misc.dmi'
					icon_state = "temple candle lit"
					Weight = 5
					luminosity = 3
					Click()
						if(usr.Function == "Interact")
							if(usr.Fainted)
								usr << "<font color =red>You have fainted and cant do that!<br>"
								return
							if(usr.Stunned)
								usr << "<font color =red>You are stunned and cant do that!<br>"
								return
							if(usr.Weapon)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] on the [src]!<br>"
										usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
										return
							if(usr.Weapon2)
								if(src in range(1,usr))
									var/obj/I = usr.Weapon2
									if(I.Type == "Torch")
										view(usr) << "<font color = yellow>[usr] lights their [I] on the [src]!<br>"
										usr.overlays-=image(I.icon,"[I.icon_state] left",I.ItemLayer)
										I.CarryState = "torch lit"
										I.EquipState = "torch lit equip left"
										I.icon_state = I.EquipState
										I.Type = "Torch Lit"
										I.LightProc(usr)
										usr.overlays+=image(I.icon,"[I.icon_state]",I.ItemLayer)
										return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
			Chairs
				WoodenChair
					icon = 'furniture.dmi'
					icon_state = "chair"
					suffix = "Stuck"
					Weight = 5
					Fuel = 25
					Material = "Wood"
					CanBeCrafted = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "Plank")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Two wooden Planks in order to create this item!<br>"
									return
								var/PlankNum = 0
								var/Planks = list()
								for(var/obj/Items/Resources/Plank/P in usr)
									if(PlankNum != 2)
										PlankNum += 1
										Planks += P
								if(PlankNum != 2)
									usr << "<font color = red>You need Two wooden Planks in order to create this item!<br>"
									return
								if(PlankNum == 2 && O.Type == "Plank")
									var/LOC = usr.loc
									usr.Job = "CreateChair"
									usr.CanMove = 0
									var/Time = 200 - usr.CarpentrySkill * 1.5 - usr.Agility / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Planks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Planks && usr.loc == LOC)
												PlankNum = 0
												Planks = null
												Planks = list()
												for(var/obj/Items/Resources/Plank/P in usr)
													if(PlankNum != 2)
														PlankNum += 1
														Planks += P
												if(PlankNum == 2 && O && usr.Job == "CreateChair")
													var/Fail = prob(50 - usr.CarpentrySkill - usr.Agility / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Planks)
															if(PlankNum != 0)
																PlankNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.CarpentrySkill += usr.CarpentrySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.CarpentrySkill * 2
													W.suffix = null
													for(var/obj/I in Planks)
														if(PlankNum != 0)
															PlankNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Planks could not be found in your inventory, crafting failed!<br>"
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Planks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.MovementCheck()
												return
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact")
							if(usr in range(1,src))
								usr.loc = src.loc
								usr.dir = src.dir
								usr << "<b>You take a seat!<br>"
								return
				Throne
					icon = 'misc.dmi'
					icon_state = "Throne"
					suffix = "Stuck"
					Weight = 10
					Fuel = 50
					Click()
						if(usr.Function == "Transfer")
							if(usr.Container)
								var/obj/C = usr.Container
								if(src.suffix == "Carried")
									if(src in C)
										if(C in range(1,usr))
											if(usr.Weight <= usr.WeightMax)
												src.loc = usr
												usr.Weight += src.Weight
												C.Weight -= src.Weight
												usr << "You moved [src] from [C] to your inventory!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>You are carrying enough already!<br>"
												return
							if(src.suffix == "Carried")
								if(src in usr)
									if(usr.Container)
										var/obj/C = usr.Container
										if(C in range(1,usr))
											if(C.Weight <= C.WeightMax)
												usr.Weight -= src.Weight
												C.Weight += src.Weight
												src.loc = C
												usr << "You moved [src] from your inventory to [C]!<br>"
												usr.DeleteInventoryMenu()
												if(usr.InvenUp)
													usr.CreateInventory()
												usr.CreateContainerContents(C)
												return
											else
												usr << "<b>[C] is carrying enough already!<br>"
												return
						if(usr.Function == "Pull")
							if(src in range(1,usr))
								if(usr.Pull == src)
									usr.Pull = null
									if(src.Pull == usr)
										src.Pull = null
									view(usr) << "<b>[usr] stops pulling [src]<br>"
									return
								if(src.suffix == null)
									if(usr.Pull == null)
										usr.Pull = src
										src.Pull = usr
										usr.Pull()
										if(usr.Dead == 0)
											view(usr) << "<b>[usr] starts pulling [src]<br>"
										return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							return
						if(usr.Function == "PickUp")
							if(src.suffix == "Carried" && src in usr)
								src.loc = usr.loc
								src.suffix = null
								src.layer = 4
								src.overlays = null
								usr.client.screen -= src
								usr.Weight -= src.Weight
								view() << "<b>[usr] drops [src]<br>"
								for(var/obj/HUD/Text/T in usr.client.screen)
									if(T.Type == "Weight")
										del(T)
								if(usr.InvenUp)
									usr.Text("Weight",usr,4,15,0,10,"Weight - [usr.Weight]/[usr.WeightMax]")
								usr.Delete("ScrollMiddle","BoxDelete")
								return
							if(usr in range(1,src))
								if(src.suffix == null)
									if(usr.Weight <= usr.WeightMax)
										src.loc = usr
										src.suffix = "Carried"
										usr.Weight += src.Weight
										src.overlays+=image(/obj/HUD/C/)
										if(usr.InvenUp)
											usr.DeleteInventoryMenu()
											usr.CreateInventory()
										view() << "<b>[usr] picks up [src]<br>"
										return
									else
										usr << "<b>You cant carry too much weight!<br>"
										return
								else
									usr << "<b>You cant pick that item up!<br>"
									return
						if(usr.Function == "Interact")
							if(usr in range(1,src))
								usr.loc = src.loc
								usr.dir = SOUTH
								usr << "<b>You take a seat!<br>"
								return
			Pillars
				suffix = "Stuck"
				SmallPillar1
					name = "Pillar"
					icon = 'misc.dmi'
					icon_state = "p small1"
					Material = "Stone"
					CanBeCrafted = 1
					opacity = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "LargeBrick")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
									return
								var/BrickNum = 0
								var/Bricks = list()
								for(var/obj/Items/Resources/LargeBrick/B in usr)
									if(BrickNum != 3)
										BrickNum += 1
										Bricks += B
								if(BrickNum != 3)
									usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
									return
								if(BrickNum == 5 && O.Type == "LargeBrick")
									var/LOC = usr.loc
									usr.Job = "CreateStonePillar"
									usr.CanMove = 0
									var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Bricks && usr.loc == LOC)
												BrickNum = 0
												Bricks = null
												Bricks = list()
												for(var/obj/Items/Resources/LargeBrick/B in usr)
													if(BrickNum != 3)
														BrickNum += 1
														Bricks += B
												if(BrickNum == 3 && O && usr.Job == "CreateStonePillar")
													var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Bricks)
															if(BrickNum != 0)
																BrickNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.MasonarySkill += usr.MasonarySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.MasonarySkill * 2
													W.suffix = null
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
													usr.Job = null
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				SmallPillar2
					name = "Pillar"
					icon = 'misc.dmi'
					icon_state = "p small2"
					Material = "Stone"
					CanBeCrafted = 1
					opacity = 1
					Click()
						if(usr.Job == null && src in usr.CreateList )
							if(usr.Ref)
								var/obj/O = usr.Ref
								if(O.Type != "LargeBrick")
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
									return
								var/BrickNum = 0
								var/Bricks = list()
								for(var/obj/Items/Resources/LargeBrick/B in usr)
									if(BrickNum != 3)
										BrickNum += 1
										Bricks += B
								if(BrickNum != 3)
									usr << "<font color = red>You need Three Large Bricks in order to create this item!<br>"
									return
								if(BrickNum == 5 && O.Type == "LargeBrick")
									var/LOC = usr.loc
									usr.Job = "CreateStonePillar"
									usr.CanMove = 0
									var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
									if(Time <= 50)
										Time = 50
									usr.DeleteInventoryMenu()
									if(usr.InvenUp)
										usr.InvenUp = 0
									usr.ResetButtons()
									for(var/obj/HUD/B in usr.client.screen)
										if(B.Type == "Inventory")
											B.icon_state = "inv off"
									view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
									spawn(Time)
										if(usr)
											if(Bricks && usr.loc == LOC)
												BrickNum = 0
												Bricks = null
												Bricks = list()
												for(var/obj/Items/Resources/LargeBrick/B in usr)
													if(BrickNum != 3)
														BrickNum += 1
														Bricks += B
												if(BrickNum == 3 && O && usr.Job == "CreateStonePillar")
													var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
													usr.Job = null
													usr.MovementCheck()
													if(Fail)
														view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
														for(var/obj/I in Bricks)
															if(BrickNum != 0)
																BrickNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.MasonarySkill += usr.MasonarySkillMulti / 2
														usr.GainStats(3,"Yes")
														return
													var/obj/W = new src.type(usr.loc)
													W.Material = O.Material
													W.Dura += usr.MasonarySkill * 2
													W.suffix = null
													for(var/obj/I in Bricks)
														if(BrickNum != 0)
															BrickNum -= 1
															usr.Weight -= I.Weight
															del(I)
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(2,"Yes")
													view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
													return
												else
													usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
													usr.Job = null
													usr.MovementCheck()
													return
											else
												usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
												usr.Job = null
												usr.MovementCheck()
												return
						if(usr.Function == "Examine")
							usr << "<font color=teal>[src.desc]"
							if(src in range(1,usr))
								var/Known = 0
								for(var/obj/Items/F in usr.CreateList)
									if(F.type == src.type)
										Known = 1
								if(Known == 0)
									if(src.CanBeCrafted)
										var/obj/W = new src.type()
										W.layer = 100
										usr.CreateList += W
										usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
									else
										usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
							return
				LargePillar
					suffix = "Stuck"
					LargePillarBottom
						name = "Stone Pillar"
						icon = 'misc.dmi'
						icon_state = "P Bottom"
						Material = "Stone"
						CanBeCrafted = 1
						density = 1
						opacity = 1
						New()
							src.overlays += /obj/Items/Furniture/Pillars/LargePillar/LPM/
							src.overlays += /obj/Items/Furniture/Pillars/LargePillar/LPT/
						Click()
							if(usr.Job == null && src in usr.CreateList )
								if(usr.Ref)
									var/obj/O = usr.Ref
									if(O.Type != "LargeBrick")
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										usr << "<font color = red>You need Five Large Bricks in order to create this item!<br>"
										return
									var/BrickNum = 0
									var/Bricks = list()
									for(var/obj/Items/Resources/LargeBrick/B in usr)
										if(BrickNum != 5)
											BrickNum += 1
											Bricks += B
									if(BrickNum != 5)
										usr << "<font color = red>You need Five Large Bricks in order to create this item!<br>"
										return
									if(BrickNum == 5 && O.Type == "LargeBrick")
										var/LOC = usr.loc
										usr.Job = "CreateStoneCoffin"
										usr.CanMove = 0
										var/Time = 200 - usr.MasonarySkill * 1.5 - usr.Strength / 2 - usr.Intelligence
										if(Time <= 50)
											Time = 50
										usr.DeleteInventoryMenu()
										if(usr.InvenUp)
											usr.InvenUp = 0
										usr.ResetButtons()
										for(var/obj/HUD/B in usr.client.screen)
											if(B.Type == "Inventory")
												B.icon_state = "inv off"
										view(usr) << "<font color = yellow>[usr] begins to contruct the Large Bricks into a [src] !<br>"
										spawn(Time)
											if(usr)
												if(Bricks && usr.loc == LOC)
													BrickNum = 0
													Bricks = null
													Bricks = list()
													for(var/obj/Items/Resources/LargeBrick/B in usr)
														if(BrickNum != 5)
															BrickNum += 1
															Bricks += B
													if(BrickNum == 5 && O && usr.Job == "CreateStoneCoffin")
														var/Fail = prob(50 - usr.MasonarySkill - usr.Strength / 4 - usr.Intelligence / 2)
														usr.Job = null
														usr.MovementCheck()
														if(Fail)
															view(usr) << "<font color = yellow>[usr] fails at crafting a [src] !<br>"
															for(var/obj/I in Bricks)
																if(BrickNum != 0)
																	BrickNum -= 1
																	usr.Weight -= I.Weight
																	del(I)
															usr.MasonarySkill += usr.MasonarySkillMulti / 2
															usr.GainStats(3,"Yes")
															return
														var/obj/W = new src.type(usr.loc)
														W.Material = O.Material
														W.Dura += usr.MasonarySkill * 2
														W.suffix = null
														for(var/obj/I in Bricks)
															if(BrickNum != 0)
																BrickNum -= 1
																usr.Weight -= I.Weight
																del(I)
														usr.MasonarySkill += usr.MasonarySkillMulti
														usr.GainStats(2,"Yes")
														view(usr) << "<font color = yellow>[usr] finishes creating the [W] !<br>"
														return
													else
														usr << "<font color = red>Large Bricks could not be found in your inventory, crafting failed!<br>"
														usr.Job = null
														usr.MovementCheck()
														return
												else
													usr << "<font color = red>Large Bricks could not be found in your inventory, or you moved while creating the item. Crafting failed!<br>"
													usr.Job = null
													usr.MovementCheck()
													return
							if(usr.Function == "Examine")
								usr << "<font color=teal>[src.desc]"
								if(src in range(1,usr))
									var/Known = 0
									for(var/obj/Items/F in usr.CreateList)
										if(F.type == src.type)
											Known = 1
									if(Known == 0)
										if(src.CanBeCrafted)
											var/obj/W = new src.type()
											W.layer = 100
											usr.CreateList += W
											usr << "<font color = blue>You take a good look at the [src] and decide that, if needed, you could create one!<br>"
										else
											usr << "<font color = red>You take a good look at the [src] but have no idea how to create one...<br>"
								return
					LPM
						name = "Stone Pillar"
						icon = 'misc.dmi'
						icon_state = "P Middle"
						layer = 8
						pixel_y = 32
					LargePillarBroken
						name = "Stone Pillar"
						icon = 'misc.dmi'
						icon_state = "P broken"
						layer = 8
					LargePillarBroken2
						name = "Stone Pillar"
						icon = 'misc.dmi'
						icon_state = "P ground"
						density = 1
					LPT
						name = "Stone Pillar"
						icon = 'misc.dmi'
						icon_state = "P Top"
						layer = 8
						pixel_y = 64
	HUD

		E
			icon = 'HUD.dmi'
			icon_state = "equipped marker"
			layer = 11
		C
			icon = 'HUD.dmi'
			icon_state = "carrying marker"
			layer = 11
		Text
			icon = 'txt.dmi'
			layer = 100
			New(client/C)
				C.screen += src
				..()
		Menus
			layer = 11
			Box
				icon = 'HUD.dmi'
				icon_state = "box"
			Buildings
				icon = 'terrain.dmi'
				LargeBrickWall
					icon_state = "bulky brick wall"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0)
							if(usr.Job == null)
								var/Bricks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/LargeBrick/P in usr)
									if(Num != 3)
										Num += 1
										Bricks += P
								if(Num == 3)
									view(usr) << "<font color=yellow>[usr] begins to construct a large brick wall from large bricks!<br>"
									usr.Job = "MakeBrickWall"
									usr.CanMove = 0
									var/Time = 350
									Time -= usr.MasonarySkill * 1.5
									Time -= usr.BuildingSkill * 1.5
									if(Time <= 75)
										Time = 75
									spawn(Time)
										if(usr)
											if(usr.loc == Loc)
												if(usr.Job == "MakeBrickWall")
													usr.Job = null
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(3)
													usr << "<font color =green>You finish construction of a large brick wall!<br>"
													for(var/obj/I in Bricks)
														usr.Weight -= I.Weight
														del(I)
													for(var/turf/T in range(0,usr))
														T.Type = "Inside"
														T.icon_state = "bulky brick wall"
														T.density = 1
														T.opacity = 1
														T.Dura += 75
														T.AttachedKey = "[usr.key]"
														T.ManMade = 1
														T.Material = "Stone"
														T.Dura += usr.MasonarySkill
														T.Dura += usr.BuildingSkill
														T.desc = "Made by ([usr])[usr.name]"
														T.name = "Large Brick Wall"
														for(var/obj/Items/Misc/M in range(0,usr))
															if(M.loc != usr)
																if(M.density == 0 && M.suffix == null)
																	M.loc = locate(0,0,0)
														for(var/obj/Items/Plants/P in range(0,usr))
															if(P.density == 0)
																P.loc = locate(0,0,0)
														Tiles += T
													usr.MovementCheck()
											else
												usr << "<font color=red>You moved from the position you were building at, you failed to construct a large brick wall!<br>"
												return
								else
									usr << "<font color =red>You need three large bricks to construct a large brick wall!<br>"
									return
				BrickWall
					icon_state = "brick wall"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0)
							if(usr.Job == null)
								var/Bricks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/Brick/P in usr)
									if(Num != 4)
										Num += 1
										Bricks += P
								if(Num == 4)
									view(usr) << "<font color=yellow>[usr] begins to construct a brick wall from bricks!<br>"
									usr.Job = "MakeBrickWall"
									usr.CanMove = 0
									var/Time = 300
									Time -= usr.MasonarySkill * 1.5
									Time -= usr.BuildingSkill * 1.5
									if(Time <= 75)
										Time = 75
									spawn(Time)
										if(usr)
											if(usr.loc == Loc)
												if(usr.Job == "MakeBrickWall")
													usr.Job = null
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(3)
													usr << "<font color =green>You finish construction of a brick wall!<br>"
													for(var/obj/I in Bricks)
														usr.Weight -= I.Weight
														del(I)
													for(var/turf/T in range(0,usr))
														T.Type = "Inside"
														T.icon_state = "brick wall"
														T.density = 1
														T.opacity = 1
														T.Dura += 50
														T.AttachedKey = "[usr.key]"
														T.ManMade = 1
														T.Material = "Stone"
														T.Dura += usr.MasonarySkill
														T.Dura += usr.BuildingSkill
														T.desc = "Made by ([usr])[usr.name]"
														T.name = "Brick Wall"
														for(var/obj/Items/Misc/M in range(0,usr))
															if(M.loc != usr)
																if(M.density == 0 && M.suffix == null)
																	M.loc = locate(0,0,0)
														for(var/obj/Items/Plants/P in range(0,usr))
															if(P.density == 0)
																P.loc = locate(0,0,0)
														Tiles += T
													usr.MovementCheck()
											else
												usr << "<font color=red>You moved from the position you were building at, you failed to construct a brick wall!<br>"
												return
								else
									usr << "<font color =red>You need four bricks to construct a brick wall!<br>"
									return
				StoneStairs
					icon_state = "stairs up"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0 && usr.z != 2)
							if(usr.Job == null)
								var/Bricks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/LargeBrick/P in usr)
									if(Num != 4)
										Num += 1
										Bricks += P
								if(Num == 4)
									var/CanEnter = 0
									var/obj/Q = new
									var/Z
									if(usr.z == 1)
										Z = 2
									if(usr.z == 3)
										Z = 1
									Q.loc = locate(usr.x,usr.y,Z)
									for(var/turf/T2 in range(0,Q))
										if(T2.Dura == 0 && T2.density == 0)
											CanEnter = 1
										if(T2.icon_state == "clouds" && usr.z == 1)
											CanEnter = 1
									if(Q.x <= 20 && Q.y <= 20 && Q.z == 2)
										CanEnter = 0
									del(Q)
									if(CanEnter)
										view(usr) << "<font color=yellow>[usr] begins to construct a stairs from large bricks!<br>"
										usr.Job = "MakeStoneStair"
										usr.CanMove = 0
										var/Time = 300
										Time -= usr.MasonarySkill
										Time -= usr.BuildingSkill
										if(Time <= 75)
											Time = 75
										spawn(Time)
											if(usr)
												if(usr.loc == Loc)
													if(usr.Job == "MakeStoneStair")
														usr.Job = null
														usr.BuildingSkill += usr.BuildingSkillMulti
														usr.MasonarySkill += usr.MasonarySkillMulti
														usr.GainStats(3)
														usr << "<font color =green>You finish construction of a stairs!<br>"
														for(var/obj/I in Bricks)
															usr.Weight -= I.Weight
															del(I)
														var/obj/Misc/StairsUp/S = new
														S.loc = usr.loc
														S.Dura += usr.BuildingSkill
														S.Dura += usr.MasonarySkill
														var/obj/Q2 = new
														Q2.loc = locate(usr.x,usr.y,Z)
														for(var/turf/T3 in range(0,Q2))
															var/obj/Misc/StairsDown/S2 = new
															S2.loc = Q2.loc
															S2.Dura += usr.BuildingSkill
															S2.Dura += usr.MasonarySkill
															Tiles += T3
															for(var/obj/Misc/Hole/H in range(0,S2))
																del(H)
														del(Q2)
														for(var/turf/T in range(0,usr))
															Tiles += T
														usr.MovementCheck()
												else
													usr << "<font color=red>You moved from the position you were building at, you failed to construct a stone slab!<br>"
													return
									else
										usr << "<font color =red>Something above stops you from creating a stairs!<br>"
										return
								else
									usr << "<font color =red>You need four large brick to construct a stairs!<br>"
									return
				StoneSlab
					icon_state = "slab stone floor"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0)
							if(usr.Job == null)
								var/Bricks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/LargeBrick/P in usr)
									if(Num != 1)
										Num += 1
										Bricks += P
								if(Num == 1)
									view(usr) << "<font color=yellow>[usr] begins to construct a stone slab from a large brick!<br>"
									usr.Job = "MakeStoneSlab"
									usr.CanMove = 0
									var/Time = 300
									Time -= usr.MasonarySkill * 1.5
									Time -= usr.BuildingSkill * 1.5
									if(Time <= 75)
										Time = 75
									spawn(Time)
										if(usr)
											if(usr.loc == Loc)
												if(usr.Job == "MakeStoneSlab")
													usr.Job = null
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.MasonarySkill += usr.MasonarySkillMulti
													usr.GainStats(3)
													usr << "<font color =green>You finish construction of a stone slab!<br>"
													for(var/obj/I in Bricks)
														usr.Weight -= I.Weight
														del(I)
													for(var/turf/T in range(0,usr))
														T.icon_state = "slab stone floor"
														T.name = "Stone Slab"
														T.Type = "Inside"
														T.density = 0
														T.AttachedKey = "[usr.key]"
														T.ManMade = 1
														T.Material = "Stone"
														T.desc = "Made by ([usr])[usr.name]"
														T.opacity = 0
														for(var/obj/Items/Misc/M in range(0,usr))
															if(M.loc != usr)
																if(M.density == 0 && M.suffix == null)
																	M.loc = locate(0,0,0)
														for(var/obj/Items/Plants/P in range(0,usr))
															if(P.density == 0)
																P.loc = locate(0,0,0)
														Tiles += T
													usr.MovementCheck()
											else
												usr << "<font color=red>You moved from the position you were building at, you failed to construct a stone slab!<br>"
												return
								else
									usr << "<font color =red>You need one large brick to construct a stone slab!<br>"
									return
				WoodenWall
					icon_state = "wood wall"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0)
							if(usr.Job == null)
								var/Planks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/Plank/P in usr)
									if(Num != 3)
										Num += 1
										Planks += P
								if(Num == 3)
									view(usr) << "<font color=yellow>[usr] begins to construct a wooden wall from planks!<br>"
									usr.Job = "MakeWoodWall"
									usr.CanMove = 0
									var/Time = 300
									Time -= usr.CarpentrySkill * 1.5
									Time -= usr.BuildingSkill * 1.5
									if(Time <= 75)
										Time = 75
									spawn(Time)
										if(usr)
											if(usr.loc == Loc)
												if(usr.Job == "MakeWoodWall")
													usr.Job = null
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2.5)
													usr << "<font color =green>You finish construction of a wooden wall!<br>"
													for(var/obj/I in Planks)
														usr.Weight -= I.Weight
														del(I)
													for(var/turf/T in range(0,usr))
														T.icon_state = "wood wall"
														T.density = 1
														T.opacity = 1
														T.Dura += 25
														T.Fuel = 100
														T.AttachedKey = "[usr.key]"
														T.ManMade = 1
														T.Type = "Inside"
														T.Material = "Wood"
														T.desc = "Made by ([usr])[usr.name]"
														T.Dura += usr.CarpentrySkill
														T.Dura += usr.BuildingSkill
														T.name = "Wooden Wall"
														for(var/obj/Items/Misc/M in range(0,usr))
															if(M.loc != usr)
																if(M.density == 0 && M.suffix == null)
																	M.loc = locate(0,0,0)
														for(var/obj/Items/Plants/P in range(0,usr))
															if(P.density == 0)
																P.loc = locate(0,0,0)
														Tiles += T
													usr.MovementCheck()
											else
												usr << "<font color=red>You moved from the position you were building at, you failed to construct a wooden wall!<br>"
												return
								else
									usr << "<font color =red>You need three planks to construct a wall!<br>"
									return
				WoodenFloor
					icon_state = "wood floor"
					Click()
						if(usr.Fainted)
							usr << "<font color =red>You have fainted and cant do that!<br>"
							return
						if(usr.Stunned)
							usr << "<font color =red>You are stunned and cant do that!<br>"
							return
						var/Arms = 1
						if(usr.LeftArm <= 25)
							Arms = 0
						if(usr.RightArm <= 25)
							Arms = 0
						if(Arms == 0)
							usr << "<font color =red>Your arms are too damaged!<br>"
							return
						if(usr.Dead == 0)
							if(usr.Job == null)
								var/Planks = list()
								var/Num = 0
								var/Loc = usr.loc
								for(var/obj/Items/Resources/Plank/P in usr)
									if(Num != 3)
										Num += 1
										Planks += P
								if(Num == 3)
									view(usr) << "<font color=yellow>[usr] begins to construct a wooden floor from planks!<br>"
									usr.Job = "MakeWoodFloor"
									usr.CanMove = 0
									var/Time = 300
									Time -= usr.CarpentrySkill * 1.5
									Time -= usr.BuildingSkill * 1.5
									if(Time <= 75)
										Time = 75
									spawn(Time)
										if(usr)
											if(usr.loc == Loc)
												if(usr.Job == "MakeWoodFloor")
													usr.Job = null
													usr.BuildingSkill += usr.BuildingSkillMulti
													usr.CarpentrySkill += usr.CarpentrySkillMulti
													usr.GainStats(2.5)
													usr << "<font color =green>You finish construction of a wooden floor!<br>"
													for(var/obj/I in Planks)
														usr.Weight -= I.Weight
														del(I)
													for(var/turf/T in range(0,usr))
														T.icon_state = "wood floor"
														T.density = 0
														T.opacity = 0
														T.Fuel = 100
														T.AttachedKey = "[usr.key]"
														T.ManMade = 1
														T.Material = "Wood"
														T.Type = "Inside"
														T.desc = "Made by ([usr])[usr.name]"
														T.name = "Wooden Floor"
														for(var/obj/Items/Misc/M in range(0,usr))
															if(M.loc != usr)
																if(M.density == 0 && M.suffix == null)
																	M.loc = locate(0,0,0)
														for(var/obj/Items/Plants/P in range(0,usr))
															if(P.density == 0)
																P.loc = locate(0,0,0)
														Tiles += T
													usr.MovementCheck()
											else
												usr << "<font color=red>You moved from the position you were building at, you failed to construct a wooden floor!<br>"
												return
								else
									usr << "<font color =red>You need three planks to construct a wooden floor!<br>"
									return
			Admin
				layer = 100
				icon = 'adminhud.dmi'
				Type = "AdminHuds"
				BackGround
					icon_state = "background"
				TMiddle
					icon_state = "Tmiddle"
				Left
					icon_state = "L"
				Right
					icon_state = "R"
				Top
					icon_state = "T"
				Bottom
					icon_state = "B"
				TR
					icon_state = "TR"
				TL
					icon_state = "TL"
				BL
					icon_state = "BL"
				BR
					icon_state = "BR"
			Book
				icon = 'books.dmi'
				layer = 101
				FrameTLL
					icon_state = "frame TLL"
				FrameTML
					icon_state = "frame TML"
				FrameTRL
					icon_state = "frame TRL"
				FrameTLR
					icon_state = "frame TLR"
				FrameTLR
					icon_state = "frame TLR"
				FrameTMR
					icon_state = "frame TMR"
				FrameTRR
					icon_state = "frame TRR"
				FrameTTR
					icon_state = "frame TTR"
				FrameBBR
					icon_state = "frame BBR"
				FrameBRR
					icon_state = "frame BRR"
				FrameBMR
					icon_state = "frame BMR"
				FrameBLR
					icon_state = "frame BLR"
				FrameBRL
					icon_state = "frame BRL"
				FrameBML
					icon_state = "frame BML"
				FrameBLL
					icon_state = "frame BLL"
				FrameBBL
					icon_state = "frame BBL"
				FrameTTL
					icon_state = "frame TTL"
			Scroll
				layer = 100
				name = ""
				ScrollTrans
					icon = 'books.dmi'
					icon_state = "transparent"
				ScrollLeft
					icon = 'books.dmi'
					icon_state = "Left"
					Click()
						if(src.Type == "Book" && usr.UsingBook)
							var/obj/Book = usr.UsingBook
							for(var/obj/Misc/Spells/S in usr.client.screen)
								usr.client.screen -= S
								Book.FuturePages += S
							for(var/obj/Misc/SpellText/T in usr.client.screen)
								usr.client.screen -= T
							var/Num = 0
							var/X = 9
							var/Y = 14
							for(var/obj/Misc/Spells/S in Book.PreviousPages)
								if(Num != 4)
									if(Y != 12)
										Num += 1
										S.screen_loc = "[X],[Y]"
										usr.client.screen += S
										var/obj/Misc/SpellText/T = new
										T.icon_state = "[S.icon_state] text"
										T.screen_loc = "[X - 1],[Y]"
										usr.client.screen += T
										Book.PreviousPages -= S
										Y -= 1
									else
										Y = 14
										X = 11
										Num += 1
										S.screen_loc = "[X],[Y]"
										usr.client.screen += S
										var/obj/Misc/SpellText/T = new
										T.icon_state = "[S.icon_state] text"
										T.screen_loc = "[X - 1],[Y]"
										usr.client.screen += T
										Book.PreviousPages -= S
										Y -= 1
								else
									return
				ScrollRight
					icon = 'books.dmi'
					icon_state = "Right"
					Click()
						if(src.Type == "Book" && usr.UsingBook)
							var/obj/Book = usr.UsingBook
							for(var/obj/Misc/Spells/S in usr.client.screen)
								usr.client.screen -= S
								Book.PreviousPages += S
							for(var/obj/Misc/SpellText/T in usr.client.screen)
								usr.client.screen -= T
							var/Num = 0
							var/X = 9
							var/Y = 14
							for(var/obj/Misc/Spells/S in Book.FuturePages)
								if(Num != 4)
									if(Y != 12)
										Num += 1
										S.screen_loc = "[X],[Y]"
										usr.client.screen += S
										var/obj/Misc/SpellText/T = new
										T.icon_state = "[S.icon_state] text"
										T.screen_loc = "[X - 1],[Y]"
										usr.client.screen += T
										Book.FuturePages -= S
										Y -= 1
									else
										Y = 14
										X = 11
										Num += 1
										S.screen_loc = "[X],[Y]"
										usr.client.screen += S
										var/obj/Misc/SpellText/T = new
										T.icon_state = "[S.icon_state] text"
										T.screen_loc = "[X - 1],[Y]"
										usr.client.screen += T
										Book.FuturePages -= S
										Y -= 1
								else
									return
				Scroll
					icon = 'books.dmi'
					icon_state = "Scroll"
				ScrollRight2
					icon = 'books.dmi'
					icon_state = "ScrollRight"
				ScrollLeft2
					icon = 'books.dmi'
					icon_state = "ScrollLeft"
				ScrollMiddle
					icon_state = "Middle"
					icon = 'books.dmi'
			Inventory
				BottomRight
					icon_state = "BR"
					icon = 'HUD.dmi'
				BottomLeft
					icon_state = "BL"
					icon = 'HUD.dmi'
				TopRight
					icon_state = "TR"
					icon = 'HUD.dmi'
				TopLeft
					icon_state = "TL"
					icon = 'HUD.dmi'
				TopMiddle
					icon_state = "TM"
					icon = 'HUD.dmi'
				BottomMiddle
					icon_state = "BM"
					icon = 'HUD.dmi'
				LeftMiddle
					icon_state = "LM"
					icon = 'HUD.dmi'
				RightMiddle
					icon_state = "RM"
					icon = 'HUD.dmi'
				Middle
					icon_state = "M"
					icon = 'HUD.dmi'
				CloseMasonary
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						usr.Delete("Masonary","Masonary")
						usr.Ref = null
						for(var/obj/I in usr.client.screen)
							if(I in usr.CreateList)
								usr.client.screen -= I
						del(src)
				CloseCarpentry
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						usr.Delete("Carpentry","Carpentry")
						usr.Ref = null
						for(var/obj/I in usr.client.screen)
							if(I in usr.CreateList)
								usr.client.screen -= I
						del(src)
				CloseBone
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						usr.Delete("Bone","Bone")
						usr.Ref = null
						for(var/obj/I in usr.client.screen)
							if(I in usr.CreateList)
								usr.client.screen -= I
						del(src)
				CloseLeather
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						usr.Delete("Leather","Leather")
						usr.Ref = null
						for(var/obj/I in usr.client.screen)
							if(I in usr.CreateList)
								usr.client.screen -= I
						del(src)
				CloseForgeing
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						usr.Delete("Forge","Forge")
						usr.Ref = null
						for(var/obj/I in usr.client.screen)
							if(I in usr.CreateList)
								usr.client.screen -= I
						del(src)
				Close
					icon_state = "close"
					Type = "Close"
					icon = 'HUD.dmi'
					Click()
						if(usr.Container)
							var/obj/C = usr.Container
							if(C.ClosedState)
								C.icon_state = C.ClosedState
								C.overlays = null
								for(var/obj/Items/Misc/Lock/L in C)
									if(L.suffix == "Fitted")
										L.icon_state = "[L.Material] lock fitted chest"
										C.overlays += L
						if(usr.Function == "Transfer")
							usr.ResetButtons()
						usr.DeleteInventoryMenu()
				Transfer
					icon_state = "trade button off"
					Type = "Transfer"
					icon = 'HUD.dmi'
					Click()
						if(usr.Sleeping || usr.Dead || usr.Fainted || usr.Job)
							usr << "<font color = red>You are busy doing somthing else!<br>"
							return
						if(usr.Dead)
							usr << "<b>Cant do that while dead!<br>"
							return
						if(src.icon_state == "trade button off")
							usr.Function = "Transfer"
							src.icon_state = "trade button on"
							usr << "Click an item to transfer it between you and a container!<br>"
							return
						if(src.icon_state == "trade button on")
							usr.Function = null
							src.icon_state = "trade button off"
							return
				Eat
					icon_state = "eat button off"
					Type = "Eat"
					icon = 'HUD.dmi'
					Click()
						if(usr.Sleeping || usr.Dead || usr.Fainted || usr.Job)
							usr << "<font color = red>You are busy doing somthing else!<br>"
							return
						if(usr.Dead)
							usr << "<b>Cant do that while dead!<br>"
							return
						if(usr.CanEat == 0)
							usr << "<font color =red>You cant eat anything!<br>"
							return
						if(src.icon_state == "eat button off")
							usr.Function = "Eat"
							src.icon_state = "eat button on"
							usr << "Click food to eat it!<br>"
							return
						if(src.icon_state == "eat button on")
							usr.Function = null
							src.icon_state = "eat button off"
							return
				Equip
					icon_state = "equip button off"
					Type = "Equip"
					icon = 'HUD.dmi'
					Click()
						if(usr.Sleeping || usr.Dead || usr.Fainted || usr.Job)
							usr << "<font color = red>You are busy doing somthing else!<br>"
							return
						if(usr.Dead)
							usr << "<b>Cant do that while dead!<br>"
							return
						if(src.icon_state == "equip button off")
							usr.ResetButtons()
							usr.Function = "Equip"
							src.icon_state = "equip button on"
							return
						if(src.icon_state == "equip button on")
							usr.Function = null
							src.icon_state = "equip button off"
							return
				Slot
					icon_state = "inv slot"
					icon = 'HUD.dmi'
		RaceSelection
			icon = 'menu.dmi'
			layer = 100
			Male
				icon_state = "male off"
				Type = "male"
				Click()
					if(usr.Race)
						if(usr.Gender == null)
							src.icon_state = "male on"
							usr.Gender = "Male"
					else
						usr << "<b>Choose a race first!<br>"
						return
			Female
				icon_state = "female off"
				Type = "female"
				Click()
					if(usr.Race)
						if(usr.Gender == null)
							src.icon_state = "female on"
							usr.Gender = "Female"
					else
						usr << "<b>Choose a race first!<br>"
						return
			Accept
				icon = 'books.dmi'
				icon_state = "accept"
				Type = "DontChange"
				Click()
					if(usr.Race)
						if(usr.Gender)
							usr << sound(null)
							usr.MusicProc()
							usr.density = 1
							usr.CreateCharacter()
						else
							usr << "<b>Choose a gender first!<br>"
							return
					else
						usr << "<b>Choose a race by clicking a portrait!<br>"
						return
			Cancel
				icon = 'books.dmi'
				icon_state = "cancel"
				Type = "DontChange"
				Click()
					usr.ResetSelections()
			Human
				icon_state = "human off"
				Type = "human"
				Click()
					if(usr.Race ==null)
						src.icon_state = "human on"
						usr.Race = "Human"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Humans--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Humans are the most balanced of all the races.")
						usr.Text("RaceInfo",usr,2,11,10,14,"Within the Empire there are various guilds")
						usr.Text("RaceInfo",usr,2,10,10,14,"Most of which revolve around the worship of")
						usr.Text("RaceInfo",usr,2,9,10,14,"the God of Order. Humans have average Strength,")
						usr.Text("RaceInfo",usr,2,8,10,14,"Agility, Endurance and slightly above average")
						usr.Text("RaceInfo",usr,2,7,10,14,"Intelligence. They have good skill in swords and")
						usr.Text("RaceInfo",usr,2,6,10,14,"shields and are also very good at carpentry and")
						usr.Text("RaceInfo",usr,2,5,10,14,"farming. Humans tend to live for around 85 years.")
			Giant
				icon_state = "giant off"
				Type = "giant"
				Click()
					if(usr.Race ==null)
						src.icon_state = "giant on"
						usr.Race = "Giant"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Giants--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Giants are a strong but dim race. They")
						usr.Text("RaceInfo",usr,2,11,10,14,"tend to live in caves or small villages. Due")
						usr.Text("RaceInfo",usr,2,10,10,14,"to their intelligence they tend to worship any")
						usr.Text("RaceInfo",usr,2,9,10,14,"God they hear of. Giants have very good Strength,")
						usr.Text("RaceInfo",usr,2,8,10,14,"Endurance and very bad Agility and Intelligence.")
						usr.Text("RaceInfo",usr,2,7,10,14,"They have very good skill with blunt weapons but")
						usr.Text("RaceInfo",usr,2,6,10,14,"lack skill with others.Giants are very skilled at")
						usr.Text("RaceInfo",usr,2,5,10,14,"tree chopping and mining,aswell as contruction.")
						usr.Text("RaceInfo",usr,2,4,10,14,"They tend to live for 100 years.")
			Stahlite
				icon_state = "dwarf off"
				Type = "dwarf"
				Click()
					if(usr.Race ==null)
						src.icon_state = "dwarf on"
						usr.Race = "Stahlite"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Stahlites--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Stahlite are a very reclusive race of short")
						usr.Text("RaceInfo",usr,2,11,10,14,"beared humans. They love to mine for riches and")
						usr.Text("RaceInfo",usr,2,10,10,14,"constantly drink to keep their spirits high, the")
						usr.Text("RaceInfo",usr,2,9,10,14,"Stahlite tend to worship the God of Crafts,Stahlite")
						usr.Text("RaceInfo",usr,2,8,10,14,"have good Strength and Endurance but slightly poor")
						usr.Text("RaceInfo",usr,2,7,10,14,"Agility.They are as smart as humans. They are very")
						usr.Text("RaceInfo",usr,2,6,10,14,"good with Axes and Blunts,as well as ranged weapons")
						usr.Text("RaceInfo",usr,2,5,10,14,"Stahlite are good at most crafting skill,especially")
						usr.Text("RaceInfo",usr,2,4,10,14,"contruction.Stahlite tend to live for 150 years.")
			Cyclops
				icon_state = "cyclops off"
				Type = "cyclops"
				Click()
					if(usr.Race ==null)
						src.icon_state = "cyclops on"
						usr.Race = "Cyclops"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Cyclops--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Cyclops are a primitive race of cave dwellers")
						usr.Text("RaceInfo",usr,2,11,10,14,"who love to raid other settlements. They are very")
						usr.Text("RaceInfo",usr,2,10,10,14,"anti social and incredibily stupid. They only")
						usr.Text("RaceInfo",usr,2,9,10,14,"worship the God of Destruction. Cyclops have good")
						usr.Text("RaceInfo",usr,2,8,10,14,"Strength and Endurance but bad Agility and very")
						usr.Text("RaceInfo",usr,2,7,10,14,"bad Intelligence. They are very skilled in blunt")
						usr.Text("RaceInfo",usr,2,6,10,14,"weapons but lack the skill of others. They are")
						usr.Text("RaceInfo",usr,2,5,10,14,"also good at hunting and trap making.")
						usr.Text("RaceInfo",usr,2,4,10,14,"They tend to live for 90 years.")
			Frogman
				icon_state = "frogman off"
				Type = "frogman"
				Click()
					if(usr.Race ==null)
						src.icon_state = "frogman on"
						usr.Race = "Frogman"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Frogmen--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Frogmen are a very agile race of swamp dwellers")
						usr.Text("RaceInfo",usr,2,11,10,14,"who constantly fight over breeding grounds. They")
						usr.Text("RaceInfo",usr,2,10,10,14,"tend to worship the Gods of Harvest and Beasts.")
						usr.Text("RaceInfo",usr,2,9,10,14,"Frogmen have very good Agility but poor Strength")
						usr.Text("RaceInfo",usr,2,8,10,14,"and Endurnace they also have poor Intelligence.They")
						usr.Text("RaceInfo",usr,2,7,10,14,"are skilled with spears,shields and ranged weapons.")
						usr.Text("RaceInfo",usr,2,6,10,14,"They have good skills at trap making,hunting")
						usr.Text("RaceInfo",usr,2,5,10,14,"and Swimming. Frogmen tend to live for 80 years.")
			Wolfman
				icon_state = "wolfman off"
				Type = "wolfman"
				Click()
					if(usr.Race ==null)
						src.icon_state = "wolfman on"
						usr.Race = "Wolfman"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Wolfmen--")
						usr.Text("RaceInfo",usr,2,12,10,14,"Wolfmen are a brutal race of hunters and stalkers")
						usr.Text("RaceInfo",usr,2,11,10,14,"of the night. Their great strength and speed")
						usr.Text("RaceInfo",usr,2,10,10,14,"make them a worthy foe for any opponent. Wolfmen")
						usr.Text("RaceInfo",usr,2,9,10,14,"worship the gods of Beasts, Destruction and")
						usr.Text("RaceInfo",usr,2,8,10,14,"rarely Death. They have amazing un-armed skill,but")
						usr.Text("RaceInfo",usr,2,7,10,14,"below average weapon skill in all other areas.")
						usr.Text("RaceInfo",usr,2,6,10,14,"They are great trackers, skinners, and fishers")
						usr.Text("RaceInfo",usr,2,5,10,14,"and tend to live for around 90 years.")
			Snakeman
				icon_state = "snakeman off"
				Type = "snakeman"
				Click()
					if(usr.Race ==null)
						src.icon_state = "snakeman on"
						usr.Race = "Snakeman"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Snakemen--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Snakemen are one of the oldest races in")
						usr.Text("RaceInfo",usr,2,11,10,14,"the world,third to the Stahlites and Altherians.")
						usr.Text("RaceInfo",usr,2,10,10,14,"They are a desert dwelling nomad race, with no")
						usr.Text("RaceInfo",usr,2,9,10,14,"true home or loyalties. They tend to worship the")
						usr.Text("RaceInfo",usr,2,8,10,14,"gods of Wisdom, Blood and Death, but are not truly")
						usr.Text("RaceInfo",usr,2,7,10,14,"good or evil. Snakeman are strong and fast,but lack")
						usr.Text("RaceInfo",usr,2,6,10,14,"the endruance of others. They have great skills in")
						usr.Text("RaceInfo",usr,2,5,10,14,"most weapons.They are good at stone work & alchemy.")
						usr.Text("RaceInfo",usr,2,4,10,14,"Snakemen tend to live for around 100 years.")
			Lizardman
				icon_state = "lizardman off"
				Type = "lizardman"
				Click()
					if(usr.Race ==null)
						src.icon_state = "lizardman on"
						usr.Race = "Illithid"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Lizardmen--")
						usr.Text("RaceInfo",usr,2,12,10,14,"Illithids are not native to this world, coming")
						usr.Text("RaceInfo",usr,2,11,10,14,"from a strange star long ago.They are super")
						usr.Text("RaceInfo",usr,2,10,10,14,"Intelligent and rather agile, but lack strength")
						usr.Text("RaceInfo",usr,2,9,10,14,"and endurance.They gain in every skill at an")
						usr.Text("RaceInfo",usr,2,8,10,14,"above average rate and start with some Astral")
						usr.Text("RaceInfo",usr,2,7,10,14,"Magic.They speak Ancient,regrow lost limbs and")
						usr.Text("RaceInfo",usr,2,6,10,14,"need not breathe.They make excellent magic users")
						usr.Text("RaceInfo",usr,2,5,10,14,"and learn it with great speed.Illithids live for")
						usr.Text("RaceInfo",usr,2,4,10,14,"200 years and worship no earthly god.")
			Illithid
				icon_state = "illithid off"
				Type = "illithid"
				Click()
					if(usr.Race ==null)
						src.icon_state = "illithid on"
						usr.Race = "Illithid"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Illithids--")
						usr.Text("RaceInfo",usr,2,12,10,14,"Illithids are not native to this world, coming")
						usr.Text("RaceInfo",usr,2,11,10,14,"from a strange star long ago.They are super")
						usr.Text("RaceInfo",usr,2,10,10,14,"Intelligent and rather agile, but lack strength")
						usr.Text("RaceInfo",usr,2,9,10,14,"and endurance.They gain in every skill at an")
						usr.Text("RaceInfo",usr,2,8,10,14,"above average rate and start with some Astral")
						usr.Text("RaceInfo",usr,2,7,10,14,"Magic.They speak Ancient,regrow lost limbs and")
						usr.Text("RaceInfo",usr,2,6,10,14,"need not breathe.They make excellent magic users")
						usr.Text("RaceInfo",usr,2,5,10,14,"and learn it with great speed.Illithids live for")
						usr.Text("RaceInfo",usr,2,4,10,14,"200 years and worship no earthly god.")
			Alther
				icon_state = "elf off"
				Type = "elf"
				Click()
					if(usr.Race ==null)
						src.icon_state = "elf on"
						usr.Race = "Alther"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Altherions--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Altherions are a highly intelligent race")
						usr.Text("RaceInfo",usr,2,11,10,14,"who specialize in magical and spiritial culture.")
						usr.Text("RaceInfo",usr,2,10,10,14,"They worship the Gods of Harvest,Beasts and")
						usr.Text("RaceInfo",usr,2,9,10,14,"Wisdom and somtimes the God of Order.They have good")
						usr.Text("RaceInfo",usr,2,8,10,14,"Agility and very good intelligence but lack in")
						usr.Text("RaceInfo",usr,2,7,10,14,"Strength and Endurance. Altherions have good skill")
						usr.Text("RaceInfo",usr,2,6,10,14,"in all weapons except axes.They are skilled at")
						usr.Text("RaceInfo",usr,2,5,10,14,"Stone Work,Contruction and Hunting.They tend to")
						usr.Text("RaceInfo",usr,2,4,10,14,"live for 200 years.")
			Ratling
				icon_state = "ratling off"
				Type = "ratling"
				Click()
					if(usr.Race ==null)
						src.icon_state = "ratling on"
						usr.Race = "Ratling"
						usr.Text("RaceInfo",usr,7,13,10,14,"--Ratlings--")
						usr.Text("RaceInfo",usr,2,12,10,14,"The Ratlings are a disgusting race of warped rodent")
						usr.Text("RaceInfo",usr,2,11,10,14,"who specialize in death and detruction. They were")
						usr.Text("RaceInfo",usr,2,10,10,14,"created by Chaos Energy and worship the Gods of")
						usr.Text("RaceInfo",usr,2,9,10,14,"Destruction,Death and Chaos. They have incredible")
						usr.Text("RaceInfo",usr,2,8,10,14,"Agility, but very poor Strength and Endurance.They")
						usr.Text("RaceInfo",usr,2,7,10,14,"have average Intelligence and are very skilled with")
						usr.Text("RaceInfo",usr,2,6,10,14,"Daggers, Spears and Ranged weapons.They are good at")
						usr.Text("RaceInfo",usr,2,5,10,14,"making traps, hunting and stealth.Ratlings tend to")
						usr.Text("RaceInfo",usr,2,4,10,14,"live for 75 years.")

		AdminButtons
			icon = 'adminhud.dmi'
			AdminSummon
				icon_state = "summon off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "summon on"
						var/list/menu = new()
						var/Mobs = list()
						for(var/mob/M in world)
							menu += "[M.name]"
							if(M.OrginalName)
								menu += "[M.OrginalName]"
							Mobs += M
						menu += "Cancel"
						var/Result = input("Who do you wish to summon?", "Choose", null) in menu
						if (Result == "Cancel")
							src.icon_state = "summon off"
							return
						if(Result)
							var/mob/Found = null
							for(var/mob/M in Mobs)
								if(M.name == Result)
									Found = M
								if(M.OrginalName == Result)
									Found = M
							if(Found)
								Found.loc = usr.loc
								Found.overlays -= /obj/Misc/Bubbles/
								Found.overlays -= /obj/Misc/Swim/
								Found.InWater = 0
								src.icon_state = "summon off"
								Found << "<font color =yellow>[usr] summons you!<br>"
								usr << "<font color =green>You summon [Found]!<br>"
								usr.Log_admin("([usr.key])[usr] summons [Found] to [usr.x],[usr.y],[usr.z]")
			AdminTeleport
				icon_state = "teleport off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						usr << "<font color = yellow>Location - [usr.x],[usr.y],[usr.z]<br>"
						switch(alert("Teleport to Object? Or Teleport to location?",,"Object","Location"))
							if("Location")
								var/X=input("X Location??")as num
								var/Y=input("Y Location??")as num
								var/Z=input("Z Location??")as num
								if(X)
									if(Y)
										if(Z)
											usr.loc = locate(X,Y,Z)
											usr.overlays -= /obj/Misc/Bubbles/
											usr.overlays -= /obj/Misc/Swim/
											usr.InWater = 0
											usr << "<font color = green>You teleport to [X],[Y],[Z]!<br>"
											usr.Log_admin("([usr.key])[usr] teleports to [X],[Y],[Z]")
								return
							if("Object")
								src.icon_state = "teleport on"
								var/list/menu = new()
								var/Mobs = list()
								for(var/mob/M in world)
									menu += "[M.name]"
									if(M.OrginalName)
										menu += "[M.OrginalName]"
									Mobs += M
								menu += "Cancel"
								var/Result = input("Who do you wish to teleport to?", "Choose", null) in menu
								if (Result == "Cancel")
									src.icon_state = "teleport off"
									return
								if(Result)
									var/mob/Found = null
									for(var/mob/M in Mobs)
										if(M.name == Result)
											Found = M
										if(M.OrginalName == Result)
											Found = M
									if(Found)
										usr.loc = Found.loc
										usr.overlays -= /obj/Misc/Bubbles/
										usr.overlays -= /obj/Misc/Swim/
										usr.InWater = 0
										src.icon_state = "teleport off"
										usr.Log_admin("([usr.key])[usr] teleports to [Found]")
			AdminCreate
				icon_state = "create off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin >= 2)
						src.icon_state = "create on"
						var/T=input("Create what??")as null|anything in typesof(/obj,/mob)
						if(T == null)
							src.icon_state = "create off"
							return
						if(T)
							var/N=input("How many?? No more than 50")as null|num
							if(N == 0)
								return
							if(N >= 51)
								usr << "That number is too high!<br>"
								return
							if(N == null)
								return
							if(N)
								usr.Log_admin("([usr.key])[usr] creates [N] [T] at [usr.x],[usr.y],[usr.z]")
								while(N)
									N -= 1
									var/obj/O = new T()
									O.loc = usr.loc
									src.icon_state = "create off"
					else
						usr << "<font color = teal>Your Admin Level is not High enough.<br>"
						return
			AdminEdit
				icon_state = "edit off"
				Type = "AdminHuds"
				layer = 100
				Click()
					src.icon_state = "edit on"
					if(usr.AdminDelete)
						usr << "<font color = green>Admin Delete Mode Off!<br>"
						usr.AdminDelete = 0
						src.icon_state = "edit off"
						return
					if(usr.AdminEdit)
						usr << "<font color = green>Admin Edit Mode Off!<br>"
						usr.AdminEdit = 0
						src.icon_state = "edit off"
						return
					switch(alert("Double Click an object to Delete? Or Double Click an object to Edit?",,"DoubleClick","Delete"))
						if("Delete")
							if(usr.Admin >= 2)
								usr.AdminDelete = 1
								usr << "<font color = green> Double Click an object to Delete/Boot it!<br>"
								return
							else
								usr << "<font color = teal>Your Admin Level is not High enough.<br>"
								return
						if("DoubleClick")
							if(usr.Admin >= 3)
								usr.AdminEdit = 1
								usr << "<font color = green> Double Click an object to Edit it!<br>"
								return
							else
								usr << "<font color = teal>Your Admin Level is not High enough.<br>"
								return
			AdminBan
				icon_state = "ban off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin >= 1)
						src.icon_state = "ban on"
						switch(alert("Ban or Un-Ban?",,"Ban","Un-Ban"))
							if("Un-Ban")
								var/T=input("Which address would you like to unban?")as null|anything in BanList
								BanList -= T
								src.icon_state = "ban off"
								SaveMisc()
								return
							if("Ban")
								switch(alert("Ban or Manual Ban?",,"Ban","Manual Ban"))
									if("Manual Ban")
										var/B = input("Enter the IP or Key of a Player to Ban","Ban")as null|text
										if(!B)
											src.icon_state = "ban off"
											return
										BanList += B
										src.icon_state = "ban off"
										world << "<font color = teal>[B] was Manually Banned by [usr]<br>"
										SaveMisc()
										return
									if("Ban")
										var/Ban = list()
										var/list/menu = new()
										for(var/mob/M in world)
											if(M.client)
												usr << "([M.key])[M]<br>"
												menu += "[M.key]"
												Ban += M
										menu += "Cancel"
										var/Result = input("Who do you wish to Ban?", "Choose", null) in menu
										if (Result == "Cancel")
											src.icon_state = "ban off"
											return
										if(Result)
											if(Result == "Ginseng")
												world << "<font color = teal><b><font size = 6>[usr] Tried to Ban Ginseng, but fails!<br>"
												src.icon_state = "ban off"
												return
											if(Result == "Ginseng")
												src.icon_state = "ban off"
												return
											var/R = input("Reason")as null|text
											for(var/mob/M in Ban)
												if(M.key == Result)
													BanList += M.client.address
													world << "<font color = teal>([Result]) [M] has been Banned by ([usr.key])[usr] for [R]!<br>"
													src.icon_state = "ban off"
													usr.Log_admin("([usr.key])[usr] bans ([M.key])[M] for [R]")
													del(M)
													SaveMisc()
											return
					else
						usr << "<font color = teal>Your Admin Level is not High enough.<br>"
						return
			AdminInprison
				icon_state = "prison off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "prison on"
						var/list/menu = new()
						var/Mobs = list()
						for(var/mob/M in world)
							menu += "[M.name]"
							if(M.OrginalName)
								menu += "[M.OrginalName]"
							Mobs += M
						menu += "Cancel"
						var/Result = input("Who do you wish to In-Prison?", "Choose", null) in menu
						if (Result == "Cancel")
							src.icon_state = "prison off"
							return
						if(Result)
							var/mob/Found = null
							for(var/mob/M in Mobs)
								if(M.name == Result)
									Found = M
								if(M.OrginalName == Result)
									Found = M
							if(Found)
								switch(alert("Send them to a Prison, or to Hell?",,"Prison","Hell"))
									if("Prison")
										var/R = input("Reason")as null|text
										world << "<font color = teal>([Found.key]) [Found] has been In-Prisoned by ([usr.key]) [usr] for [R]!<br>"
										Found << "<font color = teal><font size = 3>You will be automatically released after one in game month!<br>"
										src.icon_state = "prison off"
										var/LOC = rand(1,6)
										if(LOC == 1)
											Found.loc = locate(25,105,1)
										if(LOC == 2)
											Found.loc = locate(25,103,1)
										if(LOC == 3)
											Found.loc = locate(25,100,1)
										if(LOC == 4)
											Found.loc = locate(31,105,1)
										if(LOC == 5)
											Found.loc = locate(31,103,1)
										if(LOC == 6)
											Found.loc = locate(31,100,1)
										Found.overlays -= /obj/Misc/Bubbles/
										Found.overlays -= /obj/Misc/Swim/
										Found.InWater = 0
										Found.Jailed = 1
										Found.JailTime()
										usr.Log_admin("([usr.key])[usr] jails [Found] for [R]")
										return
									if("Hell")
										usr << "Not added Hell yet."
										return
										var/R = input("Reason")as null|text
										world << "<font color = teal>([Found.key]) [Found] has been sent to Hell by ([usr.key]) [usr] for [R]!<br>"
										src.icon_state = "prison off"
										Found.loc = locate(250,250,4)
										usr.Log_admin("([usr.key])[usr] sends [Found] to Hell.")
			AdminMute
				icon_state = "mute off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "mute on"
						switch(alert("Mute a Player? Or Mute the World?",,"Player","World"))
							if("World")
								if(Mute)
									Mute = 0
									world << "<font color = teal>OOC is now Enabled!<br>"
									src.icon_state = "mute off"
									usr.Log_admin("([usr.key])[usr] turns on OOC")
									return
								if(Mute == 0)
									Mute = 1
									world << "<font color = teal>OOC is now Disabled!<br>"
									src.icon_state = "mute off"
									usr.Log_admin("([usr.key])[usr] turns off OOC")
									return
							if("Player")
								var/list/menu = new()
								var/Mobs = list()
								for(var/mob/M in Players)
									menu += "[M.name]"
									if(M.OrginalName)
										menu += "[M.OrginalName]"
									Mobs += M
								menu += "Cancel"
								var/Result = input("Who do you wish to Mute?", "Choose", null) in menu
								if (Result == "Cancel")
									src.icon_state = "mute off"
									return
								if(Result)
									var/mob/Found = null
									for(var/mob/M in Mobs)
										if(M.name == Result)
											Found = M
										if(M.OrginalName == Result)
											Found = M
									if(Found)
										if(Found.Muted == 0)
											Found.Muted = 1
											world << "<font color = teal>([Found.key]) [Found] has been Muted!<br>"
											src.icon_state = "mute off"
											usr.Log_admin("([usr.key])[usr] mutes [Found]")
											return
										if(Found.Muted)
											Found.Muted = 0
											world << "<font color = teal>([Found.key]) [Found] has been Un-Muted!<br>"
											src.icon_state = "mute off"
											usr.Log_admin("([usr.key])[usr] un-mutes [Found]")
											return
			AdminChangeDensity
				icon_state = "turn non-dense off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						if(usr.density)
							src.icon_state = "turn non-dense on"
							usr.density = 0
							usr << "<font color = green>You are now non-dense!<br>"
							usr.Log_admin("([usr.key])[usr] turns non-dense")
							return
						if(usr.density == 0)
							src.icon_state = "turn non-dense off"
							usr.density = 1
							usr << "<font color = green>You are now dense!<br>"
							usr.Log_admin("([usr.key])[usr] turns dense")
							return
			AdminInvisibility
				icon_state = "turn invisible off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						if(usr.AdminInvis)
							src.icon_state = "turn invisible off"
							usr.icon = usr.AdminInvis
							usr.AdminInvis = null
							if(usr.Hair)
								usr.overlays += usr.Hair
							if(usr.Beard)
								usr.overlays += usr.Beard
							for(var/obj/Items/I in usr)
								if(I.suffix == "Equip")
									usr.overlays+=image(I.icon,I.icon_state,I.ItemLayer)
							usr.Faction = usr.StoredFaction
							usr << "<font color = green>You can now be seen by others!<br>"
							usr.Log_admin("([usr.key])[usr] turns visible")
							return
						if(usr.AdminInvis == null)
							src.icon_state = "turn invisible on"
							usr.AdminInvis = usr.icon
							usr.icon = null
							usr.overlays = null
							if(usr.StoredFaction == null)
								usr.StoredFaction = usr.Faction
							usr.Faction = "Admin"
							for(var/obj/I in usr)
								usr.overlays-=image(I.icon,I.icon_state,I.ItemLayer)
							usr << "<font color = green>You are now invisible!<br>"
							usr.Log_admin("([usr.key])[usr] turns invisible")
							return

			AdminServerOptions
				icon_state = "options off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "options on"
						var/list/menu = new()
						menu += "Read Admin Logs"
						menu += "Read Player Logs"
						menu += "Read/Edit Notes"
						menu += "Read/Edit Public Notes"
						menu += "Read Bugs/Player Reports"
						menu += "Read Map Logs"
						menu += "Read Errors"
						menu += "Edit Rules"
						menu += "Mob/Obj Count"
						menu += "Save Map"
						menu += "Load Map"
						menu += "Wipe Map"
						menu += "Set Server Status"
						menu += "Set Year"
						menu += "Set World Skill/Stat Cap"
						menu += "Set Gain Bonus"
						menu += "Force Repop"
						menu += "Check Players Contents"
						menu += "Cancel"
						var/Result = input("Choose a option?", "Choose", null) in menu
						if (Result == "Cancel")
							src.icon_state = "options off"
							return
						if(Result == "Read Admin Logs")
							usr<<browse(file("logs/Adminlog.html"))
							return
						if(Result == "Check Players Contents")
							var/list/menu2 = new()
							var/Mobs = list()
							for(var/mob/M in world)
								menu2 += "[M.name]"
								if(M.OrginalName)
									menu2 += "[M.OrginalName]"
								Mobs += M
							menu2 += "Cancel"
							var/Result2 = input("Who do you wish to Check?", "Choose", null) in menu2
							if (Result2 == "Cancel")
								src.icon_state = "options off"
								return
							if(Result2)
								var/mob/Found = null
								for(var/mob/M in Mobs)
									if(M.name == Result2)
										Found = M
									if(M.OrginalName == Result2)
										Found = M
								if(Found)
									for(var/obj/Items/I in Found)
										usr << "<font color = teal>[Found] has [I] [I.suffix]<br>"
									return
						if(Result == "Force Repop")
							Populate()
							usr << "<font color = teal>Repopulation of NPC sucessful, please remember that this happens every in game year automatically.<br>"
							usr.Log_admin("([usr.key])[usr] Forces a Repop.")
						if(Result == "Load Map")
							LoadMap()
							SaveMisc()
							src.icon_state = "options off"
							usr.Log_admin("([usr.key])[usr] loads the map.")
							return
						if(Result == "Save Map")
							SaveMap()
							SaveMisc()
							src.icon_state = "options off"
							usr.Log_admin("([usr.key])[usr] saves the map.")
							return
						if(Result == "Read Map Logs")
							usr << browse(file("logs/Maplog.html"))
							src.icon_state = "options off"
							return
						if(Result == "Read Errors")
							usr << browse(file("ErrorLog.txt"))
							src.icon_state = "options off"
							return
						if(Result == "Edit Rules")
							for(var/mob/M in Players)
								if(M.Admin)
									M << "([usr.key])[usr] is Editing the Rules...<br>"
							var/N = input("Please do not delete the current Rules when you are finished editing","Rules","[Rules]")as null|message
							if(!N)
								src.icon_state = "options off"
								for(var/mob/M in Players)
									if(M.Admin)
										M << "([usr.key])[usr] has Finished Editing the Rules...<br>"
								return
							else
								switch(alert("Are you sure you are done editing the Rules correctly?",,"Yes","No"))
									if("Yes")
										Rules = N
										src.icon_state = "options off"
										for(var/mob/M in Players)
											if(M.Admin)
												M << "[usr] has Finished Editing the Rules...<br>"
										return
									if("No")
										src.icon_state = "options off"
										for(var/mob/M in Players)
											if(M.Admin)
												M << "[usr] has Canceled Editing the Rules...<br>"
										return
						if(Result == "Read/Edit Public Notes")
							switch(alert("Read or Edit?",,"Read","Edit"))
								if("Read")
									var/html_doc="<head><title>Public Notes</title></head><body bgcolor=#000000 text=#FFFF00><center>[PublicNotes]"
									usr<<browse(html_doc,"window=Public Notes")
									src.icon_state = "options off"
									return
								if("Edit")
									for(var/mob/M in Players)
										if(M.Admin)
											M << "([usr.key])[usr] is Editing the Public Notes...<br>"
									var/N = input("Please do not delete the current Public Notes when you are finished editing","Public Notes","[PublicNotes]")as null|message
									if(!N)
										src.icon_state = "options off"
										for(var/mob/M in Players)
											if(M.Admin)
												M << "([usr.key])[usr] has Finished Editing the Public Notes...<br>"
										return
									else
										switch(alert("Are you sure you are done editing the Public Notes correctly?",,"Yes","No"))
											if("Yes")
												PublicNotes = N
												src.icon_state = "options off"
												for(var/mob/M in Players)
													if(M.Admin)
														M << "[usr] has Finished Editing the Public Notes...<br>"
												return
											if("No")
												src.icon_state = "options off"
												for(var/mob/M in Players)
													if(M.Admin)
														M << "[usr] has Canceled Editing the Public Notes...<br>"
												return
						if(Result == "Read/Edit Notes")
							switch(alert("Read or Edit?",,"Read","Edit"))
								if("Read")
									var/html_doc="<head><title>Notes</title></head><body bgcolor=#000000 text=#FFFF00><center>[Notes]"
									usr<<browse(html_doc,"window=Notes")
									src.icon_state = "options off"
									return
								if("Edit")
									for(var/mob/M in Players)
										if(M.Admin)
											M << "([usr.key])[usr] is Editing the Notes...<br>"
									var/N = input("Please do not delete the current Notes when you are finished editing","Notes","[Notes]")as null|message
									if(!N)
										src.icon_state = "options off"
										for(var/mob/M in Players)
											if(M.Admin)
												M << "([usr.key])[usr] has Finished Editing the Notes...<br>"
										return
									else
										switch(alert("Are you sure you are done editing the Notes correctly?",,"Yes","No"))
											if("Yes")
												Notes = N
												src.icon_state = "options off"
												for(var/mob/M in Players)
													if(M.Admin)
														M << "[usr] has Finished Editing the Notes...<br>"
												return
											if("No")
												src.icon_state = "options off"
												for(var/mob/M in Players)
													if(M.Admin)
														M << "[usr] has Canceled Editing the Notes...<br>"
												return
						if(Result == "Wipe Map")
							switch(alert("Wipe Map?",,"Yes","No"))
								if("No")
									src.icon_state = "options off"
									return
								if("Yes")
									if(usr.Admin >= 1)
										fdel("map/")
										world << "<font color = teal><font size = 4>Map has been wiped by [usr]!<br>"
										usr.Log_admin("([usr.key])[usr] Wipes the Map Save Files.")
										src.icon_state = "options off"
										return
									else
										usr << "<font color = teal>Your Admin Level is not High enough.<br>"
										return
						if(Result == "Set Gain Bonus")
							var/S = input("The default gain chance for players is 22% per hit on a mob. Raising this will increase the speed they gain by the percent you enter. Current Gains are [GainRate].")as null|num
							if(!S)
								src.icon_state = "options off"
								return
							if(S)
								GainRate = S
								src.icon_state = "options off"
								world << "<font color = teal>World Gain Bonus has been set to [S] by ([usr.key])[usr], Now saving map!<br>"
								SaveMap()
								SaveMisc()
								usr.Log_admin("([usr.key])[usr] sets the Bonus Gain to [S].")
								return
						if(Result == "Set World Skill/Stat Cap")
							var/S = input("This sets the games World Skill/Stat Cap, the Default is 11, at year 0.Current is [WorldSkillsCap].")as null|num
							if(!S)
								src.icon_state = "options off"
								return
							if(S)
								WorldSkillsCap = S
								WorldStrCap = S
								WorldAgilCap = S
								WorldEndCap = S
								WorldIntCap = S
								src.icon_state = "options off"
								world << "<font color = teal>World Skill/Stat Cap has been set to [S] by ([usr.key])[usr], Now saving map!<br>"
								SaveMap()
								SaveMisc()
								usr.Log_admin("([usr.key])[usr] sets the Worlds Skill Cap to [S].")
								return
						if(Result == "Set Year")
							var/S = input("This sets the game year.")as null|num
							if(!S)
								src.icon_state = "options off"
								return
							if(S)
								Year = S
								WorldSkillsCap = 0
								WorldStrCap = 0
								WorldAgilCap = 0
								WorldEndCap = 0
								WorldIntCap = 0
								WorldSkillsCap += 36 * S
								WorldStrCap += 36 * S
								WorldAgilCap += 36 * S
								WorldEndCap += 36 * S
								WorldIntCap += 36 * S
								src.icon_state = "options off"
								world << "<font color = teal>Year as been set to [Year] by ([usr.key])[usr], Now saving map!<br>"
								SaveMap()
								SaveMisc()
								usr.Log_admin("([usr.key])[usr] sets the Worlds Year to [Year].")
								return
						if(Result == "Set Server Status")
							var/S = input("This sets the status of the game on someones pager.")as null|text
							if(!S)
								src.icon_state = "options off"
								return
							if(S)
								world.status = S
								src.icon_state = "options off"
								world << "World status set to [S] by [usr]<br>"
								usr.Log_admin("([usr.key])[usr] sets the Server Status to [S]")
								return
						if(Result == "Mob/Obj Count")
							var/mobs = 0
							var/objs = 0
							for(var/mob/m in world)
								mobs += 1
							for(var/obj/I in world)
								objs += 1
							usr << "<font color = teal> There are [mobs] Mobs and [objs] Objs!<br>"
							src.icon_state = "options off"
							return
						if(Result == "Read Bugs/Player Reports")
							usr<<browse(file("logs/Reports.html"))
							src.icon_state = "options off"
							return
						if(Result == "Read Error Logs")
							usr<<browse(file("logs/Errorlog.html"))
							src.icon_state = "options off"
							return
						if(Result == "Read Player Logs")
							var/list/players = new()
							var/Mobs = list()
							for(var/mob/M in Players)
								players += "[M.name]"
								if(M.OrginalName)
									players += "[M.OrginalName]"
								Mobs += M
							players += "Cancel"
							var/Results = input("Read Which Log?", "Choose", null) in players
							if (Results == "Cancel")
								src.icon_state = "options off"
								return
							if(Results)
								var/mob/Found = null
								for(var/mob/M in Mobs)
									if(M.name == Results)
										Found = M
									if(M.OrginalName == Results)
										Found = M
								if(Found)
									usr<<browse(file("logs/Log([Found.key]).html"))
									src.icon_state = "options off"
								return
			AdminReboot
				icon_state = "reboot off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin >= 1)
						src.icon_state = "reboot on"
						switch(alert("Choose Option",,"Reboot","Shut Down"))
							if("Reboot")
								switch(alert("Reboot Server?",,"Yes","No"))
									if("No")
										src.icon_state = "reboot off"
										return
									if("Yes")
										src.icon_state = "reboot off"
										world << "<font color=yellow><font size =10>Server will reboot in one minute!<br>"
										usr.Log_admin("([usr.key])[usr] reboots world")
										RebootProc()
										return
							if("Shut Down")
								switch(alert("Shut Server?",,"Yes","No"))
									if("No")
										src.icon_state = "reboot off"
										return
									if("Yes")
										src.icon_state = "reboot off"
										world << "<font color=yellow><font size =10>Server will now shut down - ([usr.key])[usr] - [usr.OrginalName]<br>"
										usr.Log_admin("([usr.key])[usr] shuts the world down")
										SaveMap()
										SaveMisc()
										del(world)
					else
						usr << "<font color = teal>Your Admin Level is not High enough.<br>"
						return
			AdminEditStory
				icon_state = "edit story off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "edit story on"
						switch(alert("Edit Story?? Or Edit Ranks??",,"Story","Ranks"))
							if("Story")
								for(var/mob/M in Players)
									if(M.Admin)
										M << "([usr.key])[usr] is Editing the Story...<br>"
								var/N = input("Please do not delete the current Story when you are finished editing","Story","[Story]")as null|message
								if(!N)
									src.icon_state = "edit story off"
									for(var/mob/M in Players)
										if(M.Admin)
											M << "([usr.key])[usr] has Finished Editing the Story...<br>"
									return
								else
									switch(alert("Are you sure you are done editing the Story correctly?",,"Yes","No"))
										if("Yes")
											Story = N
											src.icon_state = "edit story off"
											for(var/mob/M in Players)
												if(M.Admin)
													M << "([usr.key])[usr] has Finished Editing the Story...<br>"
											return
										if("No")
											src.icon_state = "edit story off"
											for(var/mob/M in Players)
												if(M.Admin)
													M << "([usr.key])[usr] has Canceled Editing the Story...<br>"
											return
							if("Ranks")
								for(var/mob/M in Players)
									if(M.Admin)
										M << "([usr.key])[usr] is Editing the Ranks...<br>"
								var/N = input("Please do not delete the current Ranks when you are finished editing","Ranks","[Ranks]")as null|message
								if(!N)
									src.icon_state = "edit story off"
									for(var/mob/M in Players)
										if(M.Admin)
											M << "([usr.key])[usr] has Finished Editing the Ranks...<br>"
									return
								else
									switch(alert("Are you sure you are done editing the Ranks correctly?",,"Yes","No"))
										if("Yes")
											Ranks = N
											src.icon_state = "edit story off"
											for(var/mob/M in Players)
												if(M.Admin)
													M << "([usr.key])[usr] has Finished Editing the Ranks...<br>"
											return
										if("No")
											src.icon_state = "edit story off"
											for(var/mob/M in Players)
												if(M.Admin)
													M << "([usr.key])[usr] has Canceled Editing the Ranks...<br>"
											return
						return
			AdminReward
				icon_state = "max stats off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "max stats on"
						var/list/rewards = new()
						rewards += "Reward Rank"
						rewards += "Reward Language"
						rewards += "Reward Stats"
						rewards += "Reward Race"
						rewards += "Cancel"
						var/Rewarded = input("Choose a Reward to give.", "Choose", null) in rewards
						if(Rewarded == "Reward Race")
							if(usr.Admin >= 3)
								var/list/menu = new()
								var/Mobs = list()
								for(var/mob/M in world)
									if(M.client)
										menu += "[M.name]"
										if(M.OrginalName)
											menu += "[M.OrginalName]"
										Mobs += M
								menu += "Cancel"
								var/Result = input("Who do you wish to Reward with a Race?", "Choose", null) in menu
								if (Result == "Cancel")
									src.icon_state = "max stats off"
									return
								if(Result)
									var/mob/Found = null
									for(var/mob/M in Mobs)
										if(M.name == Result)
											Found = M
										if(M.OrginalName == Result)
											Found = M
									if(Found)
										var/list/races = new()
										races += "Lizardmen"
										races += "Illithids"
										races += "Cancel"
										var/R = input("Choose a Race to give.", "Choose", null) in races
										if(R == "Cancel")
											return
										if(R == "Illithids")
											IllithidList += Found.key
											src.icon_state = "max stats off"
											usr.Log_admin("([usr.key])[usr] gives [Found] the ability to create Illithids.")
											usr << "<font color = teal>([Found.key])[Found] was added to the list of keys allowed to create Illithids. This will not save and only be available until a reboot.<br>"
											Found << "<font color = teal><b>([usr.key])[usr] gave you the ability to create Illithids. This will not save and only be available until a reboot.<br>"
										if(R == "Lizardmen")
											LizardmanList += Found.key
											src.icon_state = "max stats off"
											usr.Log_admin("([usr.key])[usr] gives [Found] the ability to create Lizardmen.")
											usr << "<font color = teal>([Found.key])[Found] was added to the list of keys allowed to create Lizardmen. This will not save and only be available until a reboot.<br>"
											Found << "<font color = teal><b>([usr.key])[usr] gave you the ability to create Lizardmen. This will not save and only be available until a reboot.<br>"
						if(Rewarded == "Reward Language")
							var/list/menu = new()
							var/Mobs = list()
							for(var/mob/M in world)
								if(M.client)
									menu += "[M.name]"
									if(M.OrginalName)
										menu += "[M.OrginalName]"
									Mobs += M
							menu += "Cancel"
							var/Result = input("Who do you wish to Reward with a Language?", "Choose", null) in menu
							if (Result == "Cancel")
								src.icon_state = "max stats off"
								return
							if(Result)
								var/mob/Found = null
								for(var/mob/M in Mobs)
									if(M.name == Result)
										Found = M
									if(M.OrginalName == Result)
										Found = M
								if(Found)
									var/Langs = list()
									Langs += typesof(/obj/Misc/Languages/)
									var/list/menu2 = new()
									for(var/O in Langs)
										menu2 += O
									menu2 += "Cancel"
									var/Result2 = input("Choose a Language to Give", "Choose", null) in menu2
									if(Result2 == "Cancel")
										return
									if(Result2)
										var/obj/I = new Result2()
										if(Found.LangKnow == null)
											Found.LangKnow = list()
										for(var/obj/L in Found.LangKnow)
											if(I.type == L.type)
												del(L)
												break
										I.SpeakPercent = 100
										I.WritePercent = 100
										Found.LangKnow += I
										Found.CurrentLanguage = I
										Found << "<font color = purple>[usr] gave you the [I] language!<br>"
										usr.Log_admin("([usr.key])[usr] gives [Found] the [I] language.")
										src.icon_state = "max stats off"
										return
						if(Rewarded == "Reward Rank")
							if(usr.Admin >= 1)
								var/list/menu = new()
								menu += "BlackSmith"
								menu += "King/Queen"
								menu += "Weapon Master"
								menu += "Diplomat"
								menu += "Human Empire Priest"
								menu += "Cancel"
								var/Result = input("Choose a Rank to give.", "Choose", null) in menu
								if(Result)
									var/list/menu2 = new()
									var/Mobs = list()
									for(var/mob/M in world)
										menu2 += "[M.name]"
										if(M.OrginalName)
											menu2 += "[M.OrginalName]"
										Mobs += M
									menu2 += "Cancel"
									var/Result2 = input("Who do you wish to Rank as [Result]?", "Choose", null) in menu2
									if (Result2 == "Cancel")
										src.icon_state = "max stats off"
										return
									if(Result2)
										var/mob/Found = null
										for(var/mob/M in Mobs)
											if(M.name == Result2)
												Found = M
											if(M.OrginalName == Result2)
												Found = M
										if(Found)
											Found.GiveRank(Result)
											src.icon_state = "max stats off"
											usr.Log_admin("([usr.key])[usr] gives [Found] the [Result] Rank.")
									if(Result2 == "Cancel")
										src.icon_state = "max stats off"
										return
						if(Rewarded == "Reward Stats")
							switch(alert("Manually Reward Players or Auto-Reward?",,"Manual","Auto"))
								if("Auto")
									for(var/mob/M in Players)
										if(M.RPpoints >= 1)
											while(M.RPpoints >= 1)
												M.RPpoints -= 1
												M.Strength += M.StrengthMulti
												M.WeightMax += 1
												if(M.Strength >= M.StrengthMax)
													M.Strength = M.StrengthMax
												M.Endurance += M.EnduranceMulti
												if(M.Endurance >= M.EnduranceMax)
													M.Endurance = M.EnduranceMax
												M.Agility += M.AgilityMulti
												if(M.Agility >= M.AgilityMax)
													M.Agility = M.AgilityMax
												M.Intelligence += M.IntelligenceMulti
												if(M.Intelligence >= M.IntelligenceMax)
													M.Intelligence = M.IntelligenceMax
									usr << "<font color = teal>Stats have been rewarded based on RP Points.<br>"
									return
								if("Manual")
									var/list/menu = new()
									var/Mobs = list()
									for(var/mob/M in Players)
										menu += "[M.name]"
										if(M.OrginalName)
											menu += "[M.OrginalName]"
										Mobs += M
									menu += "Cancel"
									var/Result = input("Who do you wish to Reward?", "Choose", null) in menu
									if (Result == "Cancel")
										src.icon_state = "max stats off"
										return
									if(Result)
										var/mob/Found = null
										for(var/mob/M in Mobs)
											if(M.name == Result)
												Found = M
											if(M.OrginalName == Result)
												Found = M
										if(Found)
											usr << "<font color = teal>[Found] has [Found.Strength] Strength<br>"
											usr << "<font color = teal>[Found] has [Found.Endurance] Endurance<br>"
											usr << "<font color = teal>[Found] has [Found.Agility] Agility<br>"
											usr << "<font color = teal>[Found] has [Found.Intelligence] Intelligence<br>"
											usr << "<font color = teal>[Found] has [Found.RPpoints] RP Points<br>"
											var/S = input("Enter the ammount of Strength you want to reward [Found], this number will be times by their Strength Mod then added.")as null|num
											if(S)
												Found.Strength += Found.StrengthMulti * S
												Found.WeightMax += S * 2
												Found.RPpoints -= S / 4
												if(Found.Strength >= Found.StrengthMax)
													Found.Strength = Found.StrengthMax
											var/E = input("Enter the ammount of Endurance you want to reward [Found], this number will be times by their Endurance Mod then added.")as null|num
											if(E)
												Found.Endurance += Found.EnduranceMulti * E
												Found.RPpoints -= S / 4
												if(Found.Endurance >= Found.EnduranceMax)
													Found.Endurance = Found.EnduranceMax
											var/A = input("Enter the ammount of Agility you want to reward [Found], this number will be times by their Agility Mod then added.")as null|num
											if(A)
												Found.Agility += Found.AgilityMulti * A
												Found.RPpoints -= S / 4
												if(Found.Agility >= Found.AgilityMax)
													Found.Agility = Found.AgilityMax
											var/I = input("Enter the ammount of Intelligence you want to reward [Found], this number will be times by their Intelligence Mod then added.")as null|num
											if(I)
												Found.Intelligence += Found.IntelligenceMulti * I
												Found.RPpoints -= S / 4
												if(Found.Intelligence >= Found.IntelligenceMax)
													Found.Intelligence = Found.IntelligenceMax
											if(S)
												Found.StrCap += Found.StrengthMulti * S
											if(E)
												Found.EndCap += Found.EnduranceMulti * E
											if(A)
												Found.AgilCap += Found.AgilityMulti * A
											if(I)
												Found.IntCap += Found.IntelligenceMulti * I
											if(Found.RPpoints <= 0)
												Found.RPpoints = 0
											usr.Log_admin("([usr.key])[usr] Rewards ([Found.key])[Found] with [S] Strength, [E] Endurance, [I] Intelligence and [A] Agility")
					else
						usr << "<font color = teal>Your Admin Level is not High enough.<br>"
						return
			AdminHeal
				icon_state = "heal off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						src.icon_state = "heal on"
						switch(alert("Revive a Player? Or Heal a Player?",,"Revive","Heal"))
							if("Heal")
								var/list/menu = new()
								var/Mobs = list()
								for(var/mob/M in world)
									menu += "[M.name]"
									if(M.OrginalName)
										menu += "[M.OrginalName]"
									Mobs += M
								menu += "Cancel"
								var/Result = input("Who do you wish to Heal?", "Choose", null) in menu
								if (Result == "Cancel")
									src.icon_state = "heal off"
									return
								if(Result)
									var/mob/Found = null
									for(var/mob/M in Mobs)
										if(M.name == Result)
											Found = M
										if(M.OrginalName == Result)
											Found = M
									if(Found)
										src.icon_state = "heal off"
										Found.Heal()
										Found << "<font color = blue>[usr] Heals you!<br>"
										usr << "<font color = blue>You Heal [Found]!<br>"
										usr.Log_admin("([usr.key])[usr] heals [Found]")
										return
							if("Revive")
								var/list/menu = new()
								var/Mobs = list()
								for(var/mob/M in Players)
									if(M.Dead && M.client)
										menu += "[M.name]"
										if(M.OrginalName)
											menu += "[M.OrginalName]"
										Mobs += M
								menu += "Cancel"
								var/Result = input("Who do you wish to Revive?", "Choose", null) in menu
								if (Result == "Cancel")
									src.icon_state = "heal off"
									return
								if(Result)
									var/mob/Found = null
									for(var/mob/M in Mobs)
										if(M.name == Result)
											Found = M
										if(M.OrginalName == Result)
											Found = M
									if(Found)
										var/Bod = 0
										for(var/obj/Items/Body/B in world)
											if(B.Owner == Found.name)
												Found.GoodRevive(B)
												Found << "<font color = blue>A mysterious force fills your dead body, as it does you begin to feel life flow through your veins once more, it seems the gods have blessed you with new life!<br>"
												usr << "<font color = blue>You Revived [Found]!<br>"
												usr.Log_admin("([usr.key])[usr] revive [Found]")
												Bod = 1
												del(B)
										if(Bod == 0)
											usr << "<font color = red>[Found] has no Body to Revive!<br>"
											switch(alert("Make a new body for [Found]?",,"Yes","No"))
												if("Yes")
													var/obj/Items/Body/B = new
													B.loc = usr.loc
													B.icon = Found.DeadIcon
													B.Owner = Found.name
													Found.GoodRevive(B)
											usr.Log_admin("([usr.key])[usr] tried to revive [Found]")
										src.icon_state = "heal off"
										return
			AdminGiveAdmin
				icon_state = "give admin off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin >= 3)
						src.icon_state = "give admin on"
						switch(alert("Give or Remove Admin?",,"Give","Remove"))
							if("Give")
								var/T = input("Type the key of the person you wish to give Admin to")as null|text
								if(!T)
									src.icon_state = "give admin off"
									return
								if(T in Admins)
									usr << "<font color = teal><b>They already have Admin!<br>"
									return
								for(var/mob/M in Players)
									if(T == M.key && M.client)
										var/N = input("Which Level should this Admin be? Level 1 are Basics, Level 3 are all Commands.")as null|num
										if(N >= 3)
											N = 3
										var/obj/Misc/Admins/Ad = new
										Ad.name = M.key
										Ad.Value = N
										Admins += Ad
										M.Admin = N
										var/obj/HUD/AdminButtons/AdminButton/Z = new
										M.client.screen += Z
										M << "<font color = teal><b><font size = 4>([usr.key])[usr] has given you Admin!<br>"
										usr << "<font color = teal>You gave [T] Admin level [N]<br>"
										var/admin_sav = "players/admins.sav"
										var/savefile/A = new(admin_sav)
										A["Admins"] << Admins
										src.icon_state = "give admin off"
										usr.Log_admin("([usr.key])[usr] gives ([M.key]) [M] Admin level [N]")
										return
								src.icon_state = "give admin off"
								return
							if("Remove")
								var/T = input("Type the key of the person you wish to remove Admin from")as null|text
								if(!T)
									src.icon_state = "give admin off"
									return
								if(T == "Ginseng")
									usr << "<font color = teal><b><font size = 4>You can -NOT- Remove the Owners Admin....<br>"
									for(var/mob/M in world)
										if(M.key == "Ginseng")
											M << "<font color = teal><b><font size = 6>[usr] Tried to Remove your Admin!<br>"
									return
								if(T == "Ginseng")
									usr << "<font color = teal><b><font size = 4>You can -NOT- Remove that Admins powers....<br>"
									for(var/mob/M in world)
										if(M.key == "Ginseng")
											M << "<font color = teal><b><font size = 6>[usr] Tried to Remove your Admin!<br>"
									return
								world << "<font color = teal><b><font size = 4>[T] was removed as an Admin!<br>"
								for(var/obj/Z in Admins)
									if(Z.name == T)
										del(Z)
								for(var/mob/M in Players)
									if(T == M.key && M.client)
										M.Admin = 0
										M.Save()
										usr.Log_admin("([usr.key])[usr] removes [M] as Admin")
										del(M)
										src.icon_state = "give admin off"
								src.icon_state = "give admin off"
								return
					else
						usr << "<font color = teal>Your Admin Level is not High enough.<br>"
						return
			AdminAnnounce
				icon_state = "announce off"
				Type = "AdminHuds"
				layer = 100
				Click()
					if(usr.Admin)
						switch(alert("Normal Announce, or Role Play Announce??",,"Normal","RolePlay"))
							if("RolePlay")
								var/T = input("Announce")as null|message
								if(!T)
									return
								world << "<font color = yellow><font size = 3><center>[T]"
								usr.Log_admin("([usr.key])[usr] role play announces [T]")
							if("Normal")
								var/T = input("Announce")as null|message
								if(!T)
									return
								world << "<font color = teal><font size = 3><center>.:([usr.key]) [usr] Announces:.<br> [T]"
								usr.Log_admin("([usr.key])[usr] announce [T]")
			AdminButton
				icon_state = "admin button off"
				Type = "AdminButton"
				screen_loc = "1,2"
				layer = 10
				Click()
					if(usr.Admin)
						if(usr.InvenUp)
							usr << "<b>Close your inventory first!<br>"
							return
						if(src.icon_state == "admin button off")
							usr.ResetButtons()
							if(usr.Function != "Burn")
								usr.Function = "AdminButton"
							src.icon_state = "admin button on"
							usr.CreateAdminMenu()
							return
						if(src.icon_state == "admin button on")
							usr.ResetButtons()
							if(usr.Function != "Burn")
								usr.Function = null
							src.icon_state = "admin button off"
							usr.Delete("AdminHuds","AdminHuds")
							return
		Buttons
			icon = 'HUD2.dmi'
			IllithidPowers
				name = "Powers"
				icon_state = "illithid powers"
				screen_loc = "15,2"
				layer = 10
				Click()
					if(usr.Dead)
						return
					if(usr.Fainted)
						return
					var/list/menu = new()
					menu += "Telepath"
					menu += "Locate"
					menu += "Observe"
					menu += "Mind Blast"
					menu += "Mind Probe"
					menu += "Cancel"
					var/Result = input("Choose a power to use.", "Choose", null) in menu
					if (Result == "Cancel")
						return
					if(Result == "Mind Blast")
						if(usr.CanUseMagic == 0)
							usr << "<font color = red>You must wait a while!<br>"
							return
						var/list/menu2 = new()
						for(var/mob/M in view(6,usr))
							if(M != usr)
								menu2 += M
						menu2 += "Cancel"
						var/Result2 = input("Choose someone you want to Mind Blast.", "Choose", null) in menu2
						if(Result2 == "Cancel")
							return
						if(Result2)
							if(usr.CanUseMagic == 0)
								usr << "<font color = red>You must wait a while!<br>"
								return
							var/mob/M = Result2
							if(M in view(6,usr))
								usr.CanUseMagic = 0
								spawn(200)
									if(usr)
										usr.CanUseMagic = 1
								var/EnterMind = 0
								EnterMind = prob(100 - M.Intelligence / 2)
								if(M.Fainted)
									EnterMind = 1
								if(M.Faction == "Undead")
									EnterMind = 0
								if(EnterMind == 0)
									usr << "<font color = red>[M] blocks you from entering their mind!<br>"
									M << "<font color = red>[usr] tried to enter your mind with their powers, but you resist!<br>"
									return
								if(EnterMind)
									usr << "<font color = red>You enter [M]'s Mind...<br>"
									M << "<font color = red>([usr.key])[usr] enters your mind!<br>"
									spawn(200)
										if(usr && M && M.Dead == 0 && usr.Dead == 0)
											if(M in range(6,usr))
												var/HurtMind = 0
												HurtMind = prob(100 - M.Intelligence / 2)
												if(HurtMind == 0)
													usr << "<font color = red>[M] blocks you from Blasting their mind!<br>"
													M << "<font color = red>([usr.key])[usr] tried to Blast your mind with their powers, but you resist!<br>"
													return
												if(HurtMind)
													usr << "<font color = red>You manage to Blast [M]'s Mind!<br>"
													M << "<font color = red>([usr.key])[usr] manages to Blast your mind!<br>"
													M.Pain += rand(10,20)
													M.Brain -= rand(3,6)
													M.Brain -= usr.Intelligence / 5
													M.CanMove = 0
													if(M.Fainted == 0)
														M.Stunned = 1
														M.Stun()
														view(6,M) << "<font color=red>[M] has been stunned!<br>"
													if(M.Target == null && M.client == null)
														M.Target = usr
													var/Critical = prob(5 + usr.Intelligence / 3)
													if(Critical)
														M.Brain -= rand(5,7)
														M.Brain -= usr.Intelligence / 10
														view(6,M) << "<font color = yellow>[M]'s head becomes ruptured!<br>"
														M.Blood -= rand(15,30)
														M.Bleed()
														M.Splat()
													if(M.Brain <= 1 && M.Humanoid)
														view(6,M) << "<font color = yellow>[M]'s Brain begins to leak through their nose! Slowly they drop down to the ground, dead.<br>"
														M.Brain = 0
														M.Death()
													return
					if(Result == "Mind Probe")
						if(usr.CanUseMagic == 0)
							usr << "<font color = red>You must wait a while!<br>"
							return
						var/list/menu2 = new()
						for(var/mob/M in view(6,usr))
							if(M != usr)
								menu2 += M
						menu2 += "Cancel"
						var/Result2 = input("Choose someone you want to Mind Probe.", "Choose", null) in menu2
						if(Result2 == "Cancel")
							return
						if(Result2)
							var/mob/M = Result2
							if(M in view(6,usr))
								usr.CanUseMagic = 0
								spawn(200)
									if(usr)
										usr.CanUseMagic = 1
								var/EnterMind = 0
								EnterMind = prob(100 - M.Intelligence)
								if(M.Fainted)
									EnterMind = 1
								if(M.Faction == "Undead")
									EnterMind = 0
								if(EnterMind == 0)
									usr << "<font color = red>[M] blocks you from entering their mind!<br>"
									M << "<font color = red>[usr] tried to enter your mind with their powers, but you resist!<br>"
									return
								if(EnterMind)
									usr << "<font color = red>You enter [M]'s Mind...<br>"
									M << "<font color = red>([usr.key])[usr] enters your mind!<br>"
									spawn(200)
										if(usr && M && M.Dead == 0 && usr.Dead == 0)
											if(M in range(6,usr))
												var/ProbeMind = 0
												ProbeMind = prob(100 - M.Intelligence)
												if(ProbeMind == 0)
													usr << "<font color = red>[M] blocks you from Probing their mind!<br>"
													M << "<font color = red>([usr.key])[usr] tried to Probe your mind with their powers, but you resist!<br>"
													return
												if(ProbeMind)
													usr << "<font color = red>You manage to Probe [M]'s Mind for information!<br>"
													M << "<font color = red>([usr.key])[usr] manages to Probe your mind for Information!<br>"
													if(usr.Intelligence <= usr.IntCap && usr.Intelligence <= WorldIntCap && usr.Intelligence <= usr.IntelligenceMax)
														usr.Intelligence += usr.IntelligenceMulti / 2
													var/LearnItems = prob(100 - M.Intelligence)
													if(LearnItems)
														usr << "<font color = teal>You learn what [M] is carrying....<p>"
														for(var/obj/Items/I in M)
															usr << "<font color = teal>[M] has [I] [I.suffix]<br>"
													var/LearnName = prob(100 - M.Intelligence)
													if(LearnName)
														usr << "<font color = teal>You learn [M.OrginalName][M]'s name.<br>"
													var/LearnGender = prob(100 - M.Intelligence)
													if(LearnGender)
														usr << "<font color = teal>You learn that [M] is a [M.Gender].<br>"
													var/LearnAge = prob(100 - M.Intelligence)
													if(LearnAge)
														usr << "<font color = teal>You learn that [M] is [M.Age] years old.<br>"
													var/LearnRace = prob(100 - M.Intelligence)
													if(LearnRace)
														usr << "<font color = teal>You learn that [M] is a [M.Race].<br>"
													return
					if(Result == "Observe")
						if(usr.client.eye != usr)
							usr.client.eye = usr
							return
						var/list/menu2 = new()
						var/Mobs = list()
						for(var/mob/M in world)
							menu2 += "[M.name]"
							if(M.OrginalName)
								menu2 += "[M.OrginalName]"
							Mobs += M
						menu2 += "Cancel"
						var/Result2 = input("Choose someone you want to Observe with your mind.", "Choose", null) in menu2
						if (Result2 == "Cancel")
							return
						if(Result2)
							var/mob/Found = null
							for(var/mob/M in Mobs)
								if(M.name == Result2)
									Found = M
								if(M.OrginalName == Result2)
									Found = M
							if(Found)
								if(src in usr.client.screen)
									usr.client:perspective = EYE_PERSPECTIVE
									usr.client:eye = Found
									usr << "<font color = teal>You use your mind powers to Observe [Found]!<br>"
									return
					if(Result == "Locate")
						var/list/menu2 = new()
						var/Mobs = list()
						for(var/mob/M in world)
							if(M.client)
								menu2 += "[M.name]"
								if(M.OrginalName)
									menu2 += "[M.OrginalName]"
								Mobs += M
						menu2 += "Cancel"
						var/Result2 = input("Choose someone you want to Locate.", "Choose", null) in menu2
						if (Result2 == "Cancel")
							return
						if(Result2)
							var/mob/Found = null
							for(var/mob/M in Mobs)
								if(M.name == Result2)
									Found = M
								if(M.OrginalName == Result2)
									Found = M
							if(Found)
								if(src in usr.client.screen)
									var/X = Found.x
									var/Y = Found.y
									var/Z = Found.z
									usr << "<font color = teal>You use your mind powers to locate [Found], they are at [X],[Y],[Z]<br>"
									return
					if(Result == "Telepath")
						if(usr.CurrentLanguage == null)
							usr << "<font color =red>Select a Language to speak first!<br>"
							return
						var/list/menu2 = new()
						var/Mobs = list()
						for(var/mob/M in world)
							if(M.client)
								menu2 += "[M.name]"
								if(M.OrginalName)
									menu2 += "[M.OrginalName]"
								Mobs += M
						menu2 += "Cancel"
						var/Result2 = input("Choose someone you want to Telepath.", "Choose", null) in menu2
						if (Result2 == "Cancel")
							return
						if(Result2)
							var/mob/Found = null
							for(var/mob/M in Mobs)
								if(M.name == Result2)
									Found = M
								if(M.OrginalName == Result2)
									Found = M
							if(Found)
								if(src in usr.client.screen)
									if(usr.Muted)
										usr << "<font color =red>You cant talk, your Muted!<br>"
										return
									var/T = input("Telepath - In Character")as null|text
									if(!T)
										return
									if(usr.invisibility && usr.Admin == 0)
										view(1,usr) << "<font color = teal>[usr] whispers:Wooooo....."
										return
									var/obj/SL = usr.CurrentLanguage
									var/NewText = null
									var/Text = null
									var/TextLength = lentext(T)
									var/Understands = 0
									if(usr.CurrentLanguage)
										for(var/obj/Misc/Languages/HL in Found.LangKnow)
											if(SL.name == HL.name)
												Understands = HL.SpeakPercent
												if(HL.SpeakPercent <= 100)
													var/NotSpeaker = 1
													if(HL in usr.LangKnow)
														NotSpeaker = 0
													if(NotSpeaker)
														if(SL.SpeakPercent >= HL.SpeakPercent && HL.SpeakPercent <= 97)
															HL.SpeakPercent += Found.Intelligence / 20
															if(Found.Intelligence <= Found.IntCap && Found.Intelligence <= WorldIntCap && Found.Intelligence <= Found.IntelligenceMax)
																Found.Intelligence += Found.IntelligenceMulti / 10
									if(Understands == 0)
										Found.LearnRaceLanguages("[usr.CurrentLanguage]")
									while(TextLength >= 1)
										Text ="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
										var/Change = 0
										Change = prob(100 - Understands)
										if(Change)
											Found.CheckText(Text)
											NewText+="[Found.TextOutput]"
											Found.TextOutput = null
										if(Change == 0)
											NewText+="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
										TextLength--
									Found << "<font color=red>You hear [usr]'s voice in your head (In [SL.name]): [Safe_Guard(NewText)]<br>"
									usr << "<font color=red>[Found] hears your voice (In [SL.name]): [Safe_Guard(NewText)]<br>"
									usr.Log_player("([usr.key])[usr] Telepath to [Found] - [T]")
						return
			GameInfo
				name = "GameInfo-(G)"
				icon_state = "help"
				Type = "Help"
				screen_loc = "15,1"
				layer = 10
				Click()
					var/list/menu = new()
					menu += "Ranks"
					menu += "Story"
					menu += "Help"
					menu += "Updates"
					menu += "Toggle OOC"
					menu += "Toggle Sparring"
					menu += "Initiate CountDown"
					menu += "Music Off"
					menu += "Change Language"
					menu += "Players Online"
					menu += "Report Bug"
					menu += "Report Player"
					menu += "Admin Help"
					menu += "Admin Rules"
					menu += "Rules"
					var/obj/O = new
					var/Loc = usr.loc
					var/Z = 0
					if(usr.z == 1)
						O.loc = locate(usr.x,usr.y,2)
						Z = 2
					if(usr.z == 3)
						O.loc = locate(usr.x,usr.y,1)
						Z = 1
					for(var/obj/Misc/Hole/H in range(0,O))
						menu += "Climb Up"
					del(O)
					menu += "Cancel"
					var/Result = input("Choose an option.", "Choose", null) in menu
					if (Result == "Cancel")
						return
					if(Result == "Climb Up")
						if(usr.loc == Loc)
							if(usr.Fainted)
								return
							if(usr.Stunned)
								return
							if(usr.Sleeping)
								return
							if(usr.CantDoTask)
								usr << "<font color = red>Must wait a little while before trying to climb out again!<br>"
								return
							var/Climbs = prob(10 + usr.Agility / 2)
							if(Climbs)
								view(6,usr) << "<font color = yellow>[usr] manages to climb up and out of the Hole above!<br>"
								usr.loc = locate(usr.x,usr.y,Z)
								oview(6,usr) << "<font color = yellow>[usr] manages to climb up and out of the Hole!<br>"
								usr.CantDoTask = 1
								spawn(200)
									if(usr)
										usr.CantDoTask = 0
								return
							else
								view(6,usr) << "<font color = yellow>[usr] tries to climb up and out of the Hole above but fails!<br>"
								usr.CantDoTask = 1
								spawn(200)
									if(usr)
										usr.CantDoTask = 0
								return
					if(Result == "Rules")
						usr<<browse(Rules,"window=Rules")
						return
					if(Result == "Initiate CountDown")
						view(8,usr) << "<font color = teal>([usr.OrginalName])[usr] is Waiting 1 Minute.<br>"
						usr.Log_player("([usr.key])[usr] Initiated a CountDown.")
						spawn(600)
							if(usr)
								view(8,usr) << "<font color = teal>([usr.OrginalName])[usr] has Waited 1 Minute.<br>"
								usr.Log_player("([usr.key])[usr] has waited for the CountDown.")
					if(Result == "Toggle Sparring")
						if(usr.SparMode == 0)
							usr.SparMode = 1
							usr << "<font color = teal><b>You will now only do 1/4 the damage you normally would against players! This does not work for Ranged Weapons.<br>"
							return
						if(usr.SparMode)
							usr.SparMode = 0
							usr << "<font color = teal><b>You will now do full damage to players!<br>"
							return
					if(Result == "Report Player")
						if(usr.Muted)
							usr << "You are Mute and can not do that!<br>"
							return
						var/T = input("Please input the Players Name and Key, what happened, and as much detail as possible. Do not use this for anything but reporting Players or you will be punished.")as null|message
						if(!T)
							return
						if(T)
							usr.Log_reports("([usr.key])[usr] - [usr.OrginalName] used Report Player - [T]<p>")
							usr << "<font color = teal>Player reported!<br>"
							for(var/mob/M in Players)
								if(M.Admin)
									M << "([usr.key])[usr] - [usr.OrginalName] used Report Player - [T]<p>"
							return
					if(Result == "Report Bug")
						if(usr.Muted)
							usr << "You are Mute and can not do that!<br>"
							return
						var/T = input("Please be very detailed with the Bugs you find. Do NOT use this to spam or get the Admins attention, or you will be punished. This is for Bugs only.")as null|message
						if(!T)
							return
						if(T)
							usr.Log_reports("([usr.key])[usr] - [usr.OrginalName] used Report Bug - [T]<p>")
							usr << "<font color = teal>Bug reported!<br>"
							return
					if(Result == "Admin Help")
						if(usr.Muted)
							usr << "You are Mute and can not do that!<br>"
							return
						var/T = input("Type a message to the Admins, please remember that if you Spam this Feature you will be punished.")as null|message
						if(!T)
							return
						var/FindsAdmin = 0
						for(var/mob/M in Players)
							if(M.Admin)
								FindsAdmin = 1
								M << "<b><font color = teal>([usr.key])[usr] - [usr.OrginalName]: [T]<br>"
						if(FindsAdmin)
							usr << "<font color = teal>Your message has been broadcast to the Admins!<br>"
							usr.Log_player("([usr.key])[usr] - [usr.OrginalName] used Admin Help - [T]")
							return
						else
							usr.Log_player("([usr.key])[usr] - [usr.OrginalName] used Admin Help but no Admins were online. - [T]")
							usr << "<font color = teal>There are currently no Admins online right now!<br>"
							return
					if(Result == "Music Off")
						usr << sound(null)
						usr << "Music is now off, relog if you want it back on again.<br>"
						return
					if(Result == "Updates")
						var/html_doc="<head><title>Updates</title></head><body bgcolor=#000000 text=#FFFF00><center><b><font color = teal><p><u>Version 0.596 Updates</u><br><p>Fixed a bug where several items could not be pulled or transfered into containers.<p>You can now interact with and apologize to NPC who are in your faction, this will stop them attacking you if you've done something bad, although you must pay a fee of 10 Gold.<p>Tweaked the Illithids TK damage, since its easy to max their Intelligence out and before you could do 26 damage per hit, lowered it to 16 at 80 Intelligence.<p>Fixed a bug where you could drown from not being in water after using stairs.<p><u>Version 0.595 Updates</u><br><p>Fixed a bug with repairing items.<p>NPC Guards will now recognise players who attack same faction NPC, so if you attack a Human Villager as a Human then run away, any guards who see you do this will always attack you on sight, unless you wear a cloak.<p>You can now only be Kicked if you walk near a body of one of your previous characters and you have Pickup or Pull modes activated.<p>Tweaked the starting stats for all races based on exact stat mods and fixed a small bug with Giants Strength mod and Snakeman having a Giants Strength mod.<p>Fixed a bug with the new death system where after making a new char and getting killed then remaking, you could add around +5 to your stats each time, resulting in new chars with more than 5, 10 and even 15+ stats.<p>Fixed a bug where NPC would target you even when your on another z level.<p><u>Version 0.594 Updates</u><br><p>30 second timer on the count down was changed to one minute.<p>Inquisitor now have half as much armour as before, in terms of defence and 10 less Agility than before.<p><b><font color = teal><p><u>Version 0.593 Updates</u><br><p>Anyone who attacks the Inquis Vault doors near an Inquis will get attacked.<p><u>Version 0.592 Updates</u><br><p>Inquis weapons do extra to undead now.<p>May have fixed a bug with being propelled back and slamming into a mob. The mob would get stuck and not be able to move.<p>Changed how potential on an item used for crafting works. Now it will take the Potential number and divide it by 40. Depending on your skill, it will remove 5 from 40 and so on each major skill level. So by about Epic, it becomes 20 and by Legendary, 18. The number left once devided will be added to the damage/defence of the item.<p>Fixed an issue with some mountains not having a second floor and being sky.<p><u>Version 0.591 Updates</u><br><p>Added Gold and Copper doors.<p>Doors were being damaged too easily, tweaked the code a litte.<p>Doors can now be knocked on.<p>The smithing rank now gives a +0.1 to Forging, Smelting and Mining skill mods.<p>Player logs will now display if a player destroys a door/chest/lock or creates a fire near wooden walls or floors.<p>Fixed a bug where stairs built under a hole were never turning the hole into stairs, allowing people to fill the hole in for a secret exit.<p>Version 0.59 Updates</u><br><p>Being stunned no longer allows you to attack.<p>Torches burn out slower than before.<p>Stairs can be built over Holes by Interacting with a Large Brick then the Hole. They can also be destroyed the same way as doors.<p>Player created turf now have a key attached to them so Admins can track those who abuse building.<p>If you fall down a Hole you can now use the ? Button to try and Climb Out, but its a low chance.<p>The chance to swim up was made easier. Instead of taking both the players weight and what they wear, it'll just take what they are carrying instead.<p>Players can now dual wield daggers and swords. Also, using the new hand buttons, you can switch between left and right hands for all weapons. Players could now use their left arm for things if their right is broken.<p>Fixed a bug where Keys would delete.<p>Ratlings now have claws.<p>Illithids Mind Blast was made easier to enter someones mind with slightly.<p>Fixed a bug with doors opening inside a players inventory.<p>Fixed a bug where Skulls from undead could not be used to craft with.<p>Ratling Kings/Queens get Plate armor now and Smiths can create it.<p>Holes can be dug now by using Interact on a shovel or being a Ratling. Double Clicking on turf begins the digging. They can also be filled or climbed down carefully by Interaction.<p>Mining skill goes up slower now because people were having 200+ easily.<p>Giant and Cyclops Kings/Queens/Smiths can now get Plate armor.<p>Ratling no longer start with bone armor but know how to make it instead.<p>Map now saves every year instead of every 6 months.<p>Copper long sword icon was fixed.<p>King rank now gives Defence 10 Plate/Chain, depending on race.<p>Stat gains were way too high, made them adjust better to a players stats, it gets harder to raise as they rise now.<p>Can now repair items with lower than 33 dura instead of lower than 1.<p>Fixed a bug where some Armor could not be repaired.<p>Lowered Kings/Queens weapons from 20 damage to 15.<p>If your unarmed skill is higher than 20, you wont take hand damage when fighting, unless hitting someone in plate/chain/<p>Ammount of Max Weight gained when strength rises was lowered a little.<p>Version 0.58 Updates</u><br><p>Can gain stats from swimming now.<p>Training dummies give a little more weapon skill than before each hit and are twice as endurant than before, but can be improved by repairing.<p>Wolfmen can no longer where shoulder armor. Felt they were already powerful enough.<p>Sligthly Bigger map.<p>Illithid Int Cap is now 80 instead of 100 and Alther Int cap is now 70 instead of 75. Illithid Agility cap is now 40 instead of 60.<p>Tweaked Illithid TK damage a little. Before armor would not give the full defence when being slammed against objects.<p>Version 0.573 Updates</u><br><p>Fixed a bug where Legendary items could not be crafted.<p>Fixed Human hair growth and overlay bugs.<p>Added yearly random events.<p>Illithid mind blast and mind probe are sligthly faster with a shorter cool down.<p>Iron gates can now be crafted.<p>All crafting skills and jobs take twice as less time to do and have had their mininum time lowered.<p>Fixed a bug where anything could be used to skin or butcher.<p>Silver weapons now do extra damage to Undead.<p>NPC Guard now respawn every month.<p>Fixed a bug where players could not learn Ancient.<p>Removed one group of Inquisitors because the maps too small for two groups and players keep getting killed constantly by them.<p>Bandits can roam free now.<p>Small stone bricks now give shards instead of the larger ones.<p>Added Inquisitor inside the Vault.<p>Added an Extra Door to the Inquisitor Vault.<p>Made the Inquisitor Vault Walls Impossible to break due to people Abusing.<p>Fixed a bug where if you had a smithing rank, you could examine weapons that you already knew how to create.<p>Version 0.57 Updates</u><br><p>Fixed a bug with Weapons where if you Examine an iron weapon, you would'nt get the other material types added to your craft list.<p>Added bone crafting.<p>Inventory will now close when a crafting menu opens.<p>Wolfmen can now Skin and Butcher with their claws.<p>Added Silver weapons.<p>Fixed a bug where NPC would smash you on the head and knock you out, even if you had a helmet on.<p>Intelligence is halved now when you get infected and turn into a zombie.<p>Infect chance for zombies is 1% again.<p>Illthid doors can now be attacked.<p>Illthids can no longer use TK + Observe on people.<p>Made NPC guard stronger.<p>Removed the stat boost for newly made players based on old players stats.<p>Fixed an overlay bug regarding Hair and Crowns.<p>Version 0.56 Updates</u><br><p>Wolfmen no longer get their Claws Damage Boost if holding a shield in combat.<p>You can now attack and destroy any walls or floors.<p>Doors are now half as durable as before by default.<p>Town walls can no longer be seen through.<p>Extended the Wolfmans field of vision while in the dark by one tile.<p>Added an Altherian Priest to help Altherian players.<p>Admin reward now takes the number entered by the Admin and Times it by the player race Multi in that stat Area. So for a Alther with an Agility Mod of 0.2, they would get Num X 0.2 added to their stats.<p>Very very sligthly lowered the chance to die depending on Blood loss.<p>Being stunned now sometimes lasts twice as long as before.<p>Zombies now have a 2% chance to infect instead of 1%.<p>NPC will now re-populate the world every two months instead of three.<p>Fixed an icon problem with Stahlites gloves.<p>Zombie NPC and players will no longer rise up from the dead if their brain is damaged badly.<p>Zombie NPC and Players now have a 10% chance per hit to die if they have no limbs.<p>Version 0.55 Updates</u><br><p>The count down on RP's was made seperate from the Emote button.<p>Leather hides can no longer get over 100 Craft Potential.<p>Trees now fall left and right. If they land on the tile your in they will take into account your Wood Cutting Skill, which helps you judge where it'll fall giving a lower chance of being hit.<p>Fixed a bug where if the server rebooted and there was a lit forge, that forge would stay lit forever.<p>Wolves can wear plate pauldrons again.<p>Wolves can no longer use Human style plate helmets. Instead they get their own kind, made by ranked smiths.<p>Wolves can use leather gloves again now, but not plate.<p>Made the new stat system for newly made late joiners divide the best stats by 5 instead of 3.<p>World will now only re-populate withy NPC's every Three months, instead of each month.<p>Wounds now heal twice as quickly as before.<p>Frogmen now have a 1% chance every 2.5 seconds to regenerate a lost limb.<p>Frogmen now get a bonus to swimming skill upon creation.<p>Frogmen no longer drown in water, ever.<p>Frogmen can move faster in water now.<p>Fixed a bug with leather hides not drying out correctly.<p>Fixed a bug where it was impossible to gain Max Weight through non-combat related skills.<p>You can now Examine people for information.<p>Made the System where you gain a portion of the strongest player onlines stats when making a new char differant. Instead it will take the stats of all players online, then add them together and devide by the players, getting the average stats, then dividing by four. It wont do this if theres less than 3 players.<p>Added swimming. You move faster in water depending on your swimming skill and strength. Wearing or Carrying anything increases your chances to sink as well as decreasing your chances to swim up from the water. There is also a Delay on how often you can swim up from underwater now. You can hold your breathe for two minutes, after which you die.<p>You can now wear leggings even if you've a leg missing.<p>Fixed a bug where people could attack a door and force the delay to non-exsistant, resulting in a destroyed door in 1/100 the normal time.<p>Wolfmen and Wolfwomen can no longer wear plate armour on their chest or hands, since this would distrupt their natural movements to the extent of damage to their bodies and realisticly, would cause possible death.<p>Fixed a bug with Stahlites icons.<p>Major Organs now Heal, but slower than other lesser ones.<p>Removed the Lich Npc, can only become un-dead through the Necro book or infection.<p>The game will now track the people with the Highest stats and save that number. When anyone makes a new char, they get that number divided by 3 added to their stats. This is to help lessen the impact upon players when they die after grinding for hours and get killed by a rabid chicken.<p>Moved the Inquisitor tower closer to the Human towns since it made no sense it was miles away. Also added a Vault inside.<p>Limbs and damaged Organs no longer magically heal after a year.<p>Fixed a bug where Transfering an Item would constantly shut your Inventory off each time.<p>You can now Forge Locks and Keys. When you Examine a door, Locks and Keys should be added to your Craft List.<p>You can Damage Doors and Chests using Combat Mode and repair them using certain tools.<p>You can now place Locks into Doors and Chests using Interact.<p>Iron doors can now be crafted.<p>Made it so when one of your legs health drops below 50 you move slower.<p>Made it so when you Target an NPC of your own Race, any other NPC who are friendly to the one you targetted attack you also.<p>There is now a chance to get extra Large and Small Bricks when smashing them with a hammer based on your Masonary Skills.<p>The max ammount of time to build something was lowered from 50 seconds to 30 seconds. This makes building walls and floors quicker but still based on skill as always.<p>There is now a chance based on your Wood Cutting skill to gain an extra Log when chopping a felled tree.<p>Pulling things now makes you slower.<p>Made Stat Gains from crafting slightly higher.<p>Wearing Armour now effects Dodge, Block and Parry when fighting, based on your Strength and Weight of Armour you wear.<p>Wearing Armour will now slow your attacking speed down.<p>There is now a chance based on your wood cutting skill to get extra Blocks or Blanks.<p>Code will now devide your MaxWeight by 1.1 and 1.2 when moving or attacking. If your current Weight is over that number you will Attack and Move slower.<p>There is now stat caps on Races. It starts at 50 for Humans and varies from Race to Race.<p>Lowered default stat gain chance from 33% to 22% per sucessful hit due to a change in stat codes.<p>When you Examine Metal objects, you can now craft them in all Materials, and not just the Material that the object you Examined was made from.<p>Added a Priest Rank.<p>All Humanoid NPC should now act correctly when they turn into a zombie.<p>All Humanoid NPC should now be able to be either infected, or revived, as Zombies.<p>Added a Female Stahlite icon, with hair.<p>Version 0.54 Updates</u><br><p>Added the ability to Mate, simply Click Interact, then click another player. Frogmen and Snakemen lay eggs. The child has a 50/50 chance of either being a player or NPC. If player, the next person to make a new character and pick the same race as the mother, is born to her. If NPC, the mother will give birth, and an NPC child will be created. Later on, if one of the parents die, they will become the child. Both NPC and Player get 1/8 stats from each parent.<p>Fixed the no Dura on Leather items bug.<p>Reverted the map back to the old Version, because its easier to find people and Role Play.<p>Bone armour now has a defence similar to Chain, instead of Leather.<p>Fixed a bug where getting knocked back, slamming into something, and dropping your weapon or shield made them bugged.<p>Fixed a bug that stopped Claws from growing back or healing.<p>Version 0.531 Updates</u><br><p>Was forced to remove the EXP Feature, due to it creating a massive bug.<p>Version 0.53 Updates</u><br><p>Added Bandit Raiders who travel in groups.<p>Fixed a bug where Ranged Combat Skill was not teaching correctly to a Learner when they Dodge,Bat away, Block, or get hit by an Arrow..<p>-May- have fixed a bug with Map Saving, will require alot of testing.<p>Fixed a bug where Large Brick Walls were not showing up in the Build Menu for Construction.<p>Players can now Push other Players who have targetted them, where as before, pushing someone who had targetted you did not work.<p>Players will now gain EXP when they Gain Weapon Skill or Stats, this EXP will then Save when they log out. When the Player dies and makes a new Character, the EXP from the previous Character carries over and adds a small Bonus to the New Characters Stats and Weapon Skills. This was added to lessen the impact of Perm Death. EXP will not go any higher than 100, when a New Character is made, they get EXP devided by 4.5 added to their stats, which is +22 for someone at 100 stats.<p>Version 0.52 Updates</u><br><p>Fixed a bug where Forging would break at 90 skill.<p>Fixed a bug where NPC were talking to players...<p>Mined out tiles that players have created will no longer spawn with hundreds of Rocks scattered about.<p>Hopefully, Plants, Rocks, and other un-wanted objects will now Delete when someone builds a wall/floor over them.<p>Gain chance on Shield Skill was changed to 50% from 33% per successful Block.<p>Base Fail chance on Crafting was lowered to 50% from 60%.<p>Purity of Ores renamed to Craft Potential.<p>Leather now has Craft Potential, like Ore, but depends on the players Skinning Skill.<p>Skin from creatures will now Dry out after a few minutes.<p>Anything with no Blood no longer leaves a blood trail when knocked back.<p>Version 0.51 Updates</u><br><p>Clicking Examine now displays your Cords, this is a Temp feature until I code in a more RP way of locating your position.<p>Added Gold Armour.<p>Months now go slightly faster.<p>Goblins now randomly spawn on the map in groups.<p>Gold and Silver Veins are alot more Rare now.<p>Re-added the dreaded Inquisitors.<p>Skill/Stat Caps now raise when your offline.<p>There is now a universal skill/stat cap that rises each Month.<p>Auto Heals now happen every Month instead of Year.<p>Made the Multi Cap increase by 3 every Month, instead of 10 every Year.<p>Made NPC re-spawn every Month instead of Year.<p>Version 0.50 Updates</u><br><p>May have fixed the Eternal Forge Lit bug.<p>Removed the Heir Rank and added Weapon Master and Diplomat Ranks.<p>All Tools now have a Weight, so they dont attack really fast.<p>Most NPC who dont have a home, such as a Cave or Tomb will now randomly spawn accross the Map every in game Year, this is to avoid them spawning on Player Made houses.<p>Fighting someone with higher Skill now has a 15% chance for you to gain in the Skill Area of the Weapon they use, as long as your Skill is not already higher than theirs. For instance, you wont gain anything from someone if your Skill in Swords is 30 and theirs 50, this is because it Halves their Skill, only allowing you to gain up to 25 of their Skill. This allows you to slowly learn from someone else and their combat Skills, opening up a Teacher-Learner Role Play and at the same time, wont allow you to constantly Gain Skill points from each other Infinitely.<p>Admin Logs will now display Edits, to help prevent abuse.<p>The Map will now save every Six(6) in game Months, instead of Twelve(12).<p>Months and Years now pass Three times as Slower.<p>Day and Night Cycles are now seperate from Months and Years.<p>Crafted items will now display when they were created, their quality, and other information when examined.<p>Fixed a bug with Lit Torches never burning out and giving the player 5 luminosity while not using one.<p>Skeletons die for good when their skulls are smashed during combat.<p>There is now a 15% chance that a sucessful attack to the skull will instantly KO someone. There is also a 33% chance that if your Brain is hurt, you also get instantly KO'ed<p>There is now a chance, based on your strength, that you will knock someone flying back.<p>Stat gain default chance was lowered to 33% from 50% per sucessful hit.<p>Fixed a bug where if your stats were too high, you would never gain, no matter what. Fixed it back to a 2% chance to gain if your stats are very high like it was before.<p>Meat, Limbs, Skulls and Bones now have a much shoter name than before.<p>Admin rewards now raise your stat Multi, where as before they would raise your stats past your multi and possibly bug them.<p>Skill caps will no longer update along with your age when you log in, this means if you dont play for a day, then log in, your skill caps wont go up. You will need to be present each in game year for them to rise now.<p>Fixed a bug where two players could cut down the same tree and get double resources from it.<p>Wolfmen NPC no longer attack Cloaked players.<p>Version 0.491 Updates</u><br><p>May have fixed a bug with Map Saving, but just in case, Maps are backed up every Three IC years.<p>Underground walls can now be dug into.<p>Fixed a bug where the contents of a container would never save.<p>Expanded the map a tiny bit.<p>Frogmen now have a Swamp area.<p>You can now Toggle a Spar mode, this will make you do 1/4 the damage to players. (Not NPC)<p>Fixed a bug related to Quivers, Arrows and Weight.<p>Added a Report Bug and Report Player Option on the Question mark button, if you abuse or spam these features, you will be punished.<p>Added an Admin Help option to the Question Mark button.<p>You can now open stat windows while fighting.<p>Common is now only given to Stahlites, Humans, Snakemen and Altherians.<p>You can now get to 97% instead of 95% with Languages.<p>Version 0.487 Updates</u><br><p>May have fixed the Language bug, needs testing with other players.<p>Due to popular demand, a Common language was added to all races.<p>Fixed a bug where 100 or higher crafting skill would bug up your item creation.<p>Crafts fail chance was lowered again. It was at 70%, it is now 60%, it will now stay at 60%.<p>Wolfmen, Giants and Cyclops Hunger will now go down twice as fast as before. Undead's Hunger will go down Three times as fast.<p>Made forging skill based on your Multi Cap, like with Melee skills and stats.<p>Made smelting skill based on your Multi Cap, like with Melee skills and stats.<p>Training dummies now have alot more dura, but will still need to be repaired. Repairing them makes them stronger than before, based on your Carpentry skills.<p>Butchery Skill Multi's were not active on players, you can now gain Butchery skill,<p>Added Snakemen guards to the Snakeman starting area.<p>Charcoal no longer has a Weight of 5, but 2 instead.<p>Tools placed on the map were given Weight, instead of before where they had 0 Weight and attacked really fast.<p>Added Shoulder Protection for Ratlings.<p>Shield users now have a chance to block arrows based on their Shield Skill and Agility.<p>Added guards to the Wolf Shaman's Cave.<p>Fixed a bug where the Lich NPC would never revive anyone.<p>Money now has no Weight.<p>Attack speed with Heavey weapons is now slower than before.<p>You can pull Arrows out by Interacting on them, depending where it was lodged depends on how much you will bleed.<p>Arrows have a chance to lodge into people when they hit, depending on their armour.<p>Arrows now have a chance to break on some Armours.<p>Worked on the Ranged combat a little, it will now work a lot more like Melee where the enemy can be stunned and faint.<p>Removed the Hell map to help reduce lag until it has a use.<p>Added more Masonary objects in for Masons.<p>Stat gains from Crafting/Building now work like those from fighting, they will increase at a chance based on your current stats.<p>You can now no longer sleep with a Weapon Equipped, Plate Armour, or a Shield Equipped.<p><u>Version 0.47 Updates</u><br><p>Made the language system work better and fixed a bug related to it.<p>You can now create some of the Stone items in game, including the Forge.<p>You can now forge an Anvil.<p>Added different Languages for different Races, the more you hear a Language, the better you become at speaking it, based off your Intelligence.<p>You can now place a lit torch in water to put it out.<p>Meat will now actually cook when you try to. Before it had a chance of the fire going out before finished.<p>You will now no longer have any chance of dieing if you get hungry or tired but you will still get ill.<p>Fixed a bug where you could not create training dummies or armour racks.<p>Stats and Combat skills now have a Cap on them, it starts at 11 and goes up by 10 every year, this means by the time your age 1 you can get your stats to 21, and by age 2, 31, ect ect.<p>Made it so you gain Agility and Endurance when doing crafting skills, where as before it was just strength, which messed up your overall gain chance later on if you decided to fight and become a warrior.<p>Slightly lowered the ammount of Endurance and Strength gained from being a Zombie.<p>Fixed a bug where blunt weapons were able to cut off a limb.<p>You will now only grow a beard if your older than 15.<p>Fixed a bug with the spiders not attacking.<p>Fixed a bug where if you logged out dead and then logged in again, and you were revived just as you go to click load or new game, you would be revived in your old body.<p>Players bodies will now not rot over time.<p>You can now light a forge using two stone shards.<p>Fixed a bug where certain NPC would never respawn.<p>Fixed a bug where targetting a player then killing them would still display the Target icon.<p>Made it so when you become a Zombie you loose your crafting memeory.<br>"
						usr<<browse(html_doc,"window=Updates")
					if(Result == "Admin Rules")
						var/html_doc="<head><title>Admin Rules</title></head><body bgcolor=#000000 text=#FFFF00><center>[AdminRules]"
						usr<<browse(html_doc,"window=Admin Rules")
						return
					if(Result == "Ranks")
						var/html_doc="<head><title>Ranks</title></head><body bgcolor=#000000 text=#FFFF00><center>[Ranks]"
						usr<<browse(html_doc,"window=Ranks")
						return
					if(Result == "Story")
						var/html_doc="<head><title>Story</title></head><body bgcolor=#000000 text=#FFFF00><center>[Story]"
						usr<<browse(html_doc,"window=Story")
						return
					if(Result == "Toggle OOC")
						usr.OOCToggle()
						return
					if(Result == "Players Online")
						usr.WhoProc()
						return
					if(Result == "Change Language")
						var/list/langmenu = new()
						for(var/obj/Misc/Languages/L in usr.LangKnow)
							langmenu += L
						langmenu += "Cancel"
						var/LangResult = input("What do you need Help on?", "Choose", null) in langmenu
						if(LangResult == "Cancel")
							return
						if(LangResult)
							var/obj/L = LangResult
							usr.CurrentLanguage = L
							usr << "<font color = green>You will now speak [L.name] - You are [L.SpeakPercent]% fluent in this language, and Write [L.WritePercent]% correctly in it.<br>"
					if(Result == "Help")
						var/list/helpmenu = new()
						helpmenu += "Mining"
						helpmenu += "Tree Chopping"
						helpmenu += "Pulling & Pushing"
						helpmenu += "Camp Site Contruction"
						helpmenu += "Pick Up & Dropping Items"
						helpmenu += "Combat"
						helpmenu += "Wounds"
						helpmenu += "Sleeping"
						helpmenu += "Eating"
						helpmenu += "Cooking"
						helpmenu += "Butchery"
						helpmenu += "Skinning"
						helpmenu += "Smelting"
						helpmenu += "Stone Work"
						helpmenu += "Forging"
						helpmenu += "Carpentry"
						helpmenu += "Repair"
						helpmenu += "Cancel"
						var/HelpResult = input("What do you need Help on?", "Choose", null) in helpmenu
						if (HelpResult == "Cancel")
							return
						if(HelpResult == "Mining")
							var/Mining = {"
								<style>
								body{background:#000000}
								</style>
								<font color = teal><font size = 3><u><b>.:Mining:.</u></b> <p>
								In order to Mine you will first need a Pick Axe.
								Once you have one, check its Dura to make sure its not broken.
								Now, walk up to a Solid Stone Wall and Equip your Pick Axe.
								Now all you simply do is Click the Interact button on your screen, then Click a Solid Wall.
								Once finished, a Large Boulder will fall away from the wall.
								In order to cancel Mining, simply Click the Combat button on your screen.
								If you keep Mining a wall, it will eventually turn into an Empty Cave Tile.<br>
								"}
							usr<<browse(Mining,"window=Help")
							return
						if(HelpResult == "Tree Chopping")
							usr << "<font color = teal><font size = 3><u><b>.:Tree Chopping:.</u></b> <p> <font color = teal>In order to Chop a Tree you will first need a Hatchet. Once you have one, check its Dura to make sure its not broken. Now, walk up to a Tree and Equip your Hatchet. Now all you simply do is Click the Interact button on your screen, then Click a Tree. Be careful not to stand to the Right or Left of the Tree, because it will fall and kill you. When you have finished Chopping the Tree you can Chop the fallen Tree into a Log, but only if the Tree was large, small Trees only give Branches. To chop the fallen Tree into a Log, Click Interact, with a Hatchet equipped, then Click the Fallen Tree, this will turn it into a Log. If you want to cancel a job at any time, click the Combat button. Now that you have a Log, you can repeat the Interact process using a Saw, and turn the Log into Wooden Planks, used in house or furniture building.<br>"
							var/Chopping = {"
								<style>
								body{background:#000000}
								</style>
								<font color = teal><font size = 3><u><b>.:Tree Chopping:.</u></b> <p>
								"}
							usr<<browse(Chopping,"window=Help")
							return
						if(HelpResult == "Pulling & Pushing")
							usr << "<font color = teal><font size = 3><u><b>.:Pulling & Pushing:.</u></b> <p> <font color = teal>Alot of Items can be Pulled. Some because they are too big to be carried in your Inventory. In order to pull an object, Click the Pull Button, then Simply Click an object to Pull. You can Click that object again in order to stop Pulling it. While the Pull button is active you can also Push players around if they have no current Target.<br>"
							return
						if(HelpResult == "Camp Site Contruction")
							usr << "<font color = teal><font size = 3><u><b>.:Camp Site Contruction:.</u></b> <p> <font color = teal> Camp sites are useful for cooking food with, but dont stand in them, or you may catch on fire and die. In order to create a Camp Site, you will need Three branches placed down on the ground near you. Once you have Three on the ground, Click the Interact button, then click any of the Three Branches. Remember to have all the Branches in the same tile, and if you need to cancel a Job, Click the Combat Button. There are two ways of lighting a Camp Site on fire. The first is to Mine out a Large Boulder from a Solid Wall, then use a Hammer on the Boulder to get Stone Shards. With Two stone shards in your inventory, Interact with one, then click the other, and this will create sparks and light the camp site. The second way is to get a Torch, Equip it, then Interact with a Wall Torch to light your Torch, then Interact with the Camp Site. Please remember that if you start to spread fire on purpose or have no Role Play Reason to do so, you will be Ban. Admins know when a player start a fire.<br>"
							return
						if(HelpResult == "Pick Up & Dropping Items")
							usr << "<font color = teal><font size = 3><u><b>.:Pick Up & Dropping Items:.</u></b> <p> <font color = teal> In order to pick an Item up, Click the Pick Up button, then click an Item that is near you. Remember that if you carry too much you wont be able to pick anything up. To Drop an Items, Click the Pick Up Button again, then Click an Item in your Inventory, this will Drop the item. Remember that the Pick Up Button Both Picks up & Drops Items.<br>"
							return
						if(HelpResult == "Combat")
							usr << "<font color = teal><font size = 3><u><b>.:Combat:.</u></b> <p> <font color = teal>In order to attack an enemy you need to Click the Combat Mode Button, then simply Click someone. This button also Cancels any Jobs that you may be doing. Please remember that this is a Role Play Game, Admins keep records of players actions, and Non-Role Play kills will result in a ban. Now that you have a target you can Click the Combat button again to loose that target. Combat starts off slow when you first start out, but as your Agility rises, the speed of your attacks become more requent. Also note that some objects in game can be attacked and broken, like Wooden Doors for instance.<br>"
							return
						if(HelpResult == "Wounds")
							usr << "<font color = teal><font size = 3><u><b>.:Wounds:.</u></b> <p> <font color = teal>When you deal damage to an enemy you will hurt certain body parts. You can check the status of your Wounds in the Health Information Button. All Limbs will slowly heal over time, and some organs such as Eyes will Heal up to a point. Sleeping will increase the speed at which you Heal. The best way to Heal a Wound is to use a bandage.<br>"
							return
						if(HelpResult == "Sleeping")
							usr << "<font color = teal><font size = 3><u><b>.:Sleeping:.</u></b> <p> <font color = teal>Eventually your character will become sleepy. But do not worry, you dont need to sleep, but not sleeping will make you quite alot slower in Combat and has a chance to make you Ill. In order to sleep, find a bed and Interact with it. To wake up, Interact with it again.<br>"
							return
						if(HelpResult == "Eating")
							usr << "<font color = teal><font size = 3><u><b>.:Eating:.</u></b> <p> <font color = teal>Eventually your character will become hungry. But do not worry, you dont need to eat, but not eating will make you quite alot slower in Combat and has a chance to make you Ill. In order to eat, simply find some food, open your Inventory and click the Eat button, then click the Food. Some Foods will make you see strange, others will need to be cooked. You can Eat raw meats or limbs, but depending on your race, you may get Ill if the foods not cooked. Small foods, such as berries, will never fill you up past a certain Point, you will be required to find somthing a little bigger. Some races can eat an entire corpse, to do this, Click the Eat button in your inventory, then Click the Corpse.<br>"
							return
						if(HelpResult == "Cooking")
							usr << "<font color = teal><font size = 3><u><b>.:Cooking:.</u></b> <p> <font color = teal>Some races will need to have their food cooked if they want to eat safely. There is currently only one way to cook food. Light up a Camp Fire, then drop the food down next to it. Depending on your cooking skill, the food should cook slowly. If you leave the food near the fire too long you will be alerted that the food will burn.<br>"
							return
						if(HelpResult == "Butchery")
							usr << "<font color = teal><font size = 3><u><b>.:Butchery:.</u></b> <p> <font color = teal>In order to get meat you will need to Butcher a Corpse. In order to do this, Equip a Sword or Axe then Interact with one of them, then simply click a body. A Menu will display asking which part of the body you want to Butcher. Limbs can be removed, cooked and eaten. If you choose the Body option you will get Raw Meat Chuncks.<br>"
							return
						if(HelpResult == "Skinning")
							usr << "<font color = teal><font size = 3><u><b>.:Skinning:.</u></b> <p> <font color = teal>In order to Skin a Corpse you must first Equip a Dagger. After that simply Interact with a Corpse and you will begin to skin it.<br>"
							return
						if(HelpResult == "Smelting")
							usr << "<font color = teal><font size = 3><u><b>.:Smelting:.</u></b> <p> <font color = teal>In order to Smelt Ores that you Mine you will first need to locate a Forge. Next you will need at least one piece of Coal to fuel the forge. You will also need a Torch to light the Forge with. Once you have these things, Interact with the Coal, then Click the Forge. This will place the Coal into the Forge and supply it with Fuel. You can keep adding Coal before and after you light the Forge to make it last longer. Once the Coal is inside the Forge, Light the Torch on a Wall Torch, then Interact with the Forge with the Torch Equipped and Lit. This will light the Forge up. Now that the Forge is lit, Interact on some Ore, then click the Lit Forge. You will begin to create an Ingot out of the Ore. You will fail alot of times before you become really good at it though, so remember to stock up on lots of Coal and Ore.<br>"
							return
						if(HelpResult == "Stone Work")
							usr << "<font color = teal><font size = 3><u><b>.:Stone Work:.</u></b> <p> <font color = teal>Once you try Mining you will notice that you receive a Large Boulder. This Boulder can be turned into large and Small Bricks for use in Building and will also give you Stone Shards for lighting Camp Sites. With a hammer equipped, Interact with a Boulder, this will Hammer the Boulder into a Large brick. If you Interact with the Large Brick you created this will turn it into Three Smaller bricks.<br>"
							return
						if(HelpResult == "Forging")
							usr << "<font color = teal><font size = 3><u><b>.:Forging:.</u></b> <p> <font color = teal>In order to Forge a Metal Ingot into an Item you will first need to make sure you can create the Item you want. using the Examine button you can click Metal objects such as Weapons and Armour and learn how to create them by looking at them, this will add that item to memory for when you begin to Blacksmith. Once you have at least one item in your memory, find a Forge and Anvil. You will now need a Hammer. Once you have a Hammer Interact with an Ingot then click the Hammer. make sure that you are standing between a Lit Forge and an Anvil, or this will not work. A Forging menu should pop up once you Interact with the Ingot then click the hammer. In order to Forge an Item from the list, just simply Click the Item. You will fail alot of times before you become good at it. The higher your Forging skill, the better Quality the item will be. Note that only Iron and Copper can be crafted into items at the present time.<br>"
							return
						if(HelpResult == "Carpentry")
							usr << "<font color = teal><font size = 3><u><b>.:Carpentry:.</u></b> <p> <font color = teal>In order to create wooden items using Planks you will first need to know how to create them. Using the Examine button, Click Wooden items that are close by. This will add the items to your Memory and allow you to craft them any time you wish. To use Carpentry you must first have a Saw. Once you have a Saw, Equip it then Interact with a Wooden Plank, then click the Saw. This will open up the Carpentry menu. From here you simply click which wooden item you want to craft and you will begin doing so. If you create a Wooden Door, you can Place it by Interacting with it in your Inventory.<br>"
							return
						if(HelpResult == "Repair")
							usr << "<font color = teal><font size = 3><u><b>.:Repair:.</u></b> <p> <font color = teal>When your items break you will need to repair them. Use some Coal on a Forge, then use a Lit Torch on the Forge to light it, stand between the Forge and the Anvil, then Equip a Hammer. Now all you have to do is Interact with the broken item, then click the Hammer<br>"
							return
			SkillInfo
				name = "SkillInformation-(A)"
				icon_state = "skills off"
				Type = "Skill"
				screen_loc = "6,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(usr.InvenUp)
						usr << "<b>Close your inventory first!<br>"
						return
					if(src.icon_state == "skills off")
						usr.Function = "Skill"
						usr.ResetButtons()
						src.icon_state = "skills on"
						usr.CreateSkillDisplay()
						return
					if(src.icon_state == "skills on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "skills off"
						usr.Delete("SkillDisplay","SkillDisplay")
						return
			HealthInfo
				name = "HealthInformation-(H)"
				icon_state = "health off"
				Type = "Health"
				screen_loc = "7,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(usr.InvenUp)
						usr << "<b>Close your inventory first!<br>"
						return
					if(src.icon_state == "health off")
						usr.Function = "Health"
						usr.ResetButtons()
						src.icon_state = "health on"
						usr.CreateHealthDisplay()
						return
					if(src.icon_state == "health on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "health off"
						usr.Delete("HealthDisplay","HealthDisplay")
						return
			CharacterInfo
				name = "CharacterInformation-(C)"
				icon_state = "stats off"
				Type = "Stats"
				screen_loc = "8,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(usr.InvenUp)
						usr << "<b>Close your inventory first!<br>"
						return
					if(src.icon_state == "stats off")
						usr.ResetButtons()
						usr.Function = "Stats"
						src.icon_state = "stats on"
						usr.CreateInfoDisplay()
						return
					if(src.icon_state == "stats on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "stats off"
						usr.Delete("InfoDisplay","InfoDisplay")
						return
			Inventory
				name = "Inventory-(I)"
				icon_state = "inv off"
				Type = "Inventory"
				screen_loc = "9,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(src.icon_state == "inv off")
						usr.ResetButtons()
						usr.Function = "Inventory"
						src.icon_state = "inv on"
						usr.InvenUp = 1
						usr.CreateInventory()
						return
					if(src.icon_state == "inv on")
						if(usr.Container)
							var/obj/C = usr.Container
							if(C.ClosedState)
								C.icon_state = C.ClosedState
						if(usr.Function != "Eat")
							if(usr.Function != "Interact")
								usr.ResetButtons()
								usr.Function = null
						usr.InvenUp = 0
						src.icon_state = "inv off"
						usr.DeleteInventoryMenu()
						return
			CombatMode
				name = "CombatMode-(D)"
				icon_state = "combat off"
				Type = "Combat"
				screen_loc = "11,1"
				layer = 10
				Click()
					if(usr.Dead)
						return
					if(usr.Job)
						usr.Job = null
						usr << "<font color=green>You stop doing a task and must wait to do another!<br>"
						usr.CantDoTask = 1
						spawn(301)
							if(usr)
								usr.CantDoTask = 0
						usr.MovementCheck()
					if(src.icon_state == "combat off")
						usr.ResetButtons()
						usr.Function = "Combat"
						src.icon_state = "combat on"
						usr << "<b>Combat Mode On, Click an enemy once to start attacking<br>"
						return
					if(src.icon_state == "combat on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "combat off"
						usr << "<b>Combat Mode Off<br>"
						if(usr.Target)
							usr << "Target lost...<br>"
							var/mob/m = usr.Target
							usr.client.images -= m.TargetIcon
							usr.Target = null
						return
			RolePlay
				name = "RolePlay-(R)"
				icon_state = "Emote"
				Type = "RP"
				screen_loc = "3,1"
				layer = 10
				Click()
					var/T = input("Role Play - In Character")as null|message
					if(!T)
						return
					if(usr.OrginalName == null)
						hearers(usr) << "<font color =yellow>[usr] [T]<br>"
					else
						hearers(usr) << "<font color=yellow>([usr.OrginalName])[usr] [T]<br>"
					var/Cant = 0
					if(findtext(T,"(",1,0))
						Cant = 1
					if(findtext(T,")",1,0))
						Cant = 1
					if(findtext(T,"{",1,0))
						Cant = 1
					if(findtext(T,"}",1,0))
						Cant = 1
					if(Cant == 0)
						var/TextLength = lentext(T)
						while(TextLength)
							TextLength -= 1
							usr.RPpoints += 0.001
					if(usr)
						usr.Log_player("{Year-[Year], Month-[Month], RP-[usr.RPpoints]}([usr.key])[usr] RP - [T]")
			OOC
				name = "OutOfCharacter-(O)"
				icon_state = "OOC"
				Type = "OOC"
				screen_loc = "1,1"
				layer = 10
				Click()
					if(Mute)
						usr << "<font color = red>OOC Disabled!<br>"
						return
					var/T = input("OOC - Out of Character")as null|text
					if(!T)
						return
					if(Mute)
						usr << "<font color = red>OOC Disabled!<br>"
						return
					if(usr.Muted)
						usr << "<font color =red>You cant talk, you're Muted!<br>"
						return
					if(usr)
						for(var/mob/M in Players)
							if(M.client && M.OOC)
								M << "<font color =green>-OOC- [usr.key]: [Safe_Guard(T)]<br>"
						usr.Log_player("([usr.key])[usr] OOC - [T]")
					return
			Say
				name = "InCharacterChat-(S)"
				icon_state = "say"
				Type = "Say"
				screen_loc = "2,1"
				layer = 10
				Click()
					if(usr.Fainted)
						usr << "<font color =red>You cant speak while un-conscious!<br>"
						return
					if(usr.CurrentLanguage == null)
						usr << "<font color =red>Select a Language to speak first!<br>"
						return
					var/T = input("Say - In Character")as null|text
					if(!T)
						return
					if(usr && usr.invisibility && usr.Admin == 0)
						view(1,usr) << "<font color = teal>[usr] whispers:Wooooo....."
						return
					var/obj/SL = usr.CurrentLanguage
					for(var/mob/M in hearers(6,usr))
						var/NewText = null
						var/Text = null
						var/TextLength = lentext(T)
						var/Understands = 0
						if(usr.CurrentLanguage)
							for(var/obj/Misc/Languages/HL in M.LangKnow)
								if(SL.name == HL.name)
									Understands = HL.SpeakPercent
									if(HL.SpeakPercent <= 100)
										var/NotSpeaker = 1
										if(HL in usr.LangKnow)
											NotSpeaker = 0
										if(NotSpeaker)
											if(SL.SpeakPercent >= HL.SpeakPercent && HL.SpeakPercent <= 97)
												HL.SpeakPercent += M.Intelligence / 20
												if(M.Intelligence <= M.IntCap && M.Intelligence <= WorldIntCap && M.Intelligence <= M.IntelligenceMax)
													M.Intelligence += M.IntelligenceMulti / 10
						if(Understands == 0)
							M.LearnRaceLanguages("[usr.CurrentLanguage]")
						while(TextLength >= 1)
							Text ="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
							var/Change = 0
							Change = prob(100 - Understands)
							if(Change)
								M.CheckText(Text)
								NewText+="[M.TextOutput]"
								M.TextOutput = null
							if(Change == 0)
								NewText+="[copytext(T,(lentext(T)-TextLength)+1,(lentext(T)-TextLength)+2)]"
							TextLength--
						if(usr.OrginalName == null)
							M << "<font color=teal>[usr] says in [SL.name]: [Safe_Guard(NewText)]<br>"
						else
							M << "<font color=teal>([usr.OrginalName])[usr] says in [SL.name]: [Safe_Guard(NewText)]<br>"
						var/Cant = 0
						if(findtext(T,"(",1,0))
							Cant = 1
						if(findtext(T,")",1,0))
							Cant = 1
						if(findtext(T,"{",1,0))
							Cant = 1
						if(findtext(T,"}",1,0))
							Cant = 1
						if(Cant == 0)
							var/SayLength = lentext(T)
							while(SayLength)
								SayLength -= 1
								usr.RPpoints += 0.0005
					usr.Log_player("([usr.key])[usr] IC - [T]")
			LeftHand
				name = "LeftHand"
				icon_state = "left hand"
				Type = "LeftHand"
				screen_loc = "13,2"
				layer = 10
				Click()
					if(usr.LeftArm)
						if(usr.CurrentHand == "Right")
							usr.CurrentHand = "Left"
							src.icon_state = "left hand on"
							for(var/obj/HUD/Buttons/RightHand/R in usr.client.screen)
								R.icon_state = "right hand"
							return
					else
						usr << "<font color = red>Your Left Arm is gone!<br>"
						return
			RightHand
				name = "RightHand"
				icon_state = "right hand"
				Type = "RightHand"
				screen_loc = "14,2"
				layer = 10
				Click()
					if(usr.RightArm)
						if(usr.CurrentHand == "Left")
							usr.CurrentHand = "Right"
							src.icon_state = "right hand on"
							for(var/obj/HUD/Buttons/LeftHand/L in usr.client.screen)
								L.icon_state = "left hand"
							return
					else
						usr << "<font color = red>Your Right Arm is gone!<br>"
						return
			Examine
				name = "Examine-(E)"
				icon_state = "examine off"
				Type = "Examine"
				screen_loc = "12,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant use this while busy!<br>"
						return
					if(usr.CanSee == 0)
						usr << "<font color=red>You are blind and can not see objects!<br>"
						return
					if(src.icon_state == "examine off")
						usr.ResetButtons()
						usr.Function = "Examine"
						src.icon_state = "examine on"
						usr << "<b>Examine Mode On - (Location - [usr.x],[usr.y],[usr.z]. Temp feature.)<br>"
						usr.client.mouse_pointer_icon = 'IntCursor.dmi'
						return
					if(src.icon_state == "examine on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "examine off"
						usr << "<b>Examine Mode Off - (Location - [usr.x],[usr.y],[usr.z]. Temp feature.)<br>"
						usr.client.mouse_pointer_icon = 'Cursor.dmi'
						return
			PickUp
				name = "PickUp-(U)"
				icon_state = "pick off"
				Type = "PickUp"
				screen_loc = "14,1"
				layer = 10
				Click()
					if(usr.Dead)
						usr << "<b>You cant do that while dead!<br>"
						return
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(usr.LeftArm == 0)
						if(usr.RightArm == 0)
							usr << "<font color=red>You have no hands to pick anything up with!<br>"
							return
					if(usr.CanSee == 0)
						usr << "<font color=red>You are blind and can not see objects!<br>"
						return
					if(src.icon_state == "pick off")
						usr.ResetButtons()
						usr.Function = "PickUp"
						src.icon_state = "pick on"
						usr << "<b>Pick Up Mode On<br>"
						usr.client.mouse_pointer_icon = 'IntCursor.dmi'
						return
					if(src.icon_state == "pick on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "pick off"
						usr << "<b>Pick Up Mode Off<br>"
						usr.client.mouse_pointer_icon = 'Cursor.dmi'
						return
			Pull
				name = "Pull-(P)"
				icon_state = "pull off"
				Type = "Pull"
				screen_loc = "10,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant use this while busy!<br>"
						return
					if(usr.CanSee == 0)
						usr << "<font color=red>You are blind and can not see objects!<br>"
						return
					if(src.icon_state == "pull off")
						usr.ResetButtons()
						usr.Function = "Pull"
						src.icon_state = "pull on"
						usr << "<b>Pull Mode On<br>"
						usr.client.mouse_pointer_icon = 'IntCursor.dmi'
						return
					if(src.icon_state == "pull on")
						usr.ResetButtons()
						usr.Function = null
						if(usr.Pull)
							var/obj/O = usr.Pull
							usr << "<b>You stop pulling [O]!<br>"
							O.Pull = null
						src.icon_state = "pull off"
						usr << "<b>Pull Mode Off<br>"
						usr.client.mouse_pointer_icon = 'Cursor.dmi'
						return
			Build
				name = "Build-(B)"
				icon_state = "build off"
				Type = "Build"
				screen_loc = "5,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant open or close this while busy!<br>"
						return
					if(usr.CanSee == 0)
						usr << "<font color=red>You are blind and can not see objects!<br>"
						return
					if(src.icon_state == "build off")
						usr.ResetButtons()
						usr.Function = "Build"
						src.icon_state = "build on"
						usr.CreateBuildMenu()
						usr << "<b>Click an icon to build, make sure you have the right materials!<br>"
						return
					if(src.icon_state == "build on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "build off"
						usr << "<b>Build Mode Off<br>"
						usr.DeleteInventoryMenu()
						return
			Interact
				name = "Interact-(Z)"
				icon_state = "int off"
				Type = "Interact"
				screen_loc = "13,1"
				layer = 10
				Click()
					if(usr.Job)
						usr << "<b>You cant use this while busy!<br>"
						return
					if(usr.Dead)
						usr << "<b>You cant do that while dead!<br>"
						return
					if(usr.CanSee == 0)
						usr << "<font color=red>You are blind and can not see objects!<br>"
						return
					if(src.icon_state == "int off")
						usr.ResetButtons()
						usr.Function = "Interact"
						src.icon_state = "int on"
						usr << "<b>Interact Mode On<br>"
						usr.client.mouse_pointer_icon = 'IntCursor.dmi'
						return
					if(src.icon_state == "int on")
						usr.ResetButtons()
						usr.Function = null
						src.icon_state = "int off"
						if(usr.Ref)
							usr << "<font color = teal>Interaction with [usr.Ref] lost.<br>"
						usr.Ref = null
						usr << "<b>Interact Mode Off<br>"
						usr.client.mouse_pointer_icon = 'Cursor.dmi'
						return
		GUI
			icon = 'HUD2.dmi'
			layer = 10
			ScreenOverlay
				name = ""
				icon = 'HUD.dmi'
				icon_state = "blank screen"
				screen_loc = "1,1 to 15,15"
			BloodBar
				icon = 'BloodBar.dmi'
				icon_state = "100"
				screen_loc = "4,1"
			SW
				icon_state = "SW"
				screen_loc = "1,1"
			NW
				icon_state = "NW"
				screen_loc = "1,15"
			NE
				icon_state = "NE"
				screen_loc = "15,15"
			SE
				icon_state = "SE"
				screen_loc = "15,1"
			N
				icon_state = "N"
				screen_loc = "2,15 to 14,15"
			S
				icon_state = "S"
				screen_loc = "2,1 to 14,1"
			E
				icon_state = "E"
				screen_loc = "15,2 to 15,14"
			W
				icon_state = "W"
				screen_loc = "1,2 to 1,14"
		LoadGame
			icon = 'menu.dmi'
			icon_state = "Load"
			Click()
				if(usr in range(8,src))
					if(usr.Ready == 0)
						var/player_sav = "players/[usr.ckey].sav"
						if(length(file(player_sav)))
							usr << sound(null)
							usr.MusicProc()
							usr.LoggedIn = 1
							usr.Load()
							if(usr.Admin)
								var/html_doc="<head><title>Notes</title></head><body bgcolor=#000000 text=#FFFF00><center>[Notes]"
								usr<<browse(html_doc,"window=Notes")
							if(usr)
								if(usr.x == 0)
									if(usr.y == 0)
										if(usr.z == 0)
											usr.loc = locate(1,1,1)
											usr << "<font color = teal>Possible Save Error, please report to an Admin.<br>"
						else
							usr << "<b>You have no save!<br>"
							return
					else
						usr << "<font color = teal>Please relog if you wish to load a game now.<br>"
						return
		NewGame
			icon = 'menu.dmi'
			icon_state = "New"
			Click()
				if(usr in range(8,src))
					usr.Ready = 1
					switch(alert("Start a new game?",,"Yes","No"))
						if("No")
							usr.Ready = 0
							return
						if("Yes")
							usr.CreateRaceSelection()
							usr.loc = locate(28,91,1)
							alert("Choose a race by clicking on a face portrait! Once your happy with your selection choose a Gender and click Accept!")
/**
						usr << "<font color = green>You arrive in Holthormus and decide to seek shelter in the Chapel of Order<br>"
*//